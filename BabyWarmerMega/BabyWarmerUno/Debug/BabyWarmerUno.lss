
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00001e26  00001eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080020a  0080020a  00001ec4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000586d  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001938  00000000  00000000  00007a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a9d  00000000  00000000  000093a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  0000ae48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001520  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f99  00000000  00000000  0000ca94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000ea2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__vector_17>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	d8 08       	sbc	r13, r8

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e6 e2       	ldi	r30, 0x26	; 38
      fe:	fe e1       	ldi	r31, 0x1E	; 30
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	aa 30       	cpi	r26, 0x0A	; 10
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	aa e0       	ldi	r26, 0x0A	; 10
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a6 34       	cpi	r26, 0x46	; 70
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	fc d5       	rcall	.+3064   	; 0xd3a <main>
     142:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z12init_devicesv>:
	
	max2.MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
	max2.MAX7219_writeData(1,das);
	max2.MAX7219_writeData(6,S);
	max2.MAX7219_writeData(8,E);
	max2.MAX7219_writeData(2,t);
     148:	78 94       	sei
     14a:	8c e3       	ldi	r24, 0x3C	; 60
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_ZN8Controls12initControlsEv>
     152:	85 e1       	ldi	r24, 0x15	; 21
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN3led8led_initEv>
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	8f e3       	ldi	r24, 0x3F	; 63
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN6Timerr11setTimerNumEi>
     166:	8f e3       	ldi	r24, 0x3F	; 63
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN6Timerr19setCompareInterruptEv>
     16e:	68 ec       	ldi	r22, 0xC8	; 200
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	8f e3       	ldi	r24, 0x3F	; 63
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN6Timerr16startCustomTimerEi>
     17a:	24 e0       	ldi	r18, 0x04	; 4
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	44 e0       	ldi	r20, 0x04	; 4
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	8c e1       	ldi	r24, 0x1C	; 28
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN7max721911MAX7219_setEiii>
     18e:	8f e3       	ldi	r24, 0x3F	; 63
     190:	9c e9       	ldi	r25, 0x9C	; 156
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <_Z12init_devicesv+0x4a>
     196:	00 c0       	rjmp	.+0      	; 0x198 <_Z12init_devicesv+0x50>
     198:	00 00       	nop
     19a:	24 e0       	ldi	r18, 0x04	; 4
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	44 e0       	ldi	r20, 0x04	; 4
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	86 e1       	ldi	r24, 0x16	; 22
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN7max721911MAX7219_setEiii>
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9c e9       	ldi	r25, 0x9C	; 156
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_Z12init_devicesv+0x6a>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z12init_devicesv+0x70>
     1b8:	00 00       	nop
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8c e1       	ldi	r24, 0x1C	; 28
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7max721912MAX7219_initEc>
     1c4:	8f e3       	ldi	r24, 0x3F	; 63
     1c6:	9c e9       	ldi	r25, 0x9C	; 156
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z12init_devicesv+0x80>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z12init_devicesv+0x86>
     1ce:	00 00       	nop
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	86 e1       	ldi	r24, 0x16	; 22
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7max721912MAX7219_initEc>
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	9c e9       	ldi	r25, 0x9C	; 156
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <_Z12init_devicesv+0x96>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_Z12init_devicesv+0x9c>
     1e4:	00 00       	nop
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	8c e1       	ldi	r24, 0x1C	; 28
     1ea:	92 e0       	ldi	r25, 0x02	; 2
     1ec:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7max721912MAX7219_initEc>
     1f0:	8f e3       	ldi	r24, 0x3F	; 63
     1f2:	9c e9       	ldi	r25, 0x9C	; 156
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z12init_devicesv+0xac>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z12init_devicesv+0xb2>
     1fa:	00 00       	nop
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	86 e1       	ldi	r24, 0x16	; 22
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7max721912MAX7219_initEc>
     206:	8f e3       	ldi	r24, 0x3F	; 63
     208:	9c e9       	ldi	r25, 0x9C	; 156
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_Z12init_devicesv+0xc2>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z12init_devicesv+0xc8>
     210:	00 00       	nop
     212:	8c e1       	ldi	r24, 0x1C	; 28
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
     21a:	9f ef       	ldi	r25, 0xFF	; 255
     21c:	26 e7       	ldi	r18, 0x76	; 118
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	91 50       	subi	r25, 0x01	; 1
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	e1 f7       	brne	.-8      	; 0x220 <_Z12init_devicesv+0xd8>
     228:	00 c0       	rjmp	.+0      	; 0x22a <_Z12init_devicesv+0xe2>
     22a:	00 00       	nop
     22c:	86 e1       	ldi	r24, 0x16	; 22
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	26 e7       	ldi	r18, 0x76	; 118
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	91 50       	subi	r25, 0x01	; 1
     23c:	20 40       	sbci	r18, 0x00	; 0
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	e1 f7       	brne	.-8      	; 0x23a <_Z12init_devicesv+0xf2>
     242:	00 c0       	rjmp	.+0      	; 0x244 <_Z12init_devicesv+0xfc>
     244:	00 00       	nop
     246:	08 95       	ret

00000248 <__vector_17>:
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	2f 93       	push	r18
     254:	3f 93       	push	r19
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     25e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     262:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <spiTimerCheck>
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <spiTimerCheck>
     26c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <startMonitor>
     270:	88 23       	and	r24, r24
     272:	49 f0       	breq	.+18     	; 0x286 <__vector_17+0x3e>
     274:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <second>
     278:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <second+0x1>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <second+0x1>
     282:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <second>
     286:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <display_count>
     28a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <display_count+0x1>
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <display_count+0x1>
     294:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <display_count>
     298:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <display_count>
     29c:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <display_count+0x1>
     2a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     2a4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	3c f0       	brlt	.+14     	; 0x2bc <__vector_17+0x74>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <displayUpdate>
     2b4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <display_count+0x1>
     2b8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <display_count>
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <_Z13sendToDisplayfff>:
     2ce:	4f 92       	push	r4
     2d0:	5f 92       	push	r5
     2d2:	6f 92       	push	r6
     2d4:	7f 92       	push	r7
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	2b 01       	movw	r4, r22
     2f0:	3c 01       	movw	r6, r24
     2f2:	49 01       	movw	r8, r18
     2f4:	5a 01       	movw	r10, r20
     2f6:	67 01       	movw	r12, r14
     2f8:	78 01       	movw	r14, r16
     2fa:	43 ef       	ldi	r20, 0xF3	; 243
     2fc:	69 e0       	ldi	r22, 0x09	; 9
     2fe:	8c e1       	ldi	r24, 0x1C	; 28
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	63 e0       	ldi	r22, 0x03	; 3
     30a:	8c e1       	ldi	r24, 0x1C	; 28
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	c3 01       	movw	r24, r6
     31c:	b2 01       	movw	r22, r4
     31e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divsf3>
     322:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fixunssfsi>
     326:	46 2f       	mov	r20, r22
     328:	68 e0       	ldi	r22, 0x08	; 8
     32a:	8c e1       	ldi	r24, 0x1C	; 28
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     332:	c3 01       	movw	r24, r6
     334:	b2 01       	movw	r22, r4
     336:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     33a:	ca e0       	ldi	r28, 0x0A	; 10
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
     340:	be 01       	movw	r22, r28
     342:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     346:	48 2f       	mov	r20, r24
     348:	40 68       	ori	r20, 0x80	; 128
     34a:	66 e0       	ldi	r22, 0x06	; 6
     34c:	8c e1       	ldi	r24, 0x1C	; 28
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 e2       	ldi	r20, 0x20	; 32
     35a:	51 e4       	ldi	r21, 0x41	; 65
     35c:	c3 01       	movw	r24, r6
     35e:	b2 01       	movw	r22, r4
     360:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__mulsf3>
     364:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     368:	cb 01       	movw	r24, r22
     36a:	be 01       	movw	r22, r28
     36c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     370:	48 2f       	mov	r20, r24
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	8c e1       	ldi	r24, 0x1C	; 28
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	64 e0       	ldi	r22, 0x04	; 4
     380:	8c e1       	ldi	r24, 0x1C	; 28
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e2       	ldi	r20, 0x20	; 32
     38e:	51 e4       	ldi	r21, 0x41	; 65
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divsf3>
     398:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fixunssfsi>
     39c:	46 2f       	mov	r20, r22
     39e:	67 e0       	ldi	r22, 0x07	; 7
     3a0:	8c e1       	ldi	r24, 0x1C	; 28
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     3b0:	cb 01       	movw	r24, r22
     3b2:	be 01       	movw	r22, r28
     3b4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     3b8:	48 2f       	mov	r20, r24
     3ba:	40 68       	ori	r20, 0x80	; 128
     3bc:	65 e0       	ldi	r22, 0x05	; 5
     3be:	8c e1       	ldi	r24, 0x1C	; 28
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e2       	ldi	r20, 0x20	; 32
     3cc:	51 e4       	ldi	r21, 0x41	; 65
     3ce:	c5 01       	movw	r24, r10
     3d0:	b4 01       	movw	r22, r8
     3d2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__mulsf3>
     3d6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     3da:	cb 01       	movw	r24, r22
     3dc:	be 01       	movw	r22, r28
     3de:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     3e2:	48 2f       	mov	r20, r24
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	8c e1       	ldi	r24, 0x1C	; 28
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     3ee:	42 ea       	ldi	r20, 0xA2	; 162
     3f0:	69 e0       	ldi	r22, 0x09	; 9
     3f2:	86 e1       	ldi	r24, 0x16	; 22
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	86 e1       	ldi	r24, 0x16	; 22
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e2       	ldi	r20, 0x20	; 32
     40c:	51 e4       	ldi	r21, 0x41	; 65
     40e:	c7 01       	movw	r24, r14
     410:	b6 01       	movw	r22, r12
     412:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divsf3>
     416:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fixunssfsi>
     41a:	46 2f       	mov	r20, r22
     41c:	66 e0       	ldi	r22, 0x06	; 6
     41e:	86 e1       	ldi	r24, 0x16	; 22
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     42e:	cb 01       	movw	r24, r22
     430:	be 01       	movw	r22, r28
     432:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     436:	48 2f       	mov	r20, r24
     438:	40 68       	ori	r20, 0x80	; 128
     43a:	68 e0       	ldi	r22, 0x08	; 8
     43c:	86 e1       	ldi	r24, 0x16	; 22
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e2       	ldi	r20, 0x20	; 32
     44a:	51 e4       	ldi	r21, 0x41	; 65
     44c:	c7 01       	movw	r24, r14
     44e:	b6 01       	movw	r22, r12
     450:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__mulsf3>
     454:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     458:	cb 01       	movw	r24, r22
     45a:	be 01       	movw	r22, r28
     45c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     460:	48 2f       	mov	r20, r24
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	86 e1       	ldi	r24, 0x16	; 22
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	9f 90       	pop	r9
     482:	8f 90       	pop	r8
     484:	7f 90       	pop	r7
     486:	6f 90       	pop	r6
     488:	5f 90       	pop	r5
     48a:	4f 90       	pop	r4
     48c:	08 95       	ret

0000048e <_Z16checkTemperaturev>:
     48e:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     492:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     496:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     49a:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     49e:	2d ec       	ldi	r18, 0xCD	; 205
     4a0:	3c ec       	ldi	r19, 0xCC	; 204
     4a2:	44 e1       	ldi	r20, 0x14	; 20
     4a4:	52 e4       	ldi	r21, 0x42	; 66
     4a6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     4aa:	18 16       	cp	r1, r24
     4ac:	ac f4       	brge	.+42     	; 0x4d8 <_Z16checkTemperaturev+0x4a>
     4ae:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <high_temperature>
     4b8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <air_temperature>
     4bc:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <air_temperature+0x1>
     4c0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <air_temperature+0x2>
     4c4:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <air_temperature+0x3>
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	85 e1       	ldi	r24, 0x15	; 21
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	b2 c6       	rjmp	.+3428   	; 0x123a <_ZN3led6led_doEii>
     4d6:	08 95       	ret
     4d8:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     4dc:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     4e0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     4e4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	42 e1       	ldi	r20, 0x12	; 18
     4ee:	52 e4       	ldi	r21, 0x42	; 66
     4f0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__cmpsf2>
     4f4:	88 23       	and	r24, r24
     4f6:	44 f4       	brge	.+16     	; 0x508 <_Z16checkTemperaturev+0x7a>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <low_temperature>
     4fe:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     502:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <air_high_temperature>
     506:	08 95       	ret
     508:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     50c:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     510:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     514:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4c e1       	ldi	r20, 0x1C	; 28
     51e:	52 e4       	ldi	r21, 0x42	; 66
     520:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	7c f4       	brge	.+30     	; 0x546 <_Z16checkTemperaturev+0xb8>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <air_high_temperature>
     52e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     532:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	85 e1       	ldi	r24, 0x15	; 21
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	7b c6       	rjmp	.+3318   	; 0x123a <_ZN3led6led_doEii>
     544:	08 95       	ret
     546:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <air_high_temperature>
     54a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     54e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	85 e1       	ldi	r24, 0x15	; 21
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	6d d6       	rcall	.+3290   	; 0x123a <_ZN3led6led_doEii>
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	85 e1       	ldi	r24, 0x15	; 21
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	66 c6       	rjmp	.+3276   	; 0x123a <_ZN3led6led_doEii>
     56e:	08 95       	ret

00000570 <_Z18sendToDisplayBelowf>:
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
     580:	42 ea       	ldi	r20, 0xA2	; 162
     582:	69 e0       	ldi	r22, 0x09	; 9
     584:	86 e1       	ldi	r24, 0x16	; 22
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	64 e0       	ldi	r22, 0x04	; 4
     590:	86 e1       	ldi	r24, 0x16	; 22
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e2       	ldi	r20, 0x20	; 32
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divsf3>
     5a8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fixunssfsi>
     5ac:	46 2f       	mov	r20, r22
     5ae:	66 e0       	ldi	r22, 0x06	; 6
     5b0:	86 e1       	ldi	r24, 0x16	; 22
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     5b8:	c7 01       	movw	r24, r14
     5ba:	b6 01       	movw	r22, r12
     5bc:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     5c0:	ca e0       	ldi	r28, 0x0A	; 10
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	cb 01       	movw	r24, r22
     5c6:	be 01       	movw	r22, r28
     5c8:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     5cc:	48 2f       	mov	r20, r24
     5ce:	40 68       	ori	r20, 0x80	; 128
     5d0:	68 e0       	ldi	r22, 0x08	; 8
     5d2:	86 e1       	ldi	r24, 0x16	; 22
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e2       	ldi	r20, 0x20	; 32
     5e0:	51 e4       	ldi	r21, 0x41	; 65
     5e2:	c7 01       	movw	r24, r14
     5e4:	b6 01       	movw	r22, r12
     5e6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__mulsf3>
     5ea:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixsfsi>
     5ee:	cb 01       	movw	r24, r22
     5f0:	be 01       	movw	r22, r28
     5f2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     5f6:	48 2f       	mov	r20, r24
     5f8:	62 e0       	ldi	r22, 0x02	; 2
     5fa:	86 e1       	ldi	r24, 0x16	; 22
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <_Z15displaySensFailv>:
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	69 e0       	ldi	r22, 0x09	; 9
     614:	8c e1       	ldi	r24, 0x1C	; 28
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     61c:	4b e5       	ldi	r20, 0x5B	; 91
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	8c e1       	ldi	r24, 0x1C	; 28
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     628:	4f e4       	ldi	r20, 0x4F	; 79
     62a:	67 e0       	ldi	r22, 0x07	; 7
     62c:	8c e1       	ldi	r24, 0x1C	; 28
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     634:	45 e1       	ldi	r20, 0x15	; 21
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	8c e1       	ldi	r24, 0x1C	; 28
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     640:	4b e5       	ldi	r20, 0x5B	; 91
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	8c e1       	ldi	r24, 0x1C	; 28
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     64c:	47 e4       	ldi	r20, 0x47	; 71
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	8c e1       	ldi	r24, 0x1C	; 28
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     658:	47 e7       	ldi	r20, 0x77	; 119
     65a:	68 e0       	ldi	r22, 0x08	; 8
     65c:	8c e1       	ldi	r24, 0x1C	; 28
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     664:	46 e0       	ldi	r20, 0x06	; 6
     666:	66 e0       	ldi	r22, 0x06	; 6
     668:	8c e1       	ldi	r24, 0x1C	; 28
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     670:	4e e0       	ldi	r20, 0x0E	; 14
     672:	62 e0       	ldi	r22, 0x02	; 2
     674:	8c e1       	ldi	r24, 0x1C	; 28
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     67c:	08 95       	ret

0000067e <_Z21displaySetTemperaturev>:
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	69 e0       	ldi	r22, 0x09	; 9
     682:	8c e1       	ldi	r24, 0x1C	; 28
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	8c e1       	ldi	r24, 0x1C	; 28
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     696:	4b e5       	ldi	r20, 0x5B	; 91
     698:	67 e0       	ldi	r22, 0x07	; 7
     69a:	8c e1       	ldi	r24, 0x1C	; 28
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6a2:	4f e4       	ldi	r20, 0x4F	; 79
     6a4:	65 e0       	ldi	r22, 0x05	; 5
     6a6:	8c e1       	ldi	r24, 0x1C	; 28
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6ae:	4f e0       	ldi	r20, 0x0F	; 15
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	8c e1       	ldi	r24, 0x1C	; 28
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6ba:	4f e0       	ldi	r20, 0x0F	; 15
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	8c e1       	ldi	r24, 0x1C	; 28
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6c6:	47 e6       	ldi	r20, 0x67	; 103
     6c8:	68 e0       	ldi	r22, 0x08	; 8
     6ca:	8c e1       	ldi	r24, 0x1C	; 28
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	66 e0       	ldi	r22, 0x06	; 6
     6d6:	8c e1       	ldi	r24, 0x1C	; 28
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	8c e1       	ldi	r24, 0x1C	; 28
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6ea:	08 95       	ret

000006ec <_Z14displayPreHeatv>:
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	69 e0       	ldi	r22, 0x09	; 9
     6f0:	8c e1       	ldi	r24, 0x1C	; 28
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	63 e0       	ldi	r22, 0x03	; 3
     6fc:	8c e1       	ldi	r24, 0x1C	; 28
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     704:	47 e6       	ldi	r20, 0x67	; 103
     706:	67 e0       	ldi	r22, 0x07	; 7
     708:	8c e1       	ldi	r24, 0x1C	; 28
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     710:	45 e0       	ldi	r20, 0x05	; 5
     712:	65 e0       	ldi	r22, 0x05	; 5
     714:	8c e1       	ldi	r24, 0x1C	; 28
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     71c:	4f e4       	ldi	r20, 0x4F	; 79
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	8c e1       	ldi	r24, 0x1C	; 28
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     728:	47 e3       	ldi	r20, 0x37	; 55
     72a:	64 e0       	ldi	r22, 0x04	; 4
     72c:	8c e1       	ldi	r24, 0x1C	; 28
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     734:	4f e4       	ldi	r20, 0x4F	; 79
     736:	68 e0       	ldi	r22, 0x08	; 8
     738:	8c e1       	ldi	r24, 0x1C	; 28
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     740:	47 e7       	ldi	r20, 0x77	; 119
     742:	66 e0       	ldi	r22, 0x06	; 6
     744:	8c e1       	ldi	r24, 0x1C	; 28
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	fe d7       	rcall	.+4092   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     74a:	4f e0       	ldi	r20, 0x0F	; 15
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	8c e1       	ldi	r24, 0x1C	; 28
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	f9 c7       	rjmp	.+4082   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     754:	08 95       	ret

00000756 <_Z15displayHighTempv>:
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	69 e0       	ldi	r22, 0x09	; 9
     75a:	8c e1       	ldi	r24, 0x1C	; 28
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	f3 d7       	rcall	.+4070   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     760:	47 e3       	ldi	r20, 0x37	; 55
     762:	63 e0       	ldi	r22, 0x03	; 3
     764:	8c e1       	ldi	r24, 0x1C	; 28
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	ee d7       	rcall	.+4060   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     76a:	46 e0       	ldi	r20, 0x06	; 6
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	8c e1       	ldi	r24, 0x1C	; 28
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	e9 d7       	rcall	.+4050   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     774:	4f e5       	ldi	r20, 0x5F	; 95
     776:	65 e0       	ldi	r22, 0x05	; 5
     778:	8c e1       	ldi	r24, 0x1C	; 28
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	e4 d7       	rcall	.+4040   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     77e:	47 e3       	ldi	r20, 0x37	; 55
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	8c e1       	ldi	r24, 0x1C	; 28
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	df d7       	rcall	.+4030   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     788:	4f e0       	ldi	r20, 0x0F	; 15
     78a:	64 e0       	ldi	r22, 0x04	; 4
     78c:	8c e1       	ldi	r24, 0x1C	; 28
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	da d7       	rcall	.+4020   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     792:	47 e6       	ldi	r20, 0x67	; 103
     794:	68 e0       	ldi	r22, 0x08	; 8
     796:	8c e1       	ldi	r24, 0x1C	; 28
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	d5 d7       	rcall	.+4010   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	8c e1       	ldi	r24, 0x1C	; 28
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	d0 d7       	rcall	.+4000   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	62 e0       	ldi	r22, 0x02	; 2
     7aa:	8c e1       	ldi	r24, 0x1C	; 28
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	cb c7       	rjmp	.+3990   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7b0:	08 95       	ret

000007b2 <_Z14displayLowTempv>:
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	69 e0       	ldi	r22, 0x09	; 9
     7b6:	8c e1       	ldi	r24, 0x1C	; 28
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	c5 d7       	rcall	.+3978   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	63 e0       	ldi	r22, 0x03	; 3
     7c0:	8c e1       	ldi	r24, 0x1C	; 28
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	c0 d7       	rcall	.+3968   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	67 e0       	ldi	r22, 0x07	; 7
     7ca:	8c e1       	ldi	r24, 0x1C	; 28
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	bb d7       	rcall	.+3958   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7d0:	4e e0       	ldi	r20, 0x0E	; 14
     7d2:	65 e0       	ldi	r22, 0x05	; 5
     7d4:	8c e1       	ldi	r24, 0x1C	; 28
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	b6 d7       	rcall	.+3948   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7da:	4e ef       	ldi	r20, 0xFE	; 254
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8c e1       	ldi	r24, 0x1C	; 28
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	b1 d7       	rcall	.+3938   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7e4:	4f e0       	ldi	r20, 0x0F	; 15
     7e6:	64 e0       	ldi	r22, 0x04	; 4
     7e8:	8c e1       	ldi	r24, 0x1C	; 28
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	ac d7       	rcall	.+3928   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7ee:	47 e6       	ldi	r20, 0x67	; 103
     7f0:	68 e0       	ldi	r22, 0x08	; 8
     7f2:	8c e1       	ldi	r24, 0x1C	; 28
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	a7 d7       	rcall	.+3918   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	66 e0       	ldi	r22, 0x06	; 6
     7fc:	8c e1       	ldi	r24, 0x1C	; 28
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	a2 d7       	rcall	.+3908   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	8c e1       	ldi	r24, 0x1C	; 28
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	9d c7       	rjmp	.+3898   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     80c:	08 95       	ret

0000080e <_Z14displayHighAirv>:
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	69 e0       	ldi	r22, 0x09	; 9
     812:	8c e1       	ldi	r24, 0x1C	; 28
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	97 d7       	rcall	.+3886   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     818:	47 e3       	ldi	r20, 0x37	; 55
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	8c e1       	ldi	r24, 0x1C	; 28
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	92 d7       	rcall	.+3876   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     822:	46 e0       	ldi	r20, 0x06	; 6
     824:	67 e0       	ldi	r22, 0x07	; 7
     826:	8c e1       	ldi	r24, 0x1C	; 28
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	8d d7       	rcall	.+3866   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     82c:	4f e5       	ldi	r20, 0x5F	; 95
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	8c e1       	ldi	r24, 0x1C	; 28
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	88 d7       	rcall	.+3856   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     836:	47 e3       	ldi	r20, 0x37	; 55
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	8c e1       	ldi	r24, 0x1C	; 28
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	83 d7       	rcall	.+3846   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     840:	47 e7       	ldi	r20, 0x77	; 119
     842:	64 e0       	ldi	r22, 0x04	; 4
     844:	8c e1       	ldi	r24, 0x1C	; 28
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	7e d7       	rcall	.+3836   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     84a:	46 e0       	ldi	r20, 0x06	; 6
     84c:	68 e0       	ldi	r22, 0x08	; 8
     84e:	8c e1       	ldi	r24, 0x1C	; 28
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	79 d7       	rcall	.+3826   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     854:	45 e0       	ldi	r20, 0x05	; 5
     856:	66 e0       	ldi	r22, 0x06	; 6
     858:	8c e1       	ldi	r24, 0x1C	; 28
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	74 d7       	rcall	.+3816   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	8c e1       	ldi	r24, 0x1C	; 28
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	6f c7       	rjmp	.+3806   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     868:	08 95       	ret

0000086a <_Z23displayOnTempOutOfRangefff>:
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <high_temperature>
     876:	ee 23       	and	r30, r30
     878:	41 f0       	breq	.+16     	; 0x88a <_Z23displayOnTempOutOfRangefff+0x20>
     87a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <displayOnTempOutOfRangeFlag>
     87e:	ee 23       	and	r30, r30
     880:	11 f0       	breq	.+4      	; 0x886 <_Z23displayOnTempOutOfRangefff+0x1c>
     882:	69 df       	rcall	.-302    	; 0x756 <_Z15displayHighTempv>
     884:	19 c0       	rjmp	.+50     	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     886:	23 dd       	rcall	.-1466   	; 0x2ce <_Z13sendToDisplayfff>
     888:	17 c0       	rjmp	.+46     	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     88a:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <low_temperature>
     88e:	ee 23       	and	r30, r30
     890:	41 f0       	breq	.+16     	; 0x8a2 <_Z23displayOnTempOutOfRangefff+0x38>
     892:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <displayOnTempOutOfRangeFlag>
     896:	ee 23       	and	r30, r30
     898:	11 f0       	breq	.+4      	; 0x89e <_Z23displayOnTempOutOfRangefff+0x34>
     89a:	8b df       	rcall	.-234    	; 0x7b2 <_Z14displayLowTempv>
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     89e:	17 dd       	rcall	.-1490   	; 0x2ce <_Z13sendToDisplayfff>
     8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     8a2:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <air_high_temperature>
     8a6:	ee 23       	and	r30, r30
     8a8:	39 f0       	breq	.+14     	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     8aa:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <displayOnTempOutOfRangeFlag>
     8ae:	ee 23       	and	r30, r30
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <_Z23displayOnTempOutOfRangefff+0x4c>
     8b2:	ad df       	rcall	.-166    	; 0x80e <_Z14displayHighAirv>
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <_Z23displayOnTempOutOfRangefff+0x4e>
     8b6:	0b dd       	rcall	.-1514   	; 0x2ce <_Z13sendToDisplayfff>
     8b8:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <displayOnTempOutOfRangeFlag>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	89 27       	eor	r24, r25
     8c0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <displayOnTempOutOfRangeFlag>
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	08 95       	ret

000008ce <_Z14displayPwrFailv>:
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	69 e0       	ldi	r22, 0x09	; 9
     8d2:	8c e1       	ldi	r24, 0x1C	; 28
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	37 d7       	rcall	.+3694   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	63 e0       	ldi	r22, 0x03	; 3
     8dc:	8c e1       	ldi	r24, 0x1C	; 28
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	32 d7       	rcall	.+3684   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	67 e0       	ldi	r22, 0x07	; 7
     8e6:	8c e1       	ldi	r24, 0x1C	; 28
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	2d d7       	rcall	.+3674   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     8ec:	47 e6       	ldi	r20, 0x67	; 103
     8ee:	65 e0       	ldi	r22, 0x05	; 5
     8f0:	8c e1       	ldi	r24, 0x1C	; 28
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	28 d7       	rcall	.+3664   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     8f6:	45 e0       	ldi	r20, 0x05	; 5
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	8c e1       	ldi	r24, 0x1C	; 28
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	23 d7       	rcall	.+3654   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     900:	47 e4       	ldi	r20, 0x47	; 71
     902:	64 e0       	ldi	r22, 0x04	; 4
     904:	8c e1       	ldi	r24, 0x1C	; 28
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	1e d7       	rcall	.+3644   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     90a:	47 e7       	ldi	r20, 0x77	; 119
     90c:	68 e0       	ldi	r22, 0x08	; 8
     90e:	8c e1       	ldi	r24, 0x1C	; 28
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	19 d7       	rcall	.+3634   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     914:	46 e0       	ldi	r20, 0x06	; 6
     916:	66 e0       	ldi	r22, 0x06	; 6
     918:	8c e1       	ldi	r24, 0x1C	; 28
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	14 d7       	rcall	.+3624   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     91e:	4e e0       	ldi	r20, 0x0E	; 14
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	8c e1       	ldi	r24, 0x1C	; 28
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	0f c7       	rjmp	.+3614   	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
     928:	08 95       	ret

0000092a <_Z8titititiv>:
}

void titititi(){
	controls.startBuzzer();
     92a:	8c e3       	ldi	r24, 0x3C	; 60
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	66 d4       	rcall	.+2252   	; 0x11fc <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	81 ee       	ldi	r24, 0xE1	; 225
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	21 50       	subi	r18, 0x01	; 1
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <_Z8titititiv+0xc>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <_Z8titititiv+0x16>
     940:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     942:	8c e3       	ldi	r24, 0x3C	; 60
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	60 d4       	rcall	.+2240   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	81 ee       	ldi	r24, 0xE1	; 225
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <_Z8titititiv+0x24>
     956:	00 c0       	rjmp	.+0      	; 0x958 <_Z8titititiv+0x2e>
     958:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     95a:	8c e3       	ldi	r24, 0x3C	; 60
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	4e d4       	rcall	.+2204   	; 0x11fc <_ZN8Controls11startBuzzerEv>
     960:	2f ef       	ldi	r18, 0xFF	; 255
     962:	81 ee       	ldi	r24, 0xE1	; 225
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	21 50       	subi	r18, 0x01	; 1
     968:	80 40       	sbci	r24, 0x00	; 0
     96a:	90 40       	sbci	r25, 0x00	; 0
     96c:	e1 f7       	brne	.-8      	; 0x966 <_Z8titititiv+0x3c>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <_Z8titititiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     970:	00 00       	nop
     972:	8c e3       	ldi	r24, 0x3C	; 60
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	48 d4       	rcall	.+2192   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	85 ea       	ldi	r24, 0xA5	; 165
     97c:	9e e0       	ldi	r25, 0x0E	; 14
     97e:	21 50       	subi	r18, 0x01	; 1
     980:	80 40       	sbci	r24, 0x00	; 0
     982:	90 40       	sbci	r25, 0x00	; 0
     984:	e1 f7       	brne	.-8      	; 0x97e <_Z8titititiv+0x54>
     986:	00 c0       	rjmp	.+0      	; 0x988 <_Z8titititiv+0x5e>
	_delay_ms(300);
	controls.startBuzzer();
     988:	00 00       	nop
     98a:	8c e3       	ldi	r24, 0x3C	; 60
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	36 d4       	rcall	.+2156   	; 0x11fc <_ZN8Controls11startBuzzerEv>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	81 ee       	ldi	r24, 0xE1	; 225
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	21 50       	subi	r18, 0x01	; 1
     998:	80 40       	sbci	r24, 0x00	; 0
     99a:	90 40       	sbci	r25, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <_Z8titititiv+0x6c>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <_Z8titititiv+0x76>
	_delay_ms(100);
	controls.stopBuzzer();
     9a0:	00 00       	nop
     9a2:	8c e3       	ldi	r24, 0x3C	; 60
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	30 d4       	rcall	.+2144   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	81 ee       	ldi	r24, 0xE1	; 225
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <_Z8titititiv+0x84>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <_Z8titititiv+0x8e>
	_delay_ms(100);
	controls.startBuzzer();
     9b8:	00 00       	nop
     9ba:	8c e3       	ldi	r24, 0x3C	; 60
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	1e d4       	rcall	.+2108   	; 0x11fc <_ZN8Controls11startBuzzerEv>
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	81 ee       	ldi	r24, 0xE1	; 225
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	21 50       	subi	r18, 0x01	; 1
     9c8:	80 40       	sbci	r24, 0x00	; 0
     9ca:	90 40       	sbci	r25, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <_Z8titititiv+0x9c>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <_Z8titititiv+0xa6>
	_delay_ms(100);
	controls.stopBuzzer();
     9d0:	00 00       	nop
     9d2:	8c e3       	ldi	r24, 0x3C	; 60
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	18 c4       	rjmp	.+2096   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     9d8:	08 95       	ret

000009da <_Z4titiv>:
}

void titi(){
	controls.startBuzzer();
     9da:	8c e3       	ldi	r24, 0x3C	; 60
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e d4       	rcall	.+2076   	; 0x11fc <_ZN8Controls11startBuzzerEv>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	81 ee       	ldi	r24, 0xE1	; 225
     9e4:	94 e0       	ldi	r25, 0x04	; 4
     9e6:	21 50       	subi	r18, 0x01	; 1
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	90 40       	sbci	r25, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <_Z4titiv+0xc>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <_Z4titiv+0x16>
     9f0:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     9f2:	8c e3       	ldi	r24, 0x3C	; 60
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	08 d4       	rcall	.+2064   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	81 ee       	ldi	r24, 0xE1	; 225
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <_Z4titiv+0x24>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <_Z4titiv+0x2e>
     a08:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     a0a:	8c e3       	ldi	r24, 0x3C	; 60
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	f6 d3       	rcall	.+2028   	; 0x11fc <_ZN8Controls11startBuzzerEv>
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	81 ee       	ldi	r24, 0xE1	; 225
     a14:	94 e0       	ldi	r25, 0x04	; 4
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <_Z4titiv+0x3c>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <_Z4titiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     a20:	00 00       	nop
     a22:	8c e3       	ldi	r24, 0x3C	; 60
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	f0 d3       	rcall	.+2016   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	81 ee       	ldi	r24, 0xE1	; 225
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <_Z4titiv+0x54>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <_Z4titiv+0x5e>
     a38:	00 00       	nop
     a3a:	08 95       	ret

00000a3c <_Z5checkv>:
		displayUpdate = true;
		display_count = 0;
	}
}

void check() {
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	cf 93       	push	r28
	
	
	if((skin_temperature > 37.2) |(skin_temperature < 36.50) | (air_temperature>39.00) ) {
     a4e:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     a52:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     a56:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     a5a:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     a5e:	c0 90 2c 02 	lds	r12, 0x022C	; 0x80022c <skin_temperature>
     a62:	d0 90 2d 02 	lds	r13, 0x022D	; 0x80022d <skin_temperature+0x1>
     a66:	e0 90 2e 02 	lds	r14, 0x022E	; 0x80022e <skin_temperature+0x2>
     a6a:	f0 90 2f 02 	lds	r15, 0x022F	; 0x80022f <skin_temperature+0x3>
     a6e:	80 90 28 02 	lds	r8, 0x0228	; 0x800228 <air_temperature>
     a72:	90 90 29 02 	lds	r9, 0x0229	; 0x800229 <air_temperature+0x1>
     a76:	a0 90 2a 02 	lds	r10, 0x022A	; 0x80022a <air_temperature+0x2>
     a7a:	b0 90 2b 02 	lds	r11, 0x022B	; 0x80022b <air_temperature+0x3>
     a7e:	c1 e0       	ldi	r28, 0x01	; 1
     a80:	2d ec       	ldi	r18, 0xCD	; 205
     a82:	3c ec       	ldi	r19, 0xCC	; 204
     a84:	44 e1       	ldi	r20, 0x14	; 20
     a86:	52 e4       	ldi	r21, 0x42	; 66
     a88:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <_Z5checkv+0x56>
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	42 e1       	ldi	r20, 0x12	; 18
     a98:	52 e4       	ldi	r21, 0x42	; 66
     a9a:	c7 01       	movw	r24, r14
     a9c:	b6 01       	movw	r22, r12
     a9e:	85 d7       	rcall	.+3850   	; 0x19aa <__cmpsf2>
     aa0:	88 1f       	adc	r24, r24
     aa2:	88 27       	eor	r24, r24
     aa4:	88 1f       	adc	r24, r24
     aa6:	8c 2b       	or	r24, r28
     aa8:	71 f4       	brne	.+28     	; 0xac6 <_Z5checkv+0x8a>
     aaa:	c1 e0       	ldi	r28, 0x01	; 1
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	4c e1       	ldi	r20, 0x1C	; 28
     ab2:	52 e4       	ldi	r21, 0x42	; 66
     ab4:	c5 01       	movw	r24, r10
     ab6:	b4 01       	movw	r22, r8
     ab8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     abc:	18 16       	cp	r1, r24
     abe:	0c f0       	brlt	.+2      	; 0xac2 <_Z5checkv+0x86>
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	cc 23       	and	r28, r28
     ac4:	c1 f0       	breq	.+48     	; 0xaf6 <_Z5checkv+0xba>
		checkTemperature();
     ac6:	e3 dc       	rcall	.-1594   	; 0x48e <_Z16checkTemperaturev>
		if(!startMonitor) {
     ac8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <startMonitor>
     acc:	81 11       	cpse	r24, r1
     ace:	26 c0       	rjmp	.+76     	; 0xb1c <_Z5checkv+0xe0>
			start_buzzer = true;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <start_buzzer>
		}
		
		if(stop_buzzer && !startMonitor) {
     ad6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <stop_buzzer>
     ada:	88 23       	and	r24, r24
     adc:	f9 f0       	breq	.+62     	; 0xb1c <_Z5checkv+0xe0>
			startMonitor = true;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <startMonitor>
			second = 0;
     ae4:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     ae8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
			stop_buzzer = false;
     aec:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <stop_buzzer>
			start_buzzer = false;
     af0:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <start_buzzer>
     af4:	12 c1       	rjmp	.+548    	; 0xd1a <_Z5checkv+0x2de>
		}
	}
	else {
		controls.stopBuzzer();
     af6:	8c e3       	ldi	r24, 0x3C	; 60
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	86 d3       	rcall	.+1804   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     afc:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <start_buzzer>
		Led.led_do(TS_HIGH_LED, 0);
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	85 e1       	ldi	r24, 0x15	; 21
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	96 d3       	rcall	.+1836   	; 0x123a <_ZN3led6led_doEii>
		startMonitor = false;
     b0e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <startMonitor>
		second = 0;
     b12:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     b16:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
     b1a:	ff c0       	rjmp	.+510    	; 0xd1a <_Z5checkv+0x2de>
	}
	
	//At first when the baby is just placed, alarm is continued every 5 minutes, but once baby set point temperature is reached, alarm is continued every 2 minutes
	if(baby_placed_and_setpoint_once_reached){
     b1c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <baby_placed_and_setpoint_once_reached>
     b20:	88 23       	and	r24, r24
     b22:	71 f0       	breq	.+28     	; 0xb40 <_Z5checkv+0x104>
		if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
     b24:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <second>
     b28:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <second+0x1>
     b2c:	88 35       	cpi	r24, 0x58	; 88
     b2e:	92 40       	sbci	r25, 0x02	; 2
     b30:	5c f1       	brlt	.+86     	; 0xb88 <_Z5checkv+0x14c>
			//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
			//controls.startBuzzer();
			startMonitor = false;
     b32:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <startMonitor>
			second = 0;
     b36:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     b3a:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
     b3e:	24 c0       	rjmp	.+72     	; 0xb88 <_Z5checkv+0x14c>
		}
	}
	else{
		if(second >= 1500) {	//timer prescaled to 200ms so 1500 means 5 minutes.
     b40:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <second>
     b44:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <second+0x1>
     b48:	8c 3d       	cpi	r24, 0xDC	; 220
     b4a:	95 40       	sbci	r25, 0x05	; 5
     b4c:	34 f0       	brlt	.+12     	; 0xb5a <_Z5checkv+0x11e>
			//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
			//controls.startBuzzer();
			startMonitor = false;
     b4e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <startMonitor>
			second = 0;
     b52:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     b56:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
		}
		if(skin_temperature >= set_temperature){
     b5a:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     b5e:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     b62:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     b66:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     b6a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <set_temperature>
     b6e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <set_temperature+0x1>
     b72:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <set_temperature+0x2>
     b76:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <set_temperature+0x3>
     b7a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     b7e:	88 23       	and	r24, r24
     b80:	1c f0       	brlt	.+6      	; 0xb88 <_Z5checkv+0x14c>
			baby_placed_and_setpoint_once_reached = true;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <baby_placed_and_setpoint_once_reached>
		}
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     b88:	65 99       	sbic	0x0c, 5	; 12
     b8a:	9b c0       	rjmp	.+310    	; 0xcc2 <_Z5checkv+0x286>
     b8c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <buzzer_stop_pressed>
     b90:	81 11       	cpse	r24, r1
     b92:	97 c0       	rjmp	.+302    	; 0xcc2 <_Z5checkv+0x286>
     b94:	99 c0       	rjmp	.+306    	; 0xcc8 <_Z5checkv+0x28c>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     b96:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <buzzer_stop_pressed>
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     b9a:	1c 99       	sbic	0x03, 4	; 3
     b9c:	9e c0       	rjmp	.+316    	; 0xcda <_Z5checkv+0x29e>
     b9e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <set_up_pressed>
     ba2:	81 11       	cpse	r24, r1
     ba4:	9a c0       	rjmp	.+308    	; 0xcda <_Z5checkv+0x29e>
     ba6:	9c c0       	rjmp	.+312    	; 0xce0 <_Z5checkv+0x2a4>
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     ba8:	2d ec       	ldi	r18, 0xCD	; 205
     baa:	3c ec       	ldi	r19, 0xCC	; 204
     bac:	4c ec       	ldi	r20, 0xCC	; 204
     bae:	5d e3       	ldi	r21, 0x3D	; 61
     bb0:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
     bb4:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
     bb8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     bbc:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     bc0:	90 d6       	rcall	.+3360   	; 0x18e2 <__addsf3>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
			if(set_temperature_copy >= 37.2){
     bc6:	2d ec       	ldi	r18, 0xCD	; 205
     bc8:	3c ec       	ldi	r19, 0xCC	; 204
     bca:	44 e1       	ldi	r20, 0x14	; 20
     bcc:	52 e4       	ldi	r21, 0x42	; 66
     bce:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__gesf2>
     bd2:	88 23       	and	r24, r24
     bd4:	4c f4       	brge	.+18     	; 0xbe8 <_Z5checkv+0x1ac>
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     bd6:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <set_temperature_copy>
     bda:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <set_temperature_copy+0x1>
     bde:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <set_temperature_copy+0x2>
     be2:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <set_temperature_copy+0x3>
     be6:	0c c0       	rjmp	.+24     	; 0xc00 <_Z5checkv+0x1c4>
			if(set_temperature_copy >= 37.2){
				set_temperature_copy = 37.2;
     be8:	8d ec       	ldi	r24, 0xCD	; 205
     bea:	9c ec       	ldi	r25, 0xCC	; 204
     bec:	a4 e1       	ldi	r26, 0x14	; 20
     bee:	b2 e4       	ldi	r27, 0x42	; 66
     bf0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
     bf4:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
     bf8:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
     bfc:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>
			}
		}
		set_up_pressed = true;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <set_up_pressed>
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <_Z5checkv+0x1d0>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     c08:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <set_up_pressed>
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     c0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c10:	85 fd       	sbrc	r24, 5
     c12:	70 c0       	rjmp	.+224    	; 0xcf4 <_Z5checkv+0x2b8>
     c14:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <set_down_pressed>
     c18:	81 11       	cpse	r24, r1
     c1a:	6c c0       	rjmp	.+216    	; 0xcf4 <_Z5checkv+0x2b8>
     c1c:	66 c0       	rjmp	.+204    	; 0xcea <_Z5checkv+0x2ae>
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     c1e:	2d ec       	ldi	r18, 0xCD	; 205
     c20:	3c ec       	ldi	r19, 0xCC	; 204
     c22:	4c ec       	ldi	r20, 0xCC	; 204
     c24:	5d e3       	ldi	r21, 0x3D	; 61
     c26:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
     c2a:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
     c2e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     c32:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     c36:	54 d6       	rcall	.+3240   	; 0x18e0 <__subsf3>
     c38:	6b 01       	movw	r12, r22
     c3a:	7c 01       	movw	r14, r24
			//limit set temperature below range
			if(set_temperature_copy <= 36.5){
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	42 e1       	ldi	r20, 0x12	; 18
     c42:	52 e4       	ldi	r21, 0x42	; 66
     c44:	b2 d6       	rcall	.+3428   	; 0x19aa <__cmpsf2>
     c46:	18 16       	cp	r1, r24
     c48:	4c f4       	brge	.+18     	; 0xc5c <_Z5checkv+0x220>
     c4a:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <set_temperature_copy>
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     c4e:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <set_temperature_copy+0x1>
     c52:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <set_temperature_copy+0x2>
     c56:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <set_temperature_copy+0x3>
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <_Z5checkv+0x238>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
			//limit set temperature below range
			if(set_temperature_copy <= 36.5){
				set_temperature_copy = 36.5;
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a2 e1       	ldi	r26, 0x12	; 18
     c62:	b2 e4       	ldi	r27, 0x42	; 66
     c64:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
     c68:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
     c6c:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
     c70:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>
     c74:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
		set_down_pressed= true;
     c76:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <set_down_pressed>
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <_Z5checkv+0x244>
     c7c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <set_down_pressed>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     c80:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     c84:	86 fd       	sbrc	r24, 6
     c86:	3b c0       	rjmp	.+118    	; 0xcfe <_Z5checkv+0x2c2>
     c88:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <set_pressed>
     c8c:	81 11       	cpse	r24, r1
     c8e:	37 c0       	rjmp	.+110    	; 0xcfe <_Z5checkv+0x2c2>
     c90:	3b c0       	rjmp	.+118    	; 0xd08 <_Z5checkv+0x2cc>
     c92:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <set_temperature_copy>
		button_change = !button_change;
		if(!button_change) {
			set_temperature = set_temperature_copy;
     c96:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <set_temperature_copy+0x1>
     c9a:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     c9e:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     ca2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <set_temperature>
     ca6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <set_temperature+0x1>
     caa:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <set_temperature+0x2>
     cae:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <set_temperature+0x3>
			titi();
     cb2:	93 de       	rcall	.-730    	; 0x9da <_Z4titiv>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		set_pressed = true;
     cb6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <set_pressed>
     cba:	35 c0       	rjmp	.+106    	; 0xd26 <_Z5checkv+0x2ea>
     cbc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <set_pressed>
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
	}
	
}
     cc0:	32 c0       	rjmp	.+100    	; 0xd26 <_Z5checkv+0x2ea>
		controls.stopBuzzer();
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     cc2:	65 99       	sbic	0x0c, 5	; 12
     cc4:	68 cf       	rjmp	.-304    	; 0xb96 <_Z5checkv+0x15a>
     cc6:	69 cf       	rjmp	.-302    	; 0xb9a <_Z5checkv+0x15e>
		}
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		controls.stopBuzzer();
     cc8:	8c e3       	ldi	r24, 0x3C	; 60
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	9d d2       	rcall	.+1338   	; 0x1208 <_ZN8Controls10stopBuzzerEv>
     cce:	81 e0       	ldi	r24, 0x01	; 1
		stop_buzzer = true;
     cd0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <stop_buzzer>
     cd4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <buzzer_stop_pressed>
		buzzer_stop_pressed = true;
     cd8:	60 cf       	rjmp	.-320    	; 0xb9a <_Z5checkv+0x15e>
     cda:	1c 99       	sbic	0x03, 4	; 3
			}
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     cdc:	95 cf       	rjmp	.-214    	; 0xc08 <_Z5checkv+0x1cc>
     cde:	96 cf       	rjmp	.-212    	; 0xc0c <_Z5checkv+0x1d0>
     ce0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     ce4:	81 11       	cpse	r24, r1
     ce6:	60 cf       	rjmp	.-320    	; 0xba8 <_Z5checkv+0x16c>
     ce8:	8b cf       	rjmp	.-234    	; 0xc00 <_Z5checkv+0x1c4>
     cea:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     cee:	81 11       	cpse	r24, r1
     cf0:	96 cf       	rjmp	.-212    	; 0xc1e <_Z5checkv+0x1e2>
     cf2:	c0 cf       	rjmp	.-128    	; 0xc74 <_Z5checkv+0x238>
     cf4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     cf8:	85 fd       	sbrc	r24, 5
     cfa:	c0 cf       	rjmp	.-128    	; 0xc7c <_Z5checkv+0x240>
     cfc:	c1 cf       	rjmp	.-126    	; 0xc80 <_Z5checkv+0x244>
     cfe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
		}
		
		set_pressed = true;
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     d02:	86 fd       	sbrc	r24, 6
     d04:	db cf       	rjmp	.-74     	; 0xcbc <_Z5checkv+0x280>
     d06:	0f c0       	rjmp	.+30     	; 0xd26 <_Z5checkv+0x2ea>
     d08:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <button_change>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
		button_change = !button_change;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	89 27       	eor	r24, r25
     d10:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <button_change>
     d14:	81 11       	cpse	r24, r1
		if(!button_change) {
     d16:	ce cf       	rjmp	.-100    	; 0xcb4 <_Z5checkv+0x278>
     d18:	bc cf       	rjmp	.-136    	; 0xc92 <_Z5checkv+0x256>
     d1a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <baby_placed_and_setpoint_once_reached>
		startMonitor = false;
		second = 0;
	}
	
	//At first when the baby is just placed, alarm is continued every 5 minutes, but once baby set point temperature is reached, alarm is continued every 2 minutes
	if(baby_placed_and_setpoint_once_reached){
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <_Z5checkv+0x2e8>
     d22:	0e cf       	rjmp	.-484    	; 0xb40 <_Z5checkv+0x104>
     d24:	31 cf       	rjmp	.-414    	; 0xb88 <_Z5checkv+0x14c>
     d26:	cf 91       	pop	r28
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
	}
	
}
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	9f 90       	pop	r9
     d36:	8f 90       	pop	r8
     d38:	08 95       	ret

00000d3a <main>:
     d3a:	b6 d5       	rcall	.+2924   	; 0x18a8 <_Z9initUART0v>
uint32_t countpreheat = 0;

int main(void)
{	
	initUART0();
	init_devices();
     d3c:	05 da       	rcall	.-3062   	; 0x148 <_Z12init_devicesv>
     d3e:	78 99       	sbic	0x0f, 0	; 15
	bool clear_display = false;
	bool set_temp_display = false;
	
	//**********************************************************************************//
	//Check if the power is coming from battery or AC supply
	while(bit_is_clear(BATT_MONITOR_PIN,BATT_MONITOR_PIN_POSITION)){
     d40:	0d c0       	rjmp	.+26     	; 0xd5c <main+0x22>
		//then power is coming from battery.
		titi();_delay_ms(500);
     d42:	4b de       	rcall	.-874    	; 0x9da <_Z4titiv>
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	89 e6       	ldi	r24, 0x69	; 105
     d48:	98 e1       	ldi	r25, 0x18	; 24
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x10>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x1a>
     d54:	00 00       	nop
		displayPwrFail();
     d56:	bb dd       	rcall	.-1162   	; 0x8ce <_Z14displayPwrFailv>
	bool clear_display = false;
	bool set_temp_display = false;
	
	//**********************************************************************************//
	//Check if the power is coming from battery or AC supply
	while(bit_is_clear(BATT_MONITOR_PIN,BATT_MONITOR_PIN_POSITION)){
     d58:	78 9b       	sbis	0x0f, 0	; 15
		//then power is coming from battery.
		titi();_delay_ms(500);
		displayPwrFail();
	}
	
	titi();
     d5a:	f3 cf       	rjmp	.-26     	; 0xd42 <main+0x8>
     d5c:	3e de       	rcall	.-900    	; 0x9da <_Z4titiv>
	//*********************************************************************************//
	
	//check Sensor and display sensor fail if failure of sensor
 	max1.MAX7219_clearDisplay();
     d5e:	8c e1       	ldi	r24, 0x1C	; 28
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	43 d5       	rcall	.+2694   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
 	max2.MAX7219_clearDisplay();
     d64:	86 e1       	ldi	r24, 0x16	; 22
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	40 d5       	rcall	.+2688   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
 	maxSkin.begin(SKIN_SENSOR);
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	80 e3       	ldi	r24, 0x30	; 48
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	bc d3       	rcall	.+1912   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
 	maxAir.begin(AIR_SENSOR);
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	85 e3       	ldi	r24, 0x35	; 53
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	b8 d3       	rcall	.+1904   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
     d7a:	00 e0       	ldi	r16, 0x00	; 0
 	skin_temperature = maxSkin.temperature(100.0,430.0);
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	27 ed       	ldi	r18, 0xD7	; 215
     d80:	33 e4       	ldi	r19, 0x43	; 67
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	68 ec       	ldi	r22, 0xC8	; 200
     d88:	72 e4       	ldi	r23, 0x42	; 66
     d8a:	80 e3       	ldi	r24, 0x30	; 48
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	ee d3       	rcall	.+2012   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
     d90:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
     d94:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
     d98:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
     d9c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
     da0:	00 e0       	ldi	r16, 0x00	; 0
 	air_temperature = maxAir.temperature(100.0,430.0);
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	27 ed       	ldi	r18, 0xD7	; 215
     da6:	33 e4       	ldi	r19, 0x43	; 67
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	68 ec       	ldi	r22, 0xC8	; 200
     dae:	72 e4       	ldi	r23, 0x42	; 66
     db0:	85 e3       	ldi	r24, 0x35	; 53
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	db d3       	rcall	.+1974   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
     db6:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
     dba:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
     dbe:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
     dc2:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
     dc6:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
	 
	//check the sensor conditions, loop the program if it doesn't detect the air sensor and skin sensor//
 	while(skin_temperature <= 0.0 || skin_temperature >= 50 ){
     dca:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     dce:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     dd2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	a9 01       	movw	r20, r18
     ddc:	e6 d5       	rcall	.+3020   	; 0x19aa <__cmpsf2>
     dde:	18 16       	cp	r1, r24
     de0:	7c f4       	brge	.+30     	; 0xe00 <main+0xc6>
     de2:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     de6:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     dea:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     dee:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	48 e4       	ldi	r20, 0x48	; 72
     df8:	52 e4       	ldi	r21, 0x42	; 66
     dfa:	26 d7       	rcall	.+3660   	; 0x1c48 <__gesf2>
     dfc:	88 23       	and	r24, r24
     dfe:	4c f1       	brlt	.+82     	; 0xe52 <main+0x118>
 		if(displayUpdate){
     e00:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <displayUpdate>
			displayUpdate = false;
     e04:	88 23       	and	r24, r24
			max1.MAX7219_init(REINITIALIZE);
     e06:	19 f1       	breq	.+70     	; 0xe4e <main+0x114>
     e08:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <displayUpdate>
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	8c e1       	ldi	r24, 0x1C	; 28
			max2.MAX7219_init(REINITIALIZE);
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	cc d4       	rcall	.+2456   	; 0x17ac <_ZN7max721912MAX7219_initEc>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	86 e1       	ldi	r24, 0x16	; 22
     e18:	92 e0       	ldi	r25, 0x02	; 2
			displaySensFail();
     e1a:	c8 d4       	rcall	.+2448   	; 0x17ac <_ZN7max721912MAX7219_initEc>
			maxSkin.begin(SKIN_SENSOR);
     e1c:	f9 db       	rcall	.-2062   	; 0x610 <_Z15displaySensFailv>
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	62 d3       	rcall	.+1732   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
			skin_temperature = maxSkin.temperature(100.0,430.0);
     e26:	00 e0       	ldi	r16, 0x00	; 0
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	27 ed       	ldi	r18, 0xD7	; 215
     e2c:	33 e4       	ldi	r19, 0x43	; 67
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	68 ec       	ldi	r22, 0xC8	; 200
     e34:	72 e4       	ldi	r23, 0x42	; 66
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	98 d3       	rcall	.+1840   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
     e3c:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
     e40:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
     e44:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
     e48:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
     e4c:	bc cf       	rjmp	.-136    	; 0xdc6 <main+0x8c>
		}
		else{
			asm volatile ("nop");
     e4e:	00 00       	nop
     e50:	ba cf       	rjmp	.-140    	; 0xdc6 <main+0x8c>
		}
 	}

 	while(air_temperature <= 0.0 || air_temperature >= 50){
     e52:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     e56:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     e5a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     e5e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	a9 01       	movw	r20, r18
     e68:	a0 d5       	rcall	.+2880   	; 0x19aa <__cmpsf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	7c f4       	brge	.+30     	; 0xe8c <main+0x152>
     e6e:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     e72:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     e76:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     e7a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	48 e4       	ldi	r20, 0x48	; 72
     e84:	52 e4       	ldi	r21, 0x42	; 66
     e86:	e0 d6       	rcall	.+3520   	; 0x1c48 <__gesf2>
 		if(displayUpdate){
     e88:	88 23       	and	r24, r24
     e8a:	4c f1       	brlt	.+82     	; 0xede <main+0x1a4>
     e8c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <displayUpdate>
			displayUpdate = false;
     e90:	88 23       	and	r24, r24
     e92:	19 f1       	breq	.+70     	; 0xeda <main+0x1a0>
 			max1.MAX7219_init(REINITIALIZE);
     e94:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <displayUpdate>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	8c e1       	ldi	r24, 0x1C	; 28
 			max2.MAX7219_init(REINITIALIZE);
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	86 d4       	rcall	.+2316   	; 0x17ac <_ZN7max721912MAX7219_initEc>
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	86 e1       	ldi	r24, 0x16	; 22
     ea4:	92 e0       	ldi	r25, 0x02	; 2
 			displaySensFail();
     ea6:	82 d4       	rcall	.+2308   	; 0x17ac <_ZN7max721912MAX7219_initEc>
     ea8:	b3 db       	rcall	.-2202   	; 0x610 <_Z15displaySensFailv>
 			maxAir.begin(AIR_SENSOR);
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	85 e3       	ldi	r24, 0x35	; 53
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	1c d3       	rcall	.+1592   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
     eb2:	00 e0       	ldi	r16, 0x00	; 0
 			air_temperature = maxAir.temperature(100.0,430.0);
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	27 ed       	ldi	r18, 0xD7	; 215
     eb8:	33 e4       	ldi	r19, 0x43	; 67
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	68 ec       	ldi	r22, 0xC8	; 200
     ec0:	72 e4       	ldi	r23, 0x42	; 66
     ec2:	85 e3       	ldi	r24, 0x35	; 53
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	52 d3       	rcall	.+1700   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
     ec8:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
     ecc:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
     ed0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
     ed4:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
     ed8:	bc cf       	rjmp	.-136    	; 0xe52 <main+0x118>
     eda:	00 00       	nop
 		}
 		else{
 			asm volatile ("nop");
     edc:	ba cf       	rjmp	.-140    	; 0xe52 <main+0x118>
     ede:	f1 2c       	mov	r15, r1
     ee0:	c1 e0       	ldi	r28, 0x01	; 1
	//*************************************************************//
	/// After this start preheat condition of baby warmer //////
 	while(!preHeat){
 		
 		if(displayUpdate){
 			clear_display = !clear_display;
     ee2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
	
	
	
	//*************************************************************//
	/// After this start preheat condition of baby warmer //////
 	while(!preHeat){
     ee6:	81 11       	cpse	r24, r1
     ee8:	67 c0       	rjmp	.+206    	; 0xfb8 <main+0x27e>
 		
 		if(displayUpdate){
     eea:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <displayUpdate>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <main+0x1ba>
     ef2:	60 c0       	rjmp	.+192    	; 0xfb4 <main+0x27a>
 			clear_display = !clear_display;
     ef4:	fc 26       	eor	r15, r28
 			
 			displayUpdate = false;
     ef6:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <displayUpdate>
 			maxSkin.begin(SKIN_SENSOR);
     efa:	6c 2f       	mov	r22, r28
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	f4 d2       	rcall	.+1512   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0,430.0);
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	27 ed       	ldi	r18, 0xD7	; 215
     f08:	33 e4       	ldi	r19, 0x43	; 67
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	68 ec       	ldi	r22, 0xC8	; 200
     f10:	72 e4       	ldi	r23, 0x42	; 66
     f12:	80 e3       	ldi	r24, 0x30	; 48
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	2a d3       	rcall	.+1620   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
     f18:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
     f1c:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
     f20:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
 			max1.MAX7219_init(REINITIALIZE);
     f24:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
     f28:	6c 2f       	mov	r22, r28
     f2a:	8c e1       	ldi	r24, 0x1C	; 28
 			max2.MAX7219_init(REINITIALIZE);
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	3e d4       	rcall	.+2172   	; 0x17ac <_ZN7max721912MAX7219_initEc>
     f30:	6c 2f       	mov	r22, r28
     f32:	86 e1       	ldi	r24, 0x16	; 22
     f34:	92 e0       	ldi	r25, 0x02	; 2
 			displayPreHeat();
     f36:	3a d4       	rcall	.+2164   	; 0x17ac <_ZN7max721912MAX7219_initEc>
     f38:	d9 db       	rcall	.-2126   	; 0x6ec <_Z14displayPreHeatv>
 			if(clear_display) {
     f3a:	ff 20       	and	r15, r15
     f3c:	21 f0       	breq	.+8      	; 0xf46 <main+0x20c>
 				max2.MAX7219_clearDisplay();
     f3e:	86 e1       	ldi	r24, 0x16	; 22
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	53 d4       	rcall	.+2214   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <main+0x21e>
 				//max1.MAX7219_clearDisplay();
 				} else {
 				sendToDisplayBelow(skin_temperature);
     f46:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     f4a:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     f4e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     f52:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
 			}
 			if(skin_temperature >= pre_heat_max_temp) {
     f56:	0c db       	rcall	.-2536   	; 0x570 <_Z18sendToDisplayBelowf>
     f58:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     f5c:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     f60:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     f64:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     f68:	80 90 02 02 	lds	r8, 0x0202	; 0x800202 <pre_heat_max_temp>
     f6c:	90 90 03 02 	lds	r9, 0x0203	; 0x800203 <pre_heat_max_temp+0x1>
     f70:	a0 90 04 02 	lds	r10, 0x0204	; 0x800204 <pre_heat_max_temp+0x2>
     f74:	b0 90 05 02 	lds	r11, 0x0205	; 0x800205 <pre_heat_max_temp+0x3>
     f78:	a5 01       	movw	r20, r10
     f7a:	94 01       	movw	r18, r8
 				controls.stopHeater();
     f7c:	65 d6       	rcall	.+3274   	; 0x1c48 <__gesf2>
     f7e:	88 23       	and	r24, r24
     f80:	3c f0       	brlt	.+14     	; 0xf90 <main+0x256>
     f82:	8c e3       	ldi	r24, 0x3C	; 60
 				preHeat = true;
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	38 d1       	rcall	.+624    	; 0x11f8 <_ZN8Controls10stopHeaterEv>
 				titititi();
     f88:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <__data_end>
     f8c:	ce dc       	rcall	.-1636   	; 0x92a <_Z8titititiv>
 			}
 			else if(skin_temperature < pre_heat_max_temp) {
     f8e:	a9 cf       	rjmp	.-174    	; 0xee2 <main+0x1a8>
     f90:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
     f94:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
     f98:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
     f9c:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
     fa0:	c5 01       	movw	r24, r10
     fa2:	b4 01       	movw	r22, r8
     fa4:	51 d6       	rcall	.+3234   	; 0x1c48 <__gesf2>
     fa6:	18 16       	cp	r1, r24
 				controls.startHeater();
     fa8:	0c f0       	brlt	.+2      	; 0xfac <main+0x272>
     faa:	9b cf       	rjmp	.-202    	; 0xee2 <main+0x1a8>
     fac:	8c e3       	ldi	r24, 0x3C	; 60
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	21 d1       	rcall	.+578    	; 0x11f4 <_ZN8Controls11startHeaterEv>
 			}
 		}
 		
 		else{
 			asm volatile ("nop");
     fb2:	97 cf       	rjmp	.-210    	; 0xee2 <main+0x1a8>
     fb4:	00 00       	nop
	///The preheat condition of baby warmer ends here ///////////
	
	//clear display
	//note that for clearDisplay to clear screen, mode decode register should be in 0xff form or the display shows tttttttt 

	max1.MAX7219_clearDisplay();
     fb6:	95 cf       	rjmp	.-214    	; 0xee2 <main+0x1a8>
     fb8:	8c e1       	ldi	r24, 0x1C	; 28
     fba:	92 e0       	ldi	r25, 0x02	; 2
	max2.MAX7219_clearDisplay();
     fbc:	16 d4       	rcall	.+2092   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
     fbe:	86 e1       	ldi	r24, 0x16	; 22
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	13 d4       	rcall	.+2086   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
     fc4:	2f ef       	ldi	r18, 0xFF	; 255
     fc6:	81 ee       	ldi	r24, 0xE1	; 225
     fc8:	94 e0       	ldi	r25, 0x04	; 4
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	80 40       	sbci	r24, 0x00	; 0
     fce:	90 40       	sbci	r25, 0x00	; 0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <main+0x290>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <main+0x29a>
     fd4:	00 00       	nop
	float temperature_heater_off = 0.0;
	float temperature_heater_on = 0.0;
	//
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
	max2.MAX7219_clearDisplay();
	_delay_ms(100);
	
	while(1)
	{
		check();
     fd8:	31 dd       	rcall	.-1438   	; 0xa3c <_Z5checkv>
     fda:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <displayUpdate>
		if(displayUpdate) {
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <main+0x2aa>
     fe2:	df c0       	rjmp	.+446    	; 0x11a2 <main+0x468>
			
			//spi for temperature pt100
			maxAir.begin(AIR_SENSOR); //these are init
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	85 e3       	ldi	r24, 0x35	; 53
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	7f d2       	rcall	.+1278   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
     fec:	61 e0       	ldi	r22, 0x01	; 1
			maxSkin.begin(SKIN_SENSOR);
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	7b d2       	rcall	.+1270   	; 0x14ea <_ZN17Adafruit_MAX318655beginEh>
     ff4:	00 e0       	ldi	r16, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0, 430.0);
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	27 ed       	ldi	r18, 0xD7	; 215
     ffa:	33 e4       	ldi	r19, 0x43	; 67
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	68 ec       	ldi	r22, 0xC8	; 200
    1002:	72 e4       	ldi	r23, 0x42	; 66
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	b1 d2       	rcall	.+1378   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
    100a:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
    100e:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
    1012:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
    1016:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
    101a:	00 e0       	ldi	r16, 0x00	; 0
			air_temperature = maxAir.temperature(100.0, 430.0);
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	27 ed       	ldi	r18, 0xD7	; 215
    1020:	33 e4       	ldi	r19, 0x43	; 67
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	68 ec       	ldi	r22, 0xC8	; 200
    1028:	72 e4       	ldi	r23, 0x42	; 66
    102a:	85 e3       	ldi	r24, 0x35	; 53
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	9e d2       	rcall	.+1340   	; 0x156c <_ZN17Adafruit_MAX3186511temperatureEff>
    1030:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
    1034:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
    1038:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
    103c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
    1040:	61 e0       	ldi	r22, 0x01	; 1
			max1.MAX7219_init(REINITIALIZE); // these are init
    1042:	8c e1       	ldi	r24, 0x1C	; 28
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	b2 d3       	rcall	.+1892   	; 0x17ac <_ZN7max721912MAX7219_initEc>
    1048:	61 e0       	ldi	r22, 0x01	; 1
			max2.MAX7219_init(REINITIALIZE);
    104a:	86 e1       	ldi	r24, 0x16	; 22
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	ae d3       	rcall	.+1884   	; 0x17ac <_ZN7max721912MAX7219_initEc>
    1050:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <start_buzzer>
			
			//buzzer karaying
			if(start_buzzer) {
    1054:	88 23       	and	r24, r24
    1056:	09 f4       	brne	.+2      	; 0x105a <main+0x320>
    1058:	a6 c0       	rjmp	.+332    	; 0x11a6 <main+0x46c>
    105a:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <buzzer_timer>
				buzzer_timer = !buzzer_timer;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	89 27       	eor	r24, r25
    1062:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <buzzer_timer>
    1066:	88 23       	and	r24, r24
    1068:	21 f0       	breq	.+8      	; 0x1072 <main+0x338>
				if(buzzer_timer) {
    106a:	8c e3       	ldi	r24, 0x3C	; 60
    106c:	92 e0       	ldi	r25, 0x02	; 2
					//  UART0TransmitString("On\r\n");
					controls.startBuzzer();
    106e:	c6 d0       	rcall	.+396    	; 0x11fc <_ZN8Controls11startBuzzerEv>
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <main+0x33e>
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	c8 d0       	rcall	.+400    	; 0x1208 <_ZN8Controls10stopBuzzerEv>
					} else {
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
    1078:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
    107c:	88 23       	and	r24, r24
    107e:	91 f0       	breq	.+36     	; 0x10a4 <main+0x36a>
				}
			}
			// sending this
			if(button_change){
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	c8 27       	eor	r28, r24
    1084:	51 f0       	breq	.+20     	; 0x109a <main+0x360>
				set_temp_display = !set_temp_display;
    1086:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
				if(set_temp_display) {
    108a:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
					sendToDisplayBelow(set_temperature_copy);
    108e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
    1092:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
    1096:	6c da       	rcall	.-2856   	; 0x570 <_Z18sendToDisplayBelowf>
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <main+0x366>
    109a:	86 e1       	ldi	r24, 0x16	; 22
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	a5 d3       	rcall	.+1866   	; 0x17ea <_ZN7max721920MAX7219_clearDisplayEv>
    10a0:	ee da       	rcall	.-2596   	; 0x67e <_Z21displaySetTemperaturev>
					} else {
					max2.MAX7219_clearDisplay();
    10a2:	37 c0       	rjmp	.+110    	; 0x1112 <main+0x3d8>
    10a4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <start_buzzer>
    10a8:	88 23       	and	r24, r24
				}
				displaySetTemperature();
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <main+0x3a6>
    10ac:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
			}
			
			else if(start_buzzer){
    10b0:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
    10b4:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
				displayOnTempOutOfRange(air_temperature, skin_temperature, set_temperature);
    10b8:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
    10bc:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
    10c0:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    10c4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    10c8:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    10cc:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
    10d0:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
    10d4:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
    10d8:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
    10dc:	c6 db       	rcall	.-2164   	; 0x86a <_Z23displayOnTempOutOfRangefff>
    10de:	19 c0       	rjmp	.+50     	; 0x1112 <main+0x3d8>
    10e0:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
    10e4:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
			}
			else {
				sendToDisplay(air_temperature, skin_temperature, set_temperature);
    10e8:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
    10ec:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
    10f0:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
    10f4:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    10f8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    10fc:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    1100:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
    1104:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
    1108:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
    110c:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
    1110:	de d8       	rcall	.-3652   	; 0x2ce <_Z13sendToDisplayfff>
    1112:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <set_temperature>
    1116:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <set_temperature+0x1>
			}
			
			temperature_heater_off = set_temperature - 0.1f;
    111a:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <set_temperature+0x2>
    111e:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <set_temperature+0x3>
    1122:	80 90 2c 02 	lds	r8, 0x022C	; 0x80022c <skin_temperature>
			temperature_heater_on = set_temperature - 0.2f;
			
			if(skin_temperature >= temperature_heater_off) {
    1126:	90 90 2d 02 	lds	r9, 0x022D	; 0x80022d <skin_temperature+0x1>
    112a:	a0 90 2e 02 	lds	r10, 0x022E	; 0x80022e <skin_temperature+0x2>
    112e:	b0 90 2f 02 	lds	r11, 0x022F	; 0x80022f <skin_temperature+0x3>
    1132:	2d ec       	ldi	r18, 0xCD	; 205
    1134:	3c ec       	ldi	r19, 0xCC	; 204
    1136:	4c ec       	ldi	r20, 0xCC	; 204
    1138:	5d e3       	ldi	r21, 0x3D	; 61
    113a:	c7 01       	movw	r24, r14
    113c:	b6 01       	movw	r22, r12
    113e:	d0 d3       	rcall	.+1952   	; 0x18e0 <__subsf3>
    1140:	a5 01       	movw	r20, r10
    1142:	94 01       	movw	r18, r8
    1144:	32 d4       	rcall	.+2148   	; 0x19aa <__cmpsf2>
    1146:	18 16       	cp	r1, r24
    1148:	5c f0       	brlt	.+22     	; 0x1160 <main+0x426>
    114a:	40 e0       	ldi	r20, 0x00	; 0
				Led.led_do(HEATER_FAIL_LED,0);
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	64 e0       	ldi	r22, 0x04	; 4
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	85 e1       	ldi	r24, 0x15	; 21
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	71 d0       	rcall	.+226    	; 0x123a <_ZN3led6led_doEii>
    1158:	8c e3       	ldi	r24, 0x3C	; 60
    115a:	92 e0       	ldi	r25, 0x02	; 2
				controls.stopHeater();
    115c:	4d d0       	rcall	.+154    	; 0x11f8 <_ZN8Controls10stopHeaterEv>
    115e:	1e c0       	rjmp	.+60     	; 0x119c <main+0x462>
    1160:	80 90 2c 02 	lds	r8, 0x022C	; 0x80022c <skin_temperature>
    1164:	90 90 2d 02 	lds	r9, 0x022D	; 0x80022d <skin_temperature+0x1>
				}else if(skin_temperature <= temperature_heater_on) {
    1168:	a0 90 2e 02 	lds	r10, 0x022E	; 0x80022e <skin_temperature+0x2>
    116c:	b0 90 2f 02 	lds	r11, 0x022F	; 0x80022f <skin_temperature+0x3>
    1170:	2d ec       	ldi	r18, 0xCD	; 205
    1172:	3c ec       	ldi	r19, 0xCC	; 204
    1174:	4c e4       	ldi	r20, 0x4C	; 76
    1176:	5e e3       	ldi	r21, 0x3E	; 62
    1178:	c7 01       	movw	r24, r14
    117a:	b6 01       	movw	r22, r12
    117c:	b1 d3       	rcall	.+1890   	; 0x18e0 <__subsf3>
    117e:	a5 01       	movw	r20, r10
    1180:	94 01       	movw	r18, r8
    1182:	62 d5       	rcall	.+2756   	; 0x1c48 <__gesf2>
    1184:	88 23       	and	r24, r24
    1186:	54 f0       	brlt	.+20     	; 0x119c <main+0x462>
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	85 e1       	ldi	r24, 0x15	; 21
				Led.led_do(HEATER_FAIL_LED,1);
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	52 d0       	rcall	.+164    	; 0x123a <_ZN3led6led_doEii>
    1196:	8c e3       	ldi	r24, 0x3C	; 60
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	2c d0       	rcall	.+88     	; 0x11f4 <_ZN8Controls11startHeaterEv>
    119c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <displayUpdate>
    11a0:	1b cf       	rjmp	.-458    	; 0xfd8 <main+0x29e>
				controls.startHeater();
    11a2:	00 00       	nop
    11a4:	19 cf       	rjmp	.-462    	; 0xfd8 <main+0x29e>
    11a6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
			}
			
			displayUpdate = false;
    11aa:	81 11       	cpse	r24, r1
    11ac:	69 cf       	rjmp	.-302    	; 0x1080 <main+0x346>
    11ae:	98 cf       	rjmp	.-208    	; 0x10e0 <main+0x3a6>

000011b0 <_GLOBAL__sub_I_resetFunc>:
		}
		else{
			asm volatile ("nop");
    11b0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <set_temperature>
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
				}
			}
			// sending this
			if(button_change){
    11b4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <set_temperature+0x1>
    11b8:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <set_temperature+0x2>
    11bc:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <set_temperature+0x3>
Adafruit_MAX31865 maxSkin;

volatile float skin_temperature = 0.0;
volatile float air_temperature = 0.0;
float set_temperature = 36.5;
float set_temperature_copy = set_temperature;
    11c0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
    11c4:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
    11c8:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
    11cc:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>

#define FIRSTINITIALIZE 0
#define REINITIALIZE	1


class max7219 {
    11d0:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <max1+0x1>
    11d4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <max1>
    11d8:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <max2+0x1>
    11dc:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <max2>
    11e0:	08 95       	ret

000011e2 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
    11e2:	25 9a       	sbi	0x04, 5	; 4
    11e4:	e1 e0       	ldi	r30, 0x01	; 1
    11e6:	f1 e0       	ldi	r31, 0x01	; 1
    11e8:	80 81       	ld	r24, Z
    11ea:	80 61       	ori	r24, 0x10	; 16
    11ec:	80 83       	st	Z, r24
    11ee:	2d 98       	cbi	0x05, 5	; 5
    11f0:	80 98       	cbi	0x10, 0	; 16
    11f2:	08 95       	ret

000011f4 <_ZN8Controls11startHeaterEv>:
    11f4:	2d 9a       	sbi	0x05, 5	; 5
    11f6:	08 95       	ret

000011f8 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
    11f8:	2d 98       	cbi	0x05, 5	; 5
    11fa:	08 95       	ret

000011fc <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
    11fc:	e2 e0       	ldi	r30, 0x02	; 2
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	80 81       	ld	r24, Z
    1202:	80 61       	ori	r24, 0x10	; 16
    1204:	80 83       	st	Z, r24
    1206:	08 95       	ret

00001208 <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
    1208:	e2 e0       	ldi	r30, 0x02	; 2
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	80 81       	ld	r24, Z
    120e:	8f 7e       	andi	r24, 0xEF	; 239
    1210:	80 83       	st	Z, r24
    1212:	08 95       	ret

00001214 <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
    1214:	ea e0       	ldi	r30, 0x0A	; 10
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	80 83       	st	Z, r24
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
    121e:	80 81       	ld	r24, Z
    1220:	80 62       	ori	r24, 0x20	; 32
    1222:	80 83       	st	Z, r24
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	80 83       	st	Z, r24
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
    122a:	6b 9a       	sbi	0x0d, 3	; 13
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
    122c:	e1 e0       	ldi	r30, 0x01	; 1
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	80 81       	ld	r24, Z
    1232:	88 60       	ori	r24, 0x08	; 8
    1234:	80 83       	st	Z, r24
	DDR(POWER_PORT) |= (1 << POWER_PIN);
    1236:	9d 9a       	sbi	0x13, 5	; 19
    1238:	08 95       	ret

0000123a <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
    123a:	62 30       	cpi	r22, 0x02	; 2
    123c:	71 05       	cpc	r23, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <_ZN3led6led_doEii+0x8>
    1240:	41 c0       	rjmp	.+130    	; 0x12c4 <_ZN3led6led_doEii+0x8a>
    1242:	3c f4       	brge	.+14     	; 0x1252 <_ZN3led6led_doEii+0x18>
    1244:	61 15       	cp	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	69 f0       	breq	.+26     	; 0x1264 <_ZN3led6led_doEii+0x2a>
    124a:	61 30       	cpi	r22, 0x01	; 1
    124c:	71 05       	cpc	r23, r1
    124e:	c1 f0       	breq	.+48     	; 0x1280 <_ZN3led6led_doEii+0x46>
    1250:	08 95       	ret
    1252:	64 30       	cpi	r22, 0x04	; 4
    1254:	71 05       	cpc	r23, r1
    1256:	41 f1       	breq	.+80     	; 0x12a8 <_ZN3led6led_doEii+0x6e>
    1258:	0c f4       	brge	.+2      	; 0x125c <_ZN3led6led_doEii+0x22>
    125a:	42 c0       	rjmp	.+132    	; 0x12e0 <_ZN3led6led_doEii+0xa6>
    125c:	65 30       	cpi	r22, 0x05	; 5
    125e:	71 05       	cpc	r23, r1
    1260:	e9 f0       	breq	.+58     	; 0x129c <_ZN3led6led_doEii+0x62>
    1262:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
    1264:	45 2b       	or	r20, r21
    1266:	31 f0       	breq	.+12     	; 0x1274 <_ZN3led6led_doEii+0x3a>
    1268:	eb e0       	ldi	r30, 0x0B	; 11
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	80 81       	ld	r24, Z
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	80 83       	st	Z, r24
    1272:	08 95       	ret
    1274:	eb e0       	ldi	r30, 0x0B	; 11
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	80 81       	ld	r24, Z
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	80 83       	st	Z, r24
    127e:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
    1280:	45 2b       	or	r20, r21
    1282:	31 f0       	breq	.+12     	; 0x1290 <_ZN3led6led_doEii+0x56>
    1284:	eb e0       	ldi	r30, 0x0B	; 11
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	80 81       	ld	r24, Z
    128a:	80 62       	ori	r24, 0x20	; 32
    128c:	80 83       	st	Z, r24
    128e:	08 95       	ret
    1290:	eb e0       	ldi	r30, 0x0B	; 11
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	80 81       	ld	r24, Z
    1296:	8f 7d       	andi	r24, 0xDF	; 223
    1298:	80 83       	st	Z, r24
    129a:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
    129c:	45 2b       	or	r20, r21
    129e:	11 f0       	breq	.+4      	; 0x12a4 <_ZN3led6led_doEii+0x6a>
    12a0:	73 9a       	sbi	0x0e, 3	; 14
    12a2:	08 95       	ret
    12a4:	73 98       	cbi	0x0e, 3	; 14
    12a6:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
    12a8:	45 2b       	or	r20, r21
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <_ZN3led6led_doEii+0x7e>
    12ac:	e2 e0       	ldi	r30, 0x02	; 2
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	80 81       	ld	r24, Z
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	80 83       	st	Z, r24
    12b6:	08 95       	ret
    12b8:	e2 e0       	ldi	r30, 0x02	; 2
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	80 81       	ld	r24, Z
    12be:	87 7f       	andi	r24, 0xF7	; 247
    12c0:	80 83       	st	Z, r24
    12c2:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
    12c4:	45 2b       	or	r20, r21
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <_ZN3led6led_doEii+0x9a>
    12c8:	eb e0       	ldi	r30, 0x0B	; 11
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	80 81       	ld	r24, Z
    12ce:	88 60       	ori	r24, 0x08	; 8
    12d0:	80 83       	st	Z, r24
    12d2:	08 95       	ret
    12d4:	eb e0       	ldi	r30, 0x0B	; 11
    12d6:	f1 e0       	ldi	r31, 0x01	; 1
    12d8:	80 81       	ld	r24, Z
    12da:	87 7f       	andi	r24, 0xF7	; 247
    12dc:	80 83       	st	Z, r24
    12de:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
    12e0:	45 2b       	or	r20, r21
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <_ZN3led6led_doEii+0xae>
    12e4:	a5 9a       	sbi	0x14, 5	; 20
    12e6:	08 95       	ret
    12e8:	a5 98       	cbi	0x14, 5	; 20
    12ea:	08 95       	ret

000012ec <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
    12ec:	6e bd       	out	0x2e, r22	; 46
    12ee:	0d b4       	in	r0, 0x2d	; 45
    12f0:	07 fe       	sbrs	r0, 7
    12f2:	fd cf       	rjmp	.-6      	; 0x12ee <_ZN17Adafruit_MAX318657spixferEh+0x2>
    12f4:	8e b5       	in	r24, 0x2e	; 46
    12f6:	08 95       	ret

000012f8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	7c 01       	movw	r14, r24
    1306:	ea 01       	movw	r28, r20
    1308:	12 2f       	mov	r17, r18
    130a:	fc 01       	movw	r30, r24
    130c:	80 81       	ld	r24, Z
    130e:	88 23       	and	r24, r24
    1310:	19 f0       	breq	.+6      	; 0x1318 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	51 f0       	breq	.+20     	; 0x132a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x32>
    1316:	11 c0       	rjmp	.+34     	; 0x133a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
    1318:	eb e0       	ldi	r30, 0x0B	; 11
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	80 83       	st	Z, r24
    1322:	80 81       	ld	r24, Z
    1324:	84 60       	ori	r24, 0x04	; 4
    1326:	80 83       	st	Z, r24
    1328:	08 c0       	rjmp	.+16     	; 0x133a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
    132a:	eb e0       	ldi	r30, 0x0B	; 11
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	80 81       	ld	r24, Z
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	80 83       	st	Z, r24
    1334:	80 81       	ld	r24, Z
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	80 83       	st	Z, r24
    133a:	6f 77       	andi	r22, 0x7F	; 127
    133c:	c7 01       	movw	r24, r14
    133e:	d6 df       	rcall	.-84     	; 0x12ec <_ZN17Adafruit_MAX318657spixferEh>
    1340:	0f ef       	ldi	r16, 0xFF	; 255
    1342:	01 0f       	add	r16, r17
    1344:	11 23       	and	r17, r17
    1346:	61 f0       	breq	.+24     	; 0x1360 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x68>
    1348:	10 e0       	ldi	r17, 0x00	; 0
    134a:	0f 5f       	subi	r16, 0xFF	; 255
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	0c 0f       	add	r16, r28
    1350:	1d 1f       	adc	r17, r29
    1352:	6f ef       	ldi	r22, 0xFF	; 255
    1354:	c7 01       	movw	r24, r14
    1356:	ca df       	rcall	.-108    	; 0x12ec <_ZN17Adafruit_MAX318657spixferEh>
    1358:	89 93       	st	Y+, r24
    135a:	c0 17       	cp	r28, r16
    135c:	d1 07       	cpc	r29, r17
    135e:	c9 f7       	brne	.-14     	; 0x1352 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5a>
    1360:	f7 01       	movw	r30, r14
    1362:	80 81       	ld	r24, Z
    1364:	88 23       	and	r24, r24
    1366:	19 f0       	breq	.+6      	; 0x136e <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x76>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	39 f0       	breq	.+14     	; 0x137a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x82>
    136c:	0b c0       	rjmp	.+22     	; 0x1384 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
    136e:	eb e0       	ldi	r30, 0x0B	; 11
    1370:	f1 e0       	ldi	r31, 0x01	; 1
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
    137a:	eb e0       	ldi	r30, 0x0B	; 11
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	80 81       	ld	r24, Z
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	80 83       	st	Z, r24
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	08 95       	ret

00001392 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	1f 92       	push	r1
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	21 e0       	ldi	r18, 0x01	; 1
    13a0:	ae 01       	movw	r20, r28
    13a2:	4f 5f       	subi	r20, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	a8 df       	rcall	.-176    	; 0x12f8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	1f 92       	push	r1
    13b8:	1f 92       	push	r1
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
    13be:	19 82       	std	Y+1, r1	; 0x01
    13c0:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
    13c2:	22 e0       	ldi	r18, 0x02	; 2
    13c4:	ae 01       	movw	r20, r28
    13c6:	4f 5f       	subi	r20, 0xFF	; 255
    13c8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ca:	96 df       	rcall	.-212    	; 0x12f8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
    13d0:	98 2f       	mov	r25, r24
    13d2:	88 27       	eor	r24, r24
ret |=  buffer[1];
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
    13d6:	82 2b       	or	r24, r18
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
    13ea:	14 2f       	mov	r17, r20
 
  switch(choose) {
    13ec:	88 81       	ld	r24, Y
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	51 f0       	breq	.+20     	; 0x140a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x28>
    13f6:	11 c0       	rjmp	.+34     	; 0x141a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 0:
		TEMP_I_PORT &=~ (1 << TEMP_I_PIN);
    13f8:	eb e0       	ldi	r30, 0x0B	; 11
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	80 83       	st	Z, r24
		TEMP_II_PORT |= (1 << TEMP_II_PIN);
    1402:	80 81       	ld	r24, Z
    1404:	84 60       	ori	r24, 0x04	; 4
    1406:	80 83       	st	Z, r24
		break;
    1408:	08 c0       	rjmp	.+16     	; 0x141a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 1:
		TEMP_II_PORT &=~ (1 << TEMP_II_PIN);
    140a:	eb e0       	ldi	r30, 0x0B	; 11
    140c:	f1 e0       	ldi	r31, 0x01	; 1
    140e:	80 81       	ld	r24, Z
    1410:	8b 7f       	andi	r24, 0xFB	; 251
    1412:	80 83       	st	Z, r24
		TEMP_I_PORT |= (1 << TEMP_I_PIN);
    1414:	80 81       	ld	r24, Z
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	80 83       	st	Z, r24
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
    141a:	60 68       	ori	r22, 0x80	; 128
    141c:	ce 01       	movw	r24, r28
    141e:	66 df       	rcall	.-308    	; 0x12ec <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
    1420:	61 2f       	mov	r22, r17
    1422:	ce 01       	movw	r24, r28
    1424:	63 df       	rcall	.-314    	; 0x12ec <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
    1426:	88 81       	ld	r24, Y
    1428:	88 23       	and	r24, r24
    142a:	19 f0       	breq	.+6      	; 0x1432 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x50>
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	39 f0       	breq	.+14     	; 0x143e <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x5c>
    1430:	0b c0       	rjmp	.+22     	; 0x1448 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
   case 0:
	TEMP_I_PORT |= (1 << TEMP_I_PIN);
    1432:	eb e0       	ldi	r30, 0x0B	; 11
    1434:	f1 e0       	ldi	r31, 0x01	; 1
    1436:	80 81       	ld	r24, Z
    1438:	81 60       	ori	r24, 0x01	; 1
    143a:	80 83       	st	Z, r24
	break;
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
  case 1:
	TEMP_II_PORT |= (1 << TEMP_II_PIN);
    143e:	eb e0       	ldi	r30, 0x0B	; 11
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	80 81       	ld	r24, Z
    1444:	84 60       	ori	r24, 0x04	; 4
    1446:	80 83       	st	Z, r24
	break;
}
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	08 95       	ret

00001450 <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	9c df       	rcall	.-200    	; 0x1392 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
    145a:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    145c:	48 2f       	mov	r20, r24
    145e:	42 60       	ori	r20, 0x02	; 2
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	ce 01       	movw	r24, r28
    1464:	be df       	rcall	.-132    	; 0x13e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	ec 01       	movw	r28, r24
    1474:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	8c df       	rcall	.-232    	; 0x1392 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    147a:	11 23       	and	r17, r17
    147c:	19 f0       	breq	.+6      	; 0x1484 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
    147e:	48 2f       	mov	r20, r24
    1480:	40 68       	ori	r20, 0x80	; 128
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
    1484:	48 2f       	mov	r20, r24
    1486:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	ce 01       	movw	r24, r28
    148c:	aa df       	rcall	.-172    	; 0x13e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
    149e:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	77 df       	rcall	.-274    	; 0x1392 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    14a4:	11 23       	and	r17, r17
    14a6:	19 f0       	breq	.+6      	; 0x14ae <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
    14a8:	48 2f       	mov	r20, r24
    14aa:	40 64       	ori	r20, 0x40	; 64
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
    14ae:	48 2f       	mov	r20, r24
    14b0:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	95 df       	rcall	.-214    	; 0x13e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	08 95       	ret

000014c0 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	ec 01       	movw	r28, r24
    14c8:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	62 df       	rcall	.-316    	; 0x1392 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
    14ce:	11 30       	cpi	r17, 0x01	; 1
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
    14d2:	48 2f       	mov	r20, r24
    14d4:	40 61       	ori	r20, 0x10	; 16
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
    14d8:	48 2f       	mov	r20, r24
    14da:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	ce 01       	movw	r24, r28
    14e0:	80 df       	rcall	.-256    	; 0x13e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	08 95       	ret

000014ea <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    14f4:	e8 e0       	ldi	r30, 0x08	; 8
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	80 81       	ld	r24, Z
    14fa:	80 6c       	ori	r24, 0xC0	; 192
    14fc:	80 83       	st	Z, r24
	SPI.begin();
    14fe:	9e d1       	rcall	.+828    	; 0x183c <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
    1500:	85 e5       	ldi	r24, 0x55	; 85
    1502:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
    1504:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	ce 01       	movw	r24, r28
    150a:	da df       	rcall	.-76     	; 0x14c0 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	ce 01       	movw	r24, r28
    1510:	ad df       	rcall	.-166    	; 0x146c <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	ce 01       	movw	r24, r28
    1516:	bf df       	rcall	.-130    	; 0x1496 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
    1518:	ce 01       	movw	r24, r28
    151a:	9a df       	rcall	.-204    	; 0x1450 <_ZN17Adafruit_MAX3186510clearFaultEv>
    151c:	81 e0       	ldi	r24, 0x01	; 1
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	08 95       	ret

00001526 <_ZN17Adafruit_MAX318657readRTDEv>:
    1526:	cf 93       	push	r28
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
	clearFault();
    152c:	91 df       	rcall	.-222    	; 0x1450 <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	ce 01       	movw	r24, r28
    1532:	9c df       	rcall	.-200    	; 0x146c <_ZN17Adafruit_MAX3186510enableBiasEb>
    1534:	83 ec       	ldi	r24, 0xC3	; 195
    1536:	99 e0       	ldi	r25, 0x09	; 9
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <_ZN17Adafruit_MAX318657readRTDEv+0x18>
    153e:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	ce 01       	movw	r24, r28
    1544:	26 df       	rcall	.-436    	; 0x1392 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    1546:	48 2f       	mov	r20, r24
    1548:	40 62       	ori	r20, 0x20	; 32
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	ce 01       	movw	r24, r28
    154e:	49 df       	rcall	.-366    	; 0x13e2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    1550:	89 e7       	ldi	r24, 0x79	; 121
    1552:	9f e3       	ldi	r25, 0x3F	; 63
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <_ZN17Adafruit_MAX318657readRTDEv+0x34>
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
    155a:	00 00       	nop
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	ce 01       	movw	r24, r28
    1560:	28 df       	rcall	.-432    	; 0x13b2 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	6a 01       	movw	r12, r20
    158e:	7b 01       	movw	r14, r22
    1590:	48 01       	movw	r8, r16
    1592:	59 01       	movw	r10, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
    1594:	c8 df       	rcall	.-112    	; 0x1526 <_ZN17Adafruit_MAX318657readRTDEv>
    1596:	bc 01       	movw	r22, r24
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a3 d2       	rcall	.+1350   	; 0x1ae4 <__floatunsisf>
	Rt /= 32768;
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	58 e3       	ldi	r21, 0x38	; 56
    15a6:	54 d3       	rcall	.+1704   	; 0x1c50 <__mulsf3>
	Rt *= refResistor;
    15a8:	a5 01       	movw	r20, r10
    15aa:	94 01       	movw	r18, r8
    15ac:	51 d3       	rcall	.+1698   	; 0x1c50 <__mulsf3>
    15ae:	4b 01       	movw	r8, r22
    15b0:	5c 01       	movw	r10, r24
    15b2:	a7 01       	movw	r20, r14
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
	temp = (sqrt(temp) + Z1) / Z4;
    15b4:	96 01       	movw	r18, r12
    15b6:	6f e7       	ldi	r22, 0x7F	; 127
    15b8:	75 e0       	ldi	r23, 0x05	; 5
    15ba:	8b e1       	ldi	r24, 0x1B	; 27
    15bc:	96 eb       	ldi	r25, 0xB6	; 182
    15be:	f9 d1       	rcall	.+1010   	; 0x19b2 <__divsf3>
    15c0:	2b 01       	movw	r4, r22
    15c2:	3c 01       	movw	r6, r24
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	c3 01       	movw	r24, r6
    15ca:	b2 01       	movw	r22, r4
    15cc:	41 d3       	rcall	.+1666   	; 0x1c50 <__mulsf3>
    15ce:	26 e1       	ldi	r18, 0x16	; 22
    15d0:	33 e8       	ldi	r19, 0x83	; 131
    15d2:	43 e9       	ldi	r20, 0x93	; 147
    15d4:	57 e3       	ldi	r21, 0x37	; 55
    15d6:	85 d1       	rcall	.+778    	; 0x18e2 <__addsf3>
    15d8:	a2 d3       	rcall	.+1860   	; 0x1d1e <sqrt>
    15da:	22 e3       	ldi	r18, 0x32	; 50
    15dc:	31 e1       	ldi	r19, 0x11	; 17
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5b e3       	ldi	r21, 0x3B	; 59
    15e2:	7e d1       	rcall	.+764    	; 0x18e0 <__subsf3>
    15e4:	2f e7       	ldi	r18, 0x7F	; 127
    15e6:	35 e0       	ldi	r19, 0x05	; 5
    15e8:	4b e9       	ldi	r20, 0x9B	; 155
    15ea:	55 eb       	ldi	r21, 0xB5	; 181
    15ec:	e2 d1       	rcall	.+964    	; 0x19b2 <__divsf3>
    15ee:	06 2f       	mov	r16, r22
    15f0:	17 2f       	mov	r17, r23
    15f2:	d8 2f       	mov	r29, r24
    15f4:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	25 d3       	rcall	.+1610   	; 0x1c48 <__gesf2>
    15fe:	88 23       	and	r24, r24
    1600:	0c f0       	brlt	.+2      	; 0x1604 <_ZN17Adafruit_MAX3186511temperatureEff+0x98>

	// ugh.
	Rt /= RTDnominal;
	Rt *= 100;      // normalize to 100 ohm
    1602:	60 c0       	rjmp	.+192    	; 0x16c4 <_ZN17Adafruit_MAX3186511temperatureEff+0x158>
    1604:	a7 01       	movw	r20, r14
    1606:	96 01       	movw	r18, r12
    1608:	c5 01       	movw	r24, r10
    160a:	b4 01       	movw	r22, r8
    160c:	d2 d1       	rcall	.+932    	; 0x19b2 <__divsf3>
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	48 ec       	ldi	r20, 0xC8	; 200
    1614:	52 e4       	ldi	r21, 0x42	; 66
    1616:	1c d3       	rcall	.+1592   	; 0x1c50 <__mulsf3>
    1618:	6b 01       	movw	r12, r22

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
    161a:	7c 01       	movw	r14, r24
    161c:	2b e5       	ldi	r18, 0x5B	; 91
    161e:	32 e4       	ldi	r19, 0x42	; 66
    1620:	4e e0       	ldi	r20, 0x0E	; 14
    1622:	50 e4       	ldi	r21, 0x40	; 64
    1624:	15 d3       	rcall	.+1578   	; 0x1c50 <__mulsf3>
    1626:	2f e1       	ldi	r18, 0x1F	; 31
    1628:	35 e0       	ldi	r19, 0x05	; 5
    162a:	42 e7       	ldi	r20, 0x72	; 114
    162c:	53 e4       	ldi	r21, 0x43	; 67
    162e:	58 d1       	rcall	.+688    	; 0x18e0 <__subsf3>
    1630:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // square
    1632:	3c 01       	movw	r6, r24
    1634:	a7 01       	movw	r20, r14
    1636:	96 01       	movw	r18, r12
    1638:	c7 01       	movw	r24, r14
    163a:	b6 01       	movw	r22, r12
    163c:	09 d3       	rcall	.+1554   	; 0x1c50 <__mulsf3>
    163e:	4b 01       	movw	r8, r22
	temp += 2.5859e-3 * rpoly;
    1640:	5c 01       	movw	r10, r24
    1642:	24 e3       	ldi	r18, 0x34	; 52
    1644:	38 e7       	ldi	r19, 0x78	; 120
    1646:	49 e2       	ldi	r20, 0x29	; 41
    1648:	5b e3       	ldi	r21, 0x3B	; 59
    164a:	02 d3       	rcall	.+1540   	; 0x1c50 <__mulsf3>
    164c:	a3 01       	movw	r20, r6
    164e:	92 01       	movw	r18, r4
    1650:	48 d1       	rcall	.+656    	; 0x18e2 <__addsf3>
    1652:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^3
    1654:	3c 01       	movw	r6, r24
    1656:	a5 01       	movw	r20, r10
    1658:	94 01       	movw	r18, r8
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	f8 d2       	rcall	.+1520   	; 0x1c50 <__mulsf3>
    1660:	4b 01       	movw	r8, r22
	temp -= 4.8260e-6 * rpoly;
    1662:	5c 01       	movw	r10, r24
    1664:	26 e0       	ldi	r18, 0x06	; 6
    1666:	3f ee       	ldi	r19, 0xEF	; 239
    1668:	41 ea       	ldi	r20, 0xA1	; 161
    166a:	56 e3       	ldi	r21, 0x36	; 54
    166c:	f1 d2       	rcall	.+1506   	; 0x1c50 <__mulsf3>
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	c3 01       	movw	r24, r6
    1674:	b2 01       	movw	r22, r4
    1676:	34 d1       	rcall	.+616    	; 0x18e0 <__subsf3>
    1678:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^4
    167a:	3c 01       	movw	r6, r24
    167c:	a5 01       	movw	r20, r10
    167e:	94 01       	movw	r18, r8
    1680:	c7 01       	movw	r24, r14
    1682:	b6 01       	movw	r22, r12
    1684:	e5 d2       	rcall	.+1482   	; 0x1c50 <__mulsf3>
    1686:	4b 01       	movw	r8, r22
	temp -= 2.8183e-8 * rpoly;
    1688:	5c 01       	movw	r10, r24
    168a:	23 e1       	ldi	r18, 0x13	; 19
    168c:	37 e1       	ldi	r19, 0x17	; 23
    168e:	42 ef       	ldi	r20, 0xF2	; 242
    1690:	52 e3       	ldi	r21, 0x32	; 50
    1692:	de d2       	rcall	.+1468   	; 0x1c50 <__mulsf3>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	c3 01       	movw	r24, r6
    169a:	b2 01       	movw	r22, r4
    169c:	21 d1       	rcall	.+578    	; 0x18e0 <__subsf3>
    169e:	2b 01       	movw	r4, r22
    16a0:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
	temp += 1.5243e-10 * rpoly;
    16a2:	a5 01       	movw	r20, r10
    16a4:	94 01       	movw	r18, r8
    16a6:	c7 01       	movw	r24, r14
    16a8:	b6 01       	movw	r22, r12
    16aa:	d2 d2       	rcall	.+1444   	; 0x1c50 <__mulsf3>
    16ac:	2b e3       	ldi	r18, 0x3B	; 59
    16ae:	39 e9       	ldi	r19, 0x99	; 153
    16b0:	47 e2       	ldi	r20, 0x27	; 39
    16b2:	5f e2       	ldi	r21, 0x2F	; 47
    16b4:	cd d2       	rcall	.+1434   	; 0x1c50 <__mulsf3>
    16b6:	a3 01       	movw	r20, r6
    16b8:	92 01       	movw	r18, r4
    16ba:	13 d1       	rcall	.+550    	; 0x18e2 <__addsf3>
    16bc:	06 2f       	mov	r16, r22
    16be:	17 2f       	mov	r17, r23
    16c0:	d8 2f       	mov	r29, r24

	return temp;
    16c2:	c9 2f       	mov	r28, r25
    16c4:	60 2f       	mov	r22, r16
    16c6:	71 2f       	mov	r23, r17
    16c8:	8d 2f       	mov	r24, r29
}
    16ca:	9c 2f       	mov	r25, r28
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	df 90       	pop	r13
    16da:	cf 90       	pop	r12
    16dc:	bf 90       	pop	r11
    16de:	af 90       	pop	r10
    16e0:	9f 90       	pop	r9
    16e2:	8f 90       	pop	r8
    16e4:	7f 90       	pop	r7
    16e6:	6f 90       	pop	r6
    16e8:	5f 90       	pop	r5
    16ea:	4f 90       	pop	r4
    16ec:	08 95       	ret

000016ee <_Z8spi_initv>:

extern volatile uint8_t spiTimerCheck;

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    16ee:	8c b5       	in	r24, 0x2c	; 44
    16f0:	82 65       	ori	r24, 0x52	; 82
    16f2:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
    16f4:	8c b5       	in	r24, 0x2c	; 44
    16f6:	8a 7f       	andi	r24, 0xFA	; 250
    16f8:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDR(SCK_PORT) |= (1 << SCK_PIN) | (1 << MOSI_PIN) ;
    16fa:	84 b1       	in	r24, 0x04	; 4
    16fc:	86 60       	ori	r24, 0x06	; 6
    16fe:	84 b9       	out	0x04, r24	; 4
	DDR(SS_PORT) |= (1  << SS_PIN);
    1700:	20 9a       	sbi	0x04, 0	; 4
	SS_PORT |= (1 << SS_PIN);
    1702:	28 9a       	sbi	0x05, 0	; 5
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    1704:	e7 e0       	ldi	r30, 0x07	; 7
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	80 81       	ld	r24, Z
    170a:	80 6c       	ori	r24, 0xC0	; 192
    170c:	80 83       	st	Z, r24
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
    170e:	e8 e0       	ldi	r30, 0x08	; 8
    1710:	f1 e0       	ldi	r31, 0x01	; 1
    1712:	80 81       	ld	r24, Z
    1714:	80 68       	ori	r24, 0x80	; 128
    1716:	80 83       	st	Z, r24
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
    1718:	80 81       	ld	r24, Z
    171a:	80 64       	ori	r24, 0x40	; 64
    171c:	80 83       	st	Z, r24
    171e:	08 95       	ret

00001720 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1720:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	spiTimerCheck = 0;
    1722:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <spiTimerCheck>
	//wait 1 second in while loop.
	while ((!(SPSR & (1 << SPIF))) && spiTimerCheck <= 1){};
    1726:	0d b4       	in	r0, 0x2d	; 45
    1728:	07 fc       	sbrc	r0, 7
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_Z11spiSendBytec+0x14>
    172c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <spiTimerCheck>
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	c8 f3       	brcs	.-14     	; 0x1726 <_Z11spiSendBytec+0x6>
    1734:	08 95       	ret

00001736 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
    1736:	fc 01       	movw	r30, r24
	num = numm;
    1738:	71 83       	std	Z+1, r23	; 0x01
    173a:	60 83       	st	Z, r22
	digits1 = ii;
    173c:	53 83       	std	Z+3, r21	; 0x03
    173e:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
    1740:	35 83       	std	Z+5, r19	; 0x05
    1742:	24 83       	std	Z+4, r18	; 0x04
    1744:	08 95       	ret

00001746 <_ZN7max721917MAX7219_writeDataEcc>:
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
	}
}

void max7219::MAX7219_writeData(char data_register, char data)
{
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
    174e:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
    1750:	28 81       	ld	r18, Y
    1752:	39 81       	ldd	r19, Y+1	; 0x01
    1754:	21 15       	cp	r18, r1
    1756:	31 05       	cpc	r19, r1
    1758:	21 f0       	breq	.+8      	; 0x1762 <_ZN7max721917MAX7219_writeDataEcc+0x1c>
    175a:	21 30       	cpi	r18, 0x01	; 1
    175c:	31 05       	cpc	r19, r1
    175e:	39 f0       	breq	.+14     	; 0x176e <_ZN7max721917MAX7219_writeDataEcc+0x28>
    1760:	0b c0       	rjmp	.+22     	; 0x1778 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 0:
		MAX7219_LOAD_ON_1(0);
    1762:	e8 e0       	ldi	r30, 0x08	; 8
    1764:	f1 e0       	ldi	r31, 0x01	; 1
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	80 83       	st	Z, r24
		break;
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 1:
		MAX7219_LOAD_ON_2(1);
    176e:	e8 e0       	ldi	r30, 0x08	; 8
    1770:	f1 e0       	ldi	r31, 0x01	; 1
    1772:	80 81       	ld	r24, Z
    1774:	8f 7b       	andi	r24, 0xBF	; 191
    1776:	80 83       	st	Z, r24
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
    1778:	86 2f       	mov	r24, r22
    177a:	d2 df       	rcall	.-92     	; 0x1720 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
    177c:	81 2f       	mov	r24, r17
    177e:	d0 df       	rcall	.-96     	; 0x1720 <_Z11spiSendBytec>
	
	switch(max7219::num){
    1780:	88 81       	ld	r24, Y
    1782:	99 81       	ldd	r25, Y+1	; 0x01
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	19 f0       	breq	.+6      	; 0x178e <_ZN7max721917MAX7219_writeDataEcc+0x48>
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	39 f0       	breq	.+14     	; 0x179a <_ZN7max721917MAX7219_writeDataEcc+0x54>
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
    178e:	e8 e0       	ldi	r30, 0x08	; 8
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	80 81       	ld	r24, Z
    1794:	80 68       	ori	r24, 0x80	; 128
    1796:	80 83       	st	Z, r24
		break;
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
    179a:	e8 e0       	ldi	r30, 0x08	; 8
    179c:	f1 e0       	ldi	r31, 0x01	; 1
    179e:	80 81       	ld	r24, Z
    17a0:	80 64       	ori	r24, 0x40	; 64
    17a2:	80 83       	st	Z, r24
		break;
	}
	
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	08 95       	ret

000017ac <_ZN7max721912MAX7219_initEc>:
void max7219::MAX7219_set(int numm, int ii, int jj) {
	num = numm;
	digits1 = ii;
	digits2 = jj;
}
void max7219::MAX7219_init(char a) {
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
	if(a == REINITIALIZE){
    17b2:	61 30       	cpi	r22, 0x01	; 1
    17b4:	11 f4       	brne	.+4      	; 0x17ba <_ZN7max721912MAX7219_initEc+0xe>
		spi_init();
    17b6:	9b df       	rcall	.-202    	; 0x16ee <_Z8spi_initv>
    17b8:	15 c0       	rjmp	.+42     	; 0x17e4 <_ZN7max721912MAX7219_initEc+0x38>
	}
	else{
		spi_init();
    17ba:	99 df       	rcall	.-206    	; 0x16ee <_Z8spi_initv>
    17bc:	4f ef       	ldi	r20, 0xFF	; 255
		// Decode mode to "Font Code-B"
		max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    17be:	69 e0       	ldi	r22, 0x09	; 9
    17c0:	ce 01       	movw	r24, r28
    17c2:	c1 df       	rcall	.-126    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    17c4:	40 e0       	ldi	r20, 0x00	; 0
		max7219::MAX7219_writeData(MAX7219_MODE_TEST, 0);
    17c6:	6f e0       	ldi	r22, 0x0F	; 15
    17c8:	ce 01       	movw	r24, r28
    17ca:	bd df       	rcall	.-134    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    17cc:	47 e0       	ldi	r20, 0x07	; 7

		// Scan limit runs from 0.
		max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
    17ce:	6b e0       	ldi	r22, 0x0B	; 11
    17d0:	ce 01       	movw	r24, r28
    17d2:	b9 df       	rcall	.-142    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    17d4:	4f ef       	ldi	r20, 0xFF	; 255
		max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0xff);
    17d6:	6a e0       	ldi	r22, 0x0A	; 10
    17d8:	ce 01       	movw	r24, r28
    17da:	b5 df       	rcall	.-150    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    17dc:	41 e0       	ldi	r20, 0x01	; 1
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
    17de:	6c e0       	ldi	r22, 0x0C	; 12
    17e0:	ce 01       	movw	r24, r28
    17e2:	b1 df       	rcall	.-158    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
	}
}
    17e8:	08 95       	ret

000017ea <_ZN7max721920MAX7219_clearDisplayEv>:
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
	}
	
}

void max7219::MAX7219_clearDisplay()
{
    17ee:	ec 01       	movw	r28, r24
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	69 e0       	ldi	r22, 0x09	; 9
    17f4:	a8 df       	rcall	.-176    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(1,das);
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	ce 01       	movw	r24, r28
    17fc:	a4 df       	rcall	.-184    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(2,das);
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	ce 01       	movw	r24, r28
    1804:	a0 df       	rcall	.-192    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(3,das);
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	63 e0       	ldi	r22, 0x03	; 3
    180a:	ce 01       	movw	r24, r28
    180c:	9c df       	rcall	.-200    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(4,das);
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	64 e0       	ldi	r22, 0x04	; 4
    1812:	ce 01       	movw	r24, r28
    1814:	98 df       	rcall	.-208    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(5,das);
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	ce 01       	movw	r24, r28
    181c:	94 df       	rcall	.-216    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(6,das);
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	66 e0       	ldi	r22, 0x06	; 6
    1822:	ce 01       	movw	r24, r28
    1824:	90 df       	rcall	.-224    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(7,das);
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	67 e0       	ldi	r22, 0x07	; 7
    182a:	ce 01       	movw	r24, r28
    182c:	8c df       	rcall	.-232    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(8,das);
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	68 e0       	ldi	r22, 0x08	; 8
    1832:	ce 01       	movw	r24, r28
    1834:	88 df       	rcall	.-240    	; 0x1746 <_ZN7max721917MAX7219_writeDataEcc>
    1836:	df 91       	pop	r29
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
	*/
}
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDR(SS_PORT) |= (1 << SS_PIN);
    183c:	20 9a       	sbi	0x04, 0	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    183e:	8c b5       	in	r24, 0x2c	; 44
    1840:	80 61       	ori	r24, 0x10	; 16
    1842:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1844:	8c b5       	in	r24, 0x2c	; 44
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
    184a:	8c b5       	in	r24, 0x2c	; 44
    184c:	8c 7f       	andi	r24, 0xFC	; 252
    184e:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDR(SCK_PORT) |= (1 << SCK_PIN);
    1850:	21 9a       	sbi	0x04, 1	; 4
    //pinMode(MOSI, OUTPUT);
	DDR(MOSI_PORT) |= (1 << MOSI_PIN);
    1852:	22 9a       	sbi	0x04, 2	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    1854:	ea e0       	ldi	r30, 0x0A	; 10
    1856:	f1 e0       	ldi	r31, 0x01	; 1
    1858:	80 81       	ld	r24, Z
    185a:	85 60       	ori	r24, 0x05	; 5
    185c:	80 83       	st	Z, r24
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    185e:	eb e0       	ldi	r30, 0x0B	; 11
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	80 81       	ld	r24, Z
    1864:	85 60       	ori	r24, 0x05	; 5
    1866:	80 83       	st	Z, r24
    1868:	08 95       	ret

0000186a <_ZN6Timerr11setTimerNumEi>:
    186a:	fc 01       	movw	r30, r24
    186c:	71 83       	std	Z+1, r23	; 0x01
    186e:	60 83       	st	Z, r22
    1870:	08 95       	ret

00001872 <_ZN6Timerr19setCompareInterruptEv>:
    1872:	ef e6       	ldi	r30, 0x6F	; 111
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	82 60       	ori	r24, 0x02	; 2
    187a:	80 83       	st	Z, r24
    187c:	08 95       	ret

0000187e <_ZN6Timerr16startCustomTimerEi>:
    187e:	07 2e       	mov	r0, r23
    1880:	00 0c       	add	r0, r0
    1882:	88 0b       	sbc	r24, r24
    1884:	99 0b       	sbc	r25, r25
    1886:	30 d1       	rcall	.+608    	; 0x1ae8 <__floatsisf>
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	df d1       	rcall	.+958    	; 0x1c50 <__mulsf3>
    1892:	f7 d0       	rcall	.+494    	; 0x1a82 <__fixsfsi>
    1894:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1898:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    189c:	e1 e8       	ldi	r30, 0x81	; 129
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	85 60       	ori	r24, 0x05	; 5
    18a4:	80 83       	st	Z, r24
    18a6:	08 95       	ret

000018a8 <_Z9initUART0v>:
    18a8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    18ac:	87 e6       	ldi	r24, 0x67	; 103
    18ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    18b2:	88 e9       	ldi	r24, 0x98	; 152
    18b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    18b8:	86 e0       	ldi	r24, 0x06	; 6
    18ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    18be:	08 95       	ret

000018c0 <__vector_25>:
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	8f 93       	push	r24
    18cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    18d0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <buffer>
    18d4:	8f 91       	pop	r24
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	0f 90       	pop	r0
    18dc:	1f 90       	pop	r1
    18de:	18 95       	reti

000018e0 <__subsf3>:
    18e0:	50 58       	subi	r21, 0x80	; 128

000018e2 <__addsf3>:
    18e2:	bb 27       	eor	r27, r27
    18e4:	aa 27       	eor	r26, r26
    18e6:	0e d0       	rcall	.+28     	; 0x1904 <__addsf3x>
    18e8:	75 c1       	rjmp	.+746    	; 0x1bd4 <__fp_round>
    18ea:	66 d1       	rcall	.+716    	; 0x1bb8 <__fp_pscA>
    18ec:	30 f0       	brcs	.+12     	; 0x18fa <__addsf3+0x18>
    18ee:	6b d1       	rcall	.+726    	; 0x1bc6 <__fp_pscB>
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <__addsf3+0x18>
    18f2:	31 f4       	brne	.+12     	; 0x1900 <__addsf3+0x1e>
    18f4:	9f 3f       	cpi	r25, 0xFF	; 255
    18f6:	11 f4       	brne	.+4      	; 0x18fc <__addsf3+0x1a>
    18f8:	1e f4       	brtc	.+6      	; 0x1900 <__addsf3+0x1e>
    18fa:	5b c1       	rjmp	.+694    	; 0x1bb2 <__fp_nan>
    18fc:	0e f4       	brtc	.+2      	; 0x1900 <__addsf3+0x1e>
    18fe:	e0 95       	com	r30
    1900:	e7 fb       	bst	r30, 7
    1902:	51 c1       	rjmp	.+674    	; 0x1ba6 <__fp_inf>

00001904 <__addsf3x>:
    1904:	e9 2f       	mov	r30, r25
    1906:	77 d1       	rcall	.+750    	; 0x1bf6 <__fp_split3>
    1908:	80 f3       	brcs	.-32     	; 0x18ea <__addsf3+0x8>
    190a:	ba 17       	cp	r27, r26
    190c:	62 07       	cpc	r22, r18
    190e:	73 07       	cpc	r23, r19
    1910:	84 07       	cpc	r24, r20
    1912:	95 07       	cpc	r25, r21
    1914:	18 f0       	brcs	.+6      	; 0x191c <__addsf3x+0x18>
    1916:	71 f4       	brne	.+28     	; 0x1934 <__addsf3x+0x30>
    1918:	9e f5       	brtc	.+102    	; 0x1980 <__addsf3x+0x7c>
    191a:	8f c1       	rjmp	.+798    	; 0x1c3a <__fp_zero>
    191c:	0e f4       	brtc	.+2      	; 0x1920 <__addsf3x+0x1c>
    191e:	e0 95       	com	r30
    1920:	0b 2e       	mov	r0, r27
    1922:	ba 2f       	mov	r27, r26
    1924:	a0 2d       	mov	r26, r0
    1926:	0b 01       	movw	r0, r22
    1928:	b9 01       	movw	r22, r18
    192a:	90 01       	movw	r18, r0
    192c:	0c 01       	movw	r0, r24
    192e:	ca 01       	movw	r24, r20
    1930:	a0 01       	movw	r20, r0
    1932:	11 24       	eor	r1, r1
    1934:	ff 27       	eor	r31, r31
    1936:	59 1b       	sub	r21, r25
    1938:	99 f0       	breq	.+38     	; 0x1960 <__addsf3x+0x5c>
    193a:	59 3f       	cpi	r21, 0xF9	; 249
    193c:	50 f4       	brcc	.+20     	; 0x1952 <__addsf3x+0x4e>
    193e:	50 3e       	cpi	r21, 0xE0	; 224
    1940:	68 f1       	brcs	.+90     	; 0x199c <__addsf3x+0x98>
    1942:	1a 16       	cp	r1, r26
    1944:	f0 40       	sbci	r31, 0x00	; 0
    1946:	a2 2f       	mov	r26, r18
    1948:	23 2f       	mov	r18, r19
    194a:	34 2f       	mov	r19, r20
    194c:	44 27       	eor	r20, r20
    194e:	58 5f       	subi	r21, 0xF8	; 248
    1950:	f3 cf       	rjmp	.-26     	; 0x1938 <__addsf3x+0x34>
    1952:	46 95       	lsr	r20
    1954:	37 95       	ror	r19
    1956:	27 95       	ror	r18
    1958:	a7 95       	ror	r26
    195a:	f0 40       	sbci	r31, 0x00	; 0
    195c:	53 95       	inc	r21
    195e:	c9 f7       	brne	.-14     	; 0x1952 <__addsf3x+0x4e>
    1960:	7e f4       	brtc	.+30     	; 0x1980 <__addsf3x+0x7c>
    1962:	1f 16       	cp	r1, r31
    1964:	ba 0b       	sbc	r27, r26
    1966:	62 0b       	sbc	r22, r18
    1968:	73 0b       	sbc	r23, r19
    196a:	84 0b       	sbc	r24, r20
    196c:	ba f0       	brmi	.+46     	; 0x199c <__addsf3x+0x98>
    196e:	91 50       	subi	r25, 0x01	; 1
    1970:	a1 f0       	breq	.+40     	; 0x199a <__addsf3x+0x96>
    1972:	ff 0f       	add	r31, r31
    1974:	bb 1f       	adc	r27, r27
    1976:	66 1f       	adc	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	c2 f7       	brpl	.-16     	; 0x196e <__addsf3x+0x6a>
    197e:	0e c0       	rjmp	.+28     	; 0x199c <__addsf3x+0x98>
    1980:	ba 0f       	add	r27, r26
    1982:	62 1f       	adc	r22, r18
    1984:	73 1f       	adc	r23, r19
    1986:	84 1f       	adc	r24, r20
    1988:	48 f4       	brcc	.+18     	; 0x199c <__addsf3x+0x98>
    198a:	87 95       	ror	r24
    198c:	77 95       	ror	r23
    198e:	67 95       	ror	r22
    1990:	b7 95       	ror	r27
    1992:	f7 95       	ror	r31
    1994:	9e 3f       	cpi	r25, 0xFE	; 254
    1996:	08 f0       	brcs	.+2      	; 0x199a <__addsf3x+0x96>
    1998:	b3 cf       	rjmp	.-154    	; 0x1900 <__addsf3+0x1e>
    199a:	93 95       	inc	r25
    199c:	88 0f       	add	r24, r24
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <__addsf3x+0x9e>
    19a0:	99 27       	eor	r25, r25
    19a2:	ee 0f       	add	r30, r30
    19a4:	97 95       	ror	r25
    19a6:	87 95       	ror	r24
    19a8:	08 95       	ret

000019aa <__cmpsf2>:
    19aa:	d9 d0       	rcall	.+434    	; 0x1b5e <__fp_cmp>
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__cmpsf2+0x6>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	08 95       	ret

000019b2 <__divsf3>:
    19b2:	0c d0       	rcall	.+24     	; 0x19cc <__divsf3x>
    19b4:	0f c1       	rjmp	.+542    	; 0x1bd4 <__fp_round>
    19b6:	07 d1       	rcall	.+526    	; 0x1bc6 <__fp_pscB>
    19b8:	40 f0       	brcs	.+16     	; 0x19ca <__divsf3+0x18>
    19ba:	fe d0       	rcall	.+508    	; 0x1bb8 <__fp_pscA>
    19bc:	30 f0       	brcs	.+12     	; 0x19ca <__divsf3+0x18>
    19be:	21 f4       	brne	.+8      	; 0x19c8 <__divsf3+0x16>
    19c0:	5f 3f       	cpi	r21, 0xFF	; 255
    19c2:	19 f0       	breq	.+6      	; 0x19ca <__divsf3+0x18>
    19c4:	f0 c0       	rjmp	.+480    	; 0x1ba6 <__fp_inf>
    19c6:	51 11       	cpse	r21, r1
    19c8:	39 c1       	rjmp	.+626    	; 0x1c3c <__fp_szero>
    19ca:	f3 c0       	rjmp	.+486    	; 0x1bb2 <__fp_nan>

000019cc <__divsf3x>:
    19cc:	14 d1       	rcall	.+552    	; 0x1bf6 <__fp_split3>
    19ce:	98 f3       	brcs	.-26     	; 0x19b6 <__divsf3+0x4>

000019d0 <__divsf3_pse>:
    19d0:	99 23       	and	r25, r25
    19d2:	c9 f3       	breq	.-14     	; 0x19c6 <__divsf3+0x14>
    19d4:	55 23       	and	r21, r21
    19d6:	b1 f3       	breq	.-20     	; 0x19c4 <__divsf3+0x12>
    19d8:	95 1b       	sub	r25, r21
    19da:	55 0b       	sbc	r21, r21
    19dc:	bb 27       	eor	r27, r27
    19de:	aa 27       	eor	r26, r26
    19e0:	62 17       	cp	r22, r18
    19e2:	73 07       	cpc	r23, r19
    19e4:	84 07       	cpc	r24, r20
    19e6:	38 f0       	brcs	.+14     	; 0x19f6 <__divsf3_pse+0x26>
    19e8:	9f 5f       	subi	r25, 0xFF	; 255
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	44 1f       	adc	r20, r20
    19f2:	aa 1f       	adc	r26, r26
    19f4:	a9 f3       	breq	.-22     	; 0x19e0 <__divsf3_pse+0x10>
    19f6:	33 d0       	rcall	.+102    	; 0x1a5e <__divsf3_pse+0x8e>
    19f8:	0e 2e       	mov	r0, r30
    19fa:	3a f0       	brmi	.+14     	; 0x1a0a <__divsf3_pse+0x3a>
    19fc:	e0 e8       	ldi	r30, 0x80	; 128
    19fe:	30 d0       	rcall	.+96     	; 0x1a60 <__divsf3_pse+0x90>
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	e6 95       	lsr	r30
    1a06:	00 1c       	adc	r0, r0
    1a08:	ca f7       	brpl	.-14     	; 0x19fc <__divsf3_pse+0x2c>
    1a0a:	29 d0       	rcall	.+82     	; 0x1a5e <__divsf3_pse+0x8e>
    1a0c:	fe 2f       	mov	r31, r30
    1a0e:	27 d0       	rcall	.+78     	; 0x1a5e <__divsf3_pse+0x8e>
    1a10:	66 0f       	add	r22, r22
    1a12:	77 1f       	adc	r23, r23
    1a14:	88 1f       	adc	r24, r24
    1a16:	bb 1f       	adc	r27, r27
    1a18:	26 17       	cp	r18, r22
    1a1a:	37 07       	cpc	r19, r23
    1a1c:	48 07       	cpc	r20, r24
    1a1e:	ab 07       	cpc	r26, r27
    1a20:	b0 e8       	ldi	r27, 0x80	; 128
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <__divsf3_pse+0x56>
    1a24:	bb 0b       	sbc	r27, r27
    1a26:	80 2d       	mov	r24, r0
    1a28:	bf 01       	movw	r22, r30
    1a2a:	ff 27       	eor	r31, r31
    1a2c:	93 58       	subi	r25, 0x83	; 131
    1a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a30:	2a f0       	brmi	.+10     	; 0x1a3c <__divsf3_pse+0x6c>
    1a32:	9e 3f       	cpi	r25, 0xFE	; 254
    1a34:	51 05       	cpc	r21, r1
    1a36:	68 f0       	brcs	.+26     	; 0x1a52 <__divsf3_pse+0x82>
    1a38:	b6 c0       	rjmp	.+364    	; 0x1ba6 <__fp_inf>
    1a3a:	00 c1       	rjmp	.+512    	; 0x1c3c <__fp_szero>
    1a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3e:	ec f3       	brlt	.-6      	; 0x1a3a <__divsf3_pse+0x6a>
    1a40:	98 3e       	cpi	r25, 0xE8	; 232
    1a42:	dc f3       	brlt	.-10     	; 0x1a3a <__divsf3_pse+0x6a>
    1a44:	86 95       	lsr	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	b7 95       	ror	r27
    1a4c:	f7 95       	ror	r31
    1a4e:	9f 5f       	subi	r25, 0xFF	; 255
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <__divsf3_pse+0x74>
    1a52:	88 0f       	add	r24, r24
    1a54:	91 1d       	adc	r25, r1
    1a56:	96 95       	lsr	r25
    1a58:	87 95       	ror	r24
    1a5a:	97 f9       	bld	r25, 7
    1a5c:	08 95       	ret
    1a5e:	e1 e0       	ldi	r30, 0x01	; 1
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	bb 1f       	adc	r27, r27
    1a68:	62 17       	cp	r22, r18
    1a6a:	73 07       	cpc	r23, r19
    1a6c:	84 07       	cpc	r24, r20
    1a6e:	ba 07       	cpc	r27, r26
    1a70:	20 f0       	brcs	.+8      	; 0x1a7a <__divsf3_pse+0xaa>
    1a72:	62 1b       	sub	r22, r18
    1a74:	73 0b       	sbc	r23, r19
    1a76:	84 0b       	sbc	r24, r20
    1a78:	ba 0b       	sbc	r27, r26
    1a7a:	ee 1f       	adc	r30, r30
    1a7c:	88 f7       	brcc	.-30     	; 0x1a60 <__divsf3_pse+0x90>
    1a7e:	e0 95       	com	r30
    1a80:	08 95       	ret

00001a82 <__fixsfsi>:
    1a82:	04 d0       	rcall	.+8      	; 0x1a8c <__fixunssfsi>
    1a84:	68 94       	set
    1a86:	b1 11       	cpse	r27, r1
    1a88:	d9 c0       	rjmp	.+434    	; 0x1c3c <__fp_szero>
    1a8a:	08 95       	ret

00001a8c <__fixunssfsi>:
    1a8c:	bc d0       	rcall	.+376    	; 0x1c06 <__fp_splitA>
    1a8e:	88 f0       	brcs	.+34     	; 0x1ab2 <__fixunssfsi+0x26>
    1a90:	9f 57       	subi	r25, 0x7F	; 127
    1a92:	90 f0       	brcs	.+36     	; 0x1ab8 <__fixunssfsi+0x2c>
    1a94:	b9 2f       	mov	r27, r25
    1a96:	99 27       	eor	r25, r25
    1a98:	b7 51       	subi	r27, 0x17	; 23
    1a9a:	a0 f0       	brcs	.+40     	; 0x1ac4 <__fixunssfsi+0x38>
    1a9c:	d1 f0       	breq	.+52     	; 0x1ad2 <__fixunssfsi+0x46>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	1a f0       	brmi	.+6      	; 0x1aae <__fixunssfsi+0x22>
    1aa8:	ba 95       	dec	r27
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__fixunssfsi+0x12>
    1aac:	12 c0       	rjmp	.+36     	; 0x1ad2 <__fixunssfsi+0x46>
    1aae:	b1 30       	cpi	r27, 0x01	; 1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <__fixunssfsi+0x46>
    1ab2:	c3 d0       	rcall	.+390    	; 0x1c3a <__fp_zero>
    1ab4:	b1 e0       	ldi	r27, 0x01	; 1
    1ab6:	08 95       	ret
    1ab8:	c0 c0       	rjmp	.+384    	; 0x1c3a <__fp_zero>
    1aba:	67 2f       	mov	r22, r23
    1abc:	78 2f       	mov	r23, r24
    1abe:	88 27       	eor	r24, r24
    1ac0:	b8 5f       	subi	r27, 0xF8	; 248
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <__fixunssfsi+0x46>
    1ac4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ac6:	cc f3       	brlt	.-14     	; 0x1aba <__fixunssfsi+0x2e>
    1ac8:	86 95       	lsr	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b3 95       	inc	r27
    1ad0:	d9 f7       	brne	.-10     	; 0x1ac8 <__fixunssfsi+0x3c>
    1ad2:	3e f4       	brtc	.+14     	; 0x1ae2 <__fixunssfsi+0x56>
    1ad4:	90 95       	com	r25
    1ad6:	80 95       	com	r24
    1ad8:	70 95       	com	r23
    1ada:	61 95       	neg	r22
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	08 95       	ret

00001ae4 <__floatunsisf>:
    1ae4:	e8 94       	clt
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <__floatsisf+0x12>

00001ae8 <__floatsisf>:
    1ae8:	97 fb       	bst	r25, 7
    1aea:	3e f4       	brtc	.+14     	; 0x1afa <__floatsisf+0x12>
    1aec:	90 95       	com	r25
    1aee:	80 95       	com	r24
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	99 23       	and	r25, r25
    1afc:	a9 f0       	breq	.+42     	; 0x1b28 <__floatsisf+0x40>
    1afe:	f9 2f       	mov	r31, r25
    1b00:	96 e9       	ldi	r25, 0x96	; 150
    1b02:	bb 27       	eor	r27, r27
    1b04:	93 95       	inc	r25
    1b06:	f6 95       	lsr	r31
    1b08:	87 95       	ror	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b7 95       	ror	r27
    1b10:	f1 11       	cpse	r31, r1
    1b12:	f8 cf       	rjmp	.-16     	; 0x1b04 <__floatsisf+0x1c>
    1b14:	fa f4       	brpl	.+62     	; 0x1b54 <__floatsisf+0x6c>
    1b16:	bb 0f       	add	r27, r27
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <__floatsisf+0x36>
    1b1a:	60 ff       	sbrs	r22, 0
    1b1c:	1b c0       	rjmp	.+54     	; 0x1b54 <__floatsisf+0x6c>
    1b1e:	6f 5f       	subi	r22, 0xFF	; 255
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	8f 4f       	sbci	r24, 0xFF	; 255
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <__floatsisf+0x6c>
    1b28:	88 23       	and	r24, r24
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <__floatsisf+0x48>
    1b2c:	96 e9       	ldi	r25, 0x96	; 150
    1b2e:	11 c0       	rjmp	.+34     	; 0x1b52 <__floatsisf+0x6a>
    1b30:	77 23       	and	r23, r23
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <__floatsisf+0x54>
    1b34:	9e e8       	ldi	r25, 0x8E	; 142
    1b36:	87 2f       	mov	r24, r23
    1b38:	76 2f       	mov	r23, r22
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <__floatsisf+0x5e>
    1b3c:	66 23       	and	r22, r22
    1b3e:	71 f0       	breq	.+28     	; 0x1b5c <__floatsisf+0x74>
    1b40:	96 e8       	ldi	r25, 0x86	; 134
    1b42:	86 2f       	mov	r24, r22
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	2a f0       	brmi	.+10     	; 0x1b54 <__floatsisf+0x6c>
    1b4a:	9a 95       	dec	r25
    1b4c:	66 0f       	add	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	da f7       	brpl	.-10     	; 0x1b4a <__floatsisf+0x62>
    1b54:	88 0f       	add	r24, r24
    1b56:	96 95       	lsr	r25
    1b58:	87 95       	ror	r24
    1b5a:	97 f9       	bld	r25, 7
    1b5c:	08 95       	ret

00001b5e <__fp_cmp>:
    1b5e:	99 0f       	add	r25, r25
    1b60:	00 08       	sbc	r0, r0
    1b62:	55 0f       	add	r21, r21
    1b64:	aa 0b       	sbc	r26, r26
    1b66:	e0 e8       	ldi	r30, 0x80	; 128
    1b68:	fe ef       	ldi	r31, 0xFE	; 254
    1b6a:	16 16       	cp	r1, r22
    1b6c:	17 06       	cpc	r1, r23
    1b6e:	e8 07       	cpc	r30, r24
    1b70:	f9 07       	cpc	r31, r25
    1b72:	c0 f0       	brcs	.+48     	; 0x1ba4 <__fp_cmp+0x46>
    1b74:	12 16       	cp	r1, r18
    1b76:	13 06       	cpc	r1, r19
    1b78:	e4 07       	cpc	r30, r20
    1b7a:	f5 07       	cpc	r31, r21
    1b7c:	98 f0       	brcs	.+38     	; 0x1ba4 <__fp_cmp+0x46>
    1b7e:	62 1b       	sub	r22, r18
    1b80:	73 0b       	sbc	r23, r19
    1b82:	84 0b       	sbc	r24, r20
    1b84:	95 0b       	sbc	r25, r21
    1b86:	39 f4       	brne	.+14     	; 0x1b96 <__fp_cmp+0x38>
    1b88:	0a 26       	eor	r0, r26
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <__fp_cmp+0x46>
    1b8c:	23 2b       	or	r18, r19
    1b8e:	24 2b       	or	r18, r20
    1b90:	25 2b       	or	r18, r21
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <__fp_cmp+0x3e>
    1b94:	08 95       	ret
    1b96:	0a 26       	eor	r0, r26
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <__fp_cmp+0x3e>
    1b9a:	a1 40       	sbci	r26, 0x01	; 1
    1b9c:	a6 95       	lsr	r26
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	81 1d       	adc	r24, r1
    1ba2:	81 1d       	adc	r24, r1
    1ba4:	08 95       	ret

00001ba6 <__fp_inf>:
    1ba6:	97 f9       	bld	r25, 7
    1ba8:	9f 67       	ori	r25, 0x7F	; 127
    1baa:	80 e8       	ldi	r24, 0x80	; 128
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	08 95       	ret

00001bb2 <__fp_nan>:
    1bb2:	9f ef       	ldi	r25, 0xFF	; 255
    1bb4:	80 ec       	ldi	r24, 0xC0	; 192
    1bb6:	08 95       	ret

00001bb8 <__fp_pscA>:
    1bb8:	00 24       	eor	r0, r0
    1bba:	0a 94       	dec	r0
    1bbc:	16 16       	cp	r1, r22
    1bbe:	17 06       	cpc	r1, r23
    1bc0:	18 06       	cpc	r1, r24
    1bc2:	09 06       	cpc	r0, r25
    1bc4:	08 95       	ret

00001bc6 <__fp_pscB>:
    1bc6:	00 24       	eor	r0, r0
    1bc8:	0a 94       	dec	r0
    1bca:	12 16       	cp	r1, r18
    1bcc:	13 06       	cpc	r1, r19
    1bce:	14 06       	cpc	r1, r20
    1bd0:	05 06       	cpc	r0, r21
    1bd2:	08 95       	ret

00001bd4 <__fp_round>:
    1bd4:	09 2e       	mov	r0, r25
    1bd6:	03 94       	inc	r0
    1bd8:	00 0c       	add	r0, r0
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <__fp_round+0xc>
    1bdc:	88 23       	and	r24, r24
    1bde:	52 f0       	brmi	.+20     	; 0x1bf4 <__fp_round+0x20>
    1be0:	bb 0f       	add	r27, r27
    1be2:	40 f4       	brcc	.+16     	; 0x1bf4 <__fp_round+0x20>
    1be4:	bf 2b       	or	r27, r31
    1be6:	11 f4       	brne	.+4      	; 0x1bec <__fp_round+0x18>
    1be8:	60 ff       	sbrs	r22, 0
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <__fp_round+0x20>
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	08 95       	ret

00001bf6 <__fp_split3>:
    1bf6:	57 fd       	sbrc	r21, 7
    1bf8:	90 58       	subi	r25, 0x80	; 128
    1bfa:	44 0f       	add	r20, r20
    1bfc:	55 1f       	adc	r21, r21
    1bfe:	59 f0       	breq	.+22     	; 0x1c16 <__fp_splitA+0x10>
    1c00:	5f 3f       	cpi	r21, 0xFF	; 255
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <__fp_splitA+0x1a>
    1c04:	47 95       	ror	r20

00001c06 <__fp_splitA>:
    1c06:	88 0f       	add	r24, r24
    1c08:	97 fb       	bst	r25, 7
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <__fp_splitA+0x20>
    1c0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c10:	79 f0       	breq	.+30     	; 0x1c30 <__fp_splitA+0x2a>
    1c12:	87 95       	ror	r24
    1c14:	08 95       	ret
    1c16:	12 16       	cp	r1, r18
    1c18:	13 06       	cpc	r1, r19
    1c1a:	14 06       	cpc	r1, r20
    1c1c:	55 1f       	adc	r21, r21
    1c1e:	f2 cf       	rjmp	.-28     	; 0x1c04 <__fp_split3+0xe>
    1c20:	46 95       	lsr	r20
    1c22:	f1 df       	rcall	.-30     	; 0x1c06 <__fp_splitA>
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <__fp_splitA+0x30>
    1c26:	16 16       	cp	r1, r22
    1c28:	17 06       	cpc	r1, r23
    1c2a:	18 06       	cpc	r1, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	f1 cf       	rjmp	.-30     	; 0x1c12 <__fp_splitA+0xc>
    1c30:	86 95       	lsr	r24
    1c32:	71 05       	cpc	r23, r1
    1c34:	61 05       	cpc	r22, r1
    1c36:	08 94       	sec
    1c38:	08 95       	ret

00001c3a <__fp_zero>:
    1c3a:	e8 94       	clt

00001c3c <__fp_szero>:
    1c3c:	bb 27       	eor	r27, r27
    1c3e:	66 27       	eor	r22, r22
    1c40:	77 27       	eor	r23, r23
    1c42:	cb 01       	movw	r24, r22
    1c44:	97 f9       	bld	r25, 7
    1c46:	08 95       	ret

00001c48 <__gesf2>:
    1c48:	8a df       	rcall	.-236    	; 0x1b5e <__fp_cmp>
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <__gesf2+0x6>
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	08 95       	ret

00001c50 <__mulsf3>:
    1c50:	0b d0       	rcall	.+22     	; 0x1c68 <__mulsf3x>
    1c52:	c0 cf       	rjmp	.-128    	; 0x1bd4 <__fp_round>
    1c54:	b1 df       	rcall	.-158    	; 0x1bb8 <__fp_pscA>
    1c56:	28 f0       	brcs	.+10     	; 0x1c62 <__mulsf3+0x12>
    1c58:	b6 df       	rcall	.-148    	; 0x1bc6 <__fp_pscB>
    1c5a:	18 f0       	brcs	.+6      	; 0x1c62 <__mulsf3+0x12>
    1c5c:	95 23       	and	r25, r21
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <__mulsf3+0x12>
    1c60:	a2 cf       	rjmp	.-188    	; 0x1ba6 <__fp_inf>
    1c62:	a7 cf       	rjmp	.-178    	; 0x1bb2 <__fp_nan>
    1c64:	11 24       	eor	r1, r1
    1c66:	ea cf       	rjmp	.-44     	; 0x1c3c <__fp_szero>

00001c68 <__mulsf3x>:
    1c68:	c6 df       	rcall	.-116    	; 0x1bf6 <__fp_split3>
    1c6a:	a0 f3       	brcs	.-24     	; 0x1c54 <__mulsf3+0x4>

00001c6c <__mulsf3_pse>:
    1c6c:	95 9f       	mul	r25, r21
    1c6e:	d1 f3       	breq	.-12     	; 0x1c64 <__mulsf3+0x14>
    1c70:	95 0f       	add	r25, r21
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	55 1f       	adc	r21, r21
    1c76:	62 9f       	mul	r22, r18
    1c78:	f0 01       	movw	r30, r0
    1c7a:	72 9f       	mul	r23, r18
    1c7c:	bb 27       	eor	r27, r27
    1c7e:	f0 0d       	add	r31, r0
    1c80:	b1 1d       	adc	r27, r1
    1c82:	63 9f       	mul	r22, r19
    1c84:	aa 27       	eor	r26, r26
    1c86:	f0 0d       	add	r31, r0
    1c88:	b1 1d       	adc	r27, r1
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	64 9f       	mul	r22, r20
    1c8e:	66 27       	eor	r22, r22
    1c90:	b0 0d       	add	r27, r0
    1c92:	a1 1d       	adc	r26, r1
    1c94:	66 1f       	adc	r22, r22
    1c96:	82 9f       	mul	r24, r18
    1c98:	22 27       	eor	r18, r18
    1c9a:	b0 0d       	add	r27, r0
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	62 1f       	adc	r22, r18
    1ca0:	73 9f       	mul	r23, r19
    1ca2:	b0 0d       	add	r27, r0
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	62 1f       	adc	r22, r18
    1ca8:	83 9f       	mul	r24, r19
    1caa:	a0 0d       	add	r26, r0
    1cac:	61 1d       	adc	r22, r1
    1cae:	22 1f       	adc	r18, r18
    1cb0:	74 9f       	mul	r23, r20
    1cb2:	33 27       	eor	r19, r19
    1cb4:	a0 0d       	add	r26, r0
    1cb6:	61 1d       	adc	r22, r1
    1cb8:	23 1f       	adc	r18, r19
    1cba:	84 9f       	mul	r24, r20
    1cbc:	60 0d       	add	r22, r0
    1cbe:	21 1d       	adc	r18, r1
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	76 2f       	mov	r23, r22
    1cc4:	6a 2f       	mov	r22, r26
    1cc6:	11 24       	eor	r1, r1
    1cc8:	9f 57       	subi	r25, 0x7F	; 127
    1cca:	50 40       	sbci	r21, 0x00	; 0
    1ccc:	8a f0       	brmi	.+34     	; 0x1cf0 <__mulsf3_pse+0x84>
    1cce:	e1 f0       	breq	.+56     	; 0x1d08 <__mulsf3_pse+0x9c>
    1cd0:	88 23       	and	r24, r24
    1cd2:	4a f0       	brmi	.+18     	; 0x1ce6 <__mulsf3_pse+0x7a>
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	66 1f       	adc	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__mulsf3_pse+0x64>
    1ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce8:	51 05       	cpc	r21, r1
    1cea:	70 f0       	brcs	.+28     	; 0x1d08 <__mulsf3_pse+0x9c>
    1cec:	5c cf       	rjmp	.-328    	; 0x1ba6 <__fp_inf>
    1cee:	a6 cf       	rjmp	.-180    	; 0x1c3c <__fp_szero>
    1cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf2:	ec f3       	brlt	.-6      	; 0x1cee <__mulsf3_pse+0x82>
    1cf4:	98 3e       	cpi	r25, 0xE8	; 232
    1cf6:	dc f3       	brlt	.-10     	; 0x1cee <__mulsf3_pse+0x82>
    1cf8:	86 95       	lsr	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b7 95       	ror	r27
    1d00:	f7 95       	ror	r31
    1d02:	e7 95       	ror	r30
    1d04:	9f 5f       	subi	r25, 0xFF	; 255
    1d06:	c1 f7       	brne	.-16     	; 0x1cf8 <__mulsf3_pse+0x8c>
    1d08:	fe 2b       	or	r31, r30
    1d0a:	88 0f       	add	r24, r24
    1d0c:	91 1d       	adc	r25, r1
    1d0e:	96 95       	lsr	r25
    1d10:	87 95       	ror	r24
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <__mulsf3_pse+0xb0>
    1d18:	0e f4       	brtc	.+2      	; 0x1d1c <__mulsf3_pse+0xb0>
    1d1a:	4b cf       	rjmp	.-362    	; 0x1bb2 <__fp_nan>
    1d1c:	3e c0       	rjmp	.+124    	; 0x1d9a <__fp_mpack>

00001d1e <sqrt>:
    1d1e:	73 df       	rcall	.-282    	; 0x1c06 <__fp_splitA>
    1d20:	d0 f3       	brcs	.-12     	; 0x1d16 <__mulsf3_pse+0xaa>
    1d22:	99 23       	and	r25, r25
    1d24:	d9 f3       	breq	.-10     	; 0x1d1c <__mulsf3_pse+0xb0>
    1d26:	ce f3       	brts	.-14     	; 0x1d1a <__mulsf3_pse+0xae>
    1d28:	9f 57       	subi	r25, 0x7F	; 127
    1d2a:	55 0b       	sbc	r21, r21
    1d2c:	87 ff       	sbrs	r24, 7
    1d2e:	43 d0       	rcall	.+134    	; 0x1db6 <__fp_norm2>
    1d30:	00 24       	eor	r0, r0
    1d32:	a0 e6       	ldi	r26, 0x60	; 96
    1d34:	40 ea       	ldi	r20, 0xA0	; 160
    1d36:	90 01       	movw	r18, r0
    1d38:	80 58       	subi	r24, 0x80	; 128
    1d3a:	56 95       	lsr	r21
    1d3c:	97 95       	ror	r25
    1d3e:	28 f4       	brcc	.+10     	; 0x1d4a <sqrt+0x2c>
    1d40:	80 5c       	subi	r24, 0xC0	; 192
    1d42:	66 0f       	add	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <sqrt+0x34>
    1d4a:	26 17       	cp	r18, r22
    1d4c:	37 07       	cpc	r19, r23
    1d4e:	48 07       	cpc	r20, r24
    1d50:	30 f4       	brcc	.+12     	; 0x1d5e <sqrt+0x40>
    1d52:	62 1b       	sub	r22, r18
    1d54:	73 0b       	sbc	r23, r19
    1d56:	84 0b       	sbc	r24, r20
    1d58:	20 29       	or	r18, r0
    1d5a:	31 29       	or	r19, r1
    1d5c:	4a 2b       	or	r20, r26
    1d5e:	a6 95       	lsr	r26
    1d60:	17 94       	ror	r1
    1d62:	07 94       	ror	r0
    1d64:	20 25       	eor	r18, r0
    1d66:	31 25       	eor	r19, r1
    1d68:	4a 27       	eor	r20, r26
    1d6a:	58 f7       	brcc	.-42     	; 0x1d42 <sqrt+0x24>
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	20 f0       	brcs	.+8      	; 0x1d7c <sqrt+0x5e>
    1d74:	26 17       	cp	r18, r22
    1d76:	37 07       	cpc	r19, r23
    1d78:	48 07       	cpc	r20, r24
    1d7a:	30 f4       	brcc	.+12     	; 0x1d88 <sqrt+0x6a>
    1d7c:	62 0b       	sbc	r22, r18
    1d7e:	73 0b       	sbc	r23, r19
    1d80:	84 0b       	sbc	r24, r20
    1d82:	20 0d       	add	r18, r0
    1d84:	31 1d       	adc	r19, r1
    1d86:	41 1d       	adc	r20, r1
    1d88:	a0 95       	com	r26
    1d8a:	81 f7       	brne	.-32     	; 0x1d6c <sqrt+0x4e>
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	84 2f       	mov	r24, r20
    1d90:	91 58       	subi	r25, 0x81	; 129
    1d92:	88 0f       	add	r24, r24
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	08 95       	ret

00001d9a <__fp_mpack>:
    1d9a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9c:	31 f0       	breq	.+12     	; 0x1daa <__fp_mpack_finite+0xc>

00001d9e <__fp_mpack_finite>:
    1d9e:	91 50       	subi	r25, 0x01	; 1
    1da0:	20 f4       	brcc	.+8      	; 0x1daa <__fp_mpack_finite+0xc>
    1da2:	87 95       	ror	r24
    1da4:	77 95       	ror	r23
    1da6:	67 95       	ror	r22
    1da8:	b7 95       	ror	r27
    1daa:	88 0f       	add	r24, r24
    1dac:	91 1d       	adc	r25, r1
    1dae:	96 95       	lsr	r25
    1db0:	87 95       	ror	r24
    1db2:	97 f9       	bld	r25, 7
    1db4:	08 95       	ret

00001db6 <__fp_norm2>:
    1db6:	91 50       	subi	r25, 0x01	; 1
    1db8:	50 40       	sbci	r21, 0x00	; 0
    1dba:	66 0f       	add	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	d2 f7       	brpl	.-12     	; 0x1db6 <__fp_norm2>
    1dc2:	08 95       	ret

00001dc4 <__divmodhi4>:
    1dc4:	97 fb       	bst	r25, 7
    1dc6:	07 2e       	mov	r0, r23
    1dc8:	16 f4       	brtc	.+4      	; 0x1dce <__divmodhi4+0xa>
    1dca:	00 94       	com	r0
    1dcc:	06 d0       	rcall	.+12     	; 0x1dda <__divmodhi4_neg1>
    1dce:	77 fd       	sbrc	r23, 7
    1dd0:	08 d0       	rcall	.+16     	; 0x1de2 <__divmodhi4_neg2>
    1dd2:	0b d0       	rcall	.+22     	; 0x1dea <__udivmodhi4>
    1dd4:	07 fc       	sbrc	r0, 7
    1dd6:	05 d0       	rcall	.+10     	; 0x1de2 <__divmodhi4_neg2>
    1dd8:	3e f4       	brtc	.+14     	; 0x1de8 <__divmodhi4_exit>

00001dda <__divmodhi4_neg1>:
    1dda:	90 95       	com	r25
    1ddc:	81 95       	neg	r24
    1dde:	9f 4f       	sbci	r25, 0xFF	; 255
    1de0:	08 95       	ret

00001de2 <__divmodhi4_neg2>:
    1de2:	70 95       	com	r23
    1de4:	61 95       	neg	r22
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255

00001de8 <__divmodhi4_exit>:
    1de8:	08 95       	ret

00001dea <__udivmodhi4>:
    1dea:	aa 1b       	sub	r26, r26
    1dec:	bb 1b       	sub	r27, r27
    1dee:	51 e1       	ldi	r21, 0x11	; 17
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <__udivmodhi4_ep>

00001df2 <__udivmodhi4_loop>:
    1df2:	aa 1f       	adc	r26, r26
    1df4:	bb 1f       	adc	r27, r27
    1df6:	a6 17       	cp	r26, r22
    1df8:	b7 07       	cpc	r27, r23
    1dfa:	10 f0       	brcs	.+4      	; 0x1e00 <__udivmodhi4_ep>
    1dfc:	a6 1b       	sub	r26, r22
    1dfe:	b7 0b       	sbc	r27, r23

00001e00 <__udivmodhi4_ep>:
    1e00:	88 1f       	adc	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	5a 95       	dec	r21
    1e06:	a9 f7       	brne	.-22     	; 0x1df2 <__udivmodhi4_loop>
    1e08:	80 95       	com	r24
    1e0a:	90 95       	com	r25
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	08 95       	ret

00001e12 <__tablejump2__>:
    1e12:	ee 0f       	add	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	88 1f       	adc	r24, r24
    1e18:	8b bf       	out	0x3b, r24	; 59
    1e1a:	07 90       	elpm	r0, Z+
    1e1c:	f6 91       	elpm	r31, Z
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	19 94       	eijmp

00001e22 <_exit>:
    1e22:	f8 94       	cli

00001e24 <__stop_program>:
    1e24:	ff cf       	rjmp	.-2      	; 0x1e24 <__stop_program>
