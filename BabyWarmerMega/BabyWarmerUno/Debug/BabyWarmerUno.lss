
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00001a96  00001b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  0080020a  0080020a  00001b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005106  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001902  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001827  00000000  00000000  0000884c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  0000a074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013dc  00000000  00000000  0000a72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d02  00000000  00000000  0000bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000d80a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__vector_17>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	11 07       	cpc	r17, r17

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e6 e9       	ldi	r30, 0x96	; 150
      fe:	fa e1       	ldi	r31, 0x1A	; 26
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	aa 30       	cpi	r26, 0x0A	; 10
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	aa e0       	ldi	r26, 0x0A	; 10
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a1 34       	cpi	r26, 0x41	; 65
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	68 d4       	rcall	.+2256   	; 0xa12 <main>
     142:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z12init_devicesv>:
	
	max2.MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
	max2.MAX7219_writeData(1,das);
	max2.MAX7219_writeData(6,S);
	max2.MAX7219_writeData(8,E);
	max2.MAX7219_writeData(2,t);
     148:	78 94       	sei
     14a:	88 e3       	ldi	r24, 0x38	; 56
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	82 d6       	rcall	.+3332   	; 0xe54 <_ZN8Controls12initControlsEv>
     150:	81 e1       	ldi	r24, 0x11	; 17
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	97 d6       	rcall	.+3374   	; 0xe84 <_ZN3led8led_initEv>
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	8b e3       	ldi	r24, 0x3B	; 59
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN6Timerr11setTimerNumEi>
     162:	8b e3       	ldi	r24, 0x3B	; 59
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN6Timerr19setCompareInterruptEv>
     16a:	68 ec       	ldi	r22, 0xC8	; 200
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	8b e3       	ldi	r24, 0x3B	; 59
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN6Timerr16startCustomTimerEi>
     176:	24 e0       	ldi	r18, 0x04	; 4
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	44 e0       	ldi	r20, 0x04	; 4
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	88 e1       	ldi	r24, 0x18	; 24
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN7max721911MAX7219_setEiii>
     18a:	8f e3       	ldi	r24, 0x3F	; 63
     18c:	9c e9       	ldi	r25, 0x9C	; 156
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <_Z12init_devicesv+0x46>
     192:	00 c0       	rjmp	.+0      	; 0x194 <_Z12init_devicesv+0x4c>
     194:	00 00       	nop
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	44 e0       	ldi	r20, 0x04	; 4
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	82 e1       	ldi	r24, 0x12	; 18
     1a4:	92 e0       	ldi	r25, 0x02	; 2
     1a6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN7max721911MAX7219_setEiii>
     1aa:	8f e3       	ldi	r24, 0x3F	; 63
     1ac:	9c e9       	ldi	r25, 0x9C	; 156
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z12init_devicesv+0x66>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z12init_devicesv+0x6c>
     1b4:	00 00       	nop
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	88 e1       	ldi	r24, 0x18	; 24
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN7max721912MAX7219_initEc>
     1c0:	8f e3       	ldi	r24, 0x3F	; 63
     1c2:	9c e9       	ldi	r25, 0x9C	; 156
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z12init_devicesv+0x7c>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z12init_devicesv+0x82>
     1ca:	00 00       	nop
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	82 e1       	ldi	r24, 0x12	; 18
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN7max721912MAX7219_initEc>
     1d6:	8f e3       	ldi	r24, 0x3F	; 63
     1d8:	9c e9       	ldi	r25, 0x9C	; 156
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <_Z12init_devicesv+0x92>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z12init_devicesv+0x98>
     1e0:	00 00       	nop
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	88 e1       	ldi	r24, 0x18	; 24
     1e6:	92 e0       	ldi	r25, 0x02	; 2
     1e8:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN7max721912MAX7219_initEc>
     1ec:	8f e3       	ldi	r24, 0x3F	; 63
     1ee:	9c e9       	ldi	r25, 0x9C	; 156
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z12init_devicesv+0xa8>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z12init_devicesv+0xae>
     1f6:	00 00       	nop
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	82 e1       	ldi	r24, 0x12	; 18
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN7max721912MAX7219_initEc>
     202:	8f e3       	ldi	r24, 0x3F	; 63
     204:	9c e9       	ldi	r25, 0x9C	; 156
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <_Z12init_devicesv+0xbe>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <_Z12init_devicesv+0xc4>
     20c:	00 00       	nop
     20e:	88 e1       	ldi	r24, 0x18	; 24
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
     216:	9f ef       	ldi	r25, 0xFF	; 255
     218:	26 e7       	ldi	r18, 0x76	; 118
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	91 50       	subi	r25, 0x01	; 1
     21e:	20 40       	sbci	r18, 0x00	; 0
     220:	80 40       	sbci	r24, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <_Z12init_devicesv+0xd4>
     224:	00 c0       	rjmp	.+0      	; 0x226 <_Z12init_devicesv+0xde>
     226:	00 00       	nop
     228:	82 e1       	ldi	r24, 0x12	; 18
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
     230:	9f ef       	ldi	r25, 0xFF	; 255
     232:	26 e7       	ldi	r18, 0x76	; 118
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	91 50       	subi	r25, 0x01	; 1
     238:	20 40       	sbci	r18, 0x00	; 0
     23a:	80 40       	sbci	r24, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <_Z12init_devicesv+0xee>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z12init_devicesv+0xf8>
     240:	00 00       	nop
     242:	08 95       	ret

00000244 <__vector_17>:
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     25a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     25e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <spiTimerCheck>
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <spiTimerCheck>
     268:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <startMonitor>
     26c:	88 23       	and	r24, r24
     26e:	49 f0       	breq	.+18     	; 0x282 <__vector_17+0x3e>
     270:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <second>
     274:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <second+0x1>
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <second+0x1>
     27e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <second>
     282:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <display_count>
     286:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <display_count+0x1>
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <display_count+0x1>
     290:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <display_count>
     294:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <display_count>
     298:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <display_count+0x1>
     29c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     2a0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2a4:	28 17       	cp	r18, r24
     2a6:	39 07       	cpc	r19, r25
     2a8:	3c f0       	brlt	.+14     	; 0x2b8 <__vector_17+0x74>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <displayUpdate>
     2b0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <display_count+0x1>
     2b4:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <display_count>
     2b8:	9f 91       	pop	r25
     2ba:	8f 91       	pop	r24
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <_Z13sendToDisplayfff>:
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	2b 01       	movw	r4, r22
     2ec:	3c 01       	movw	r6, r24
     2ee:	49 01       	movw	r8, r18
     2f0:	5a 01       	movw	r10, r20
     2f2:	67 01       	movw	r12, r14
     2f4:	78 01       	movw	r14, r16
     2f6:	43 ef       	ldi	r20, 0xF3	; 243
     2f8:	69 e0       	ldi	r22, 0x09	; 9
     2fa:	88 e1       	ldi	r24, 0x18	; 24
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	63 e0       	ldi	r22, 0x03	; 3
     306:	88 e1       	ldi	r24, 0x18	; 24
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e2       	ldi	r20, 0x20	; 32
     314:	51 e4       	ldi	r21, 0x41	; 65
     316:	c3 01       	movw	r24, r6
     318:	b2 01       	movw	r22, r4
     31a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     31e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     322:	46 2f       	mov	r20, r22
     324:	68 e0       	ldi	r22, 0x08	; 8
     326:	88 e1       	ldi	r24, 0x18	; 24
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     32e:	c3 01       	movw	r24, r6
     330:	b2 01       	movw	r22, r4
     332:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     336:	ca e0       	ldi	r28, 0x0A	; 10
     338:	d0 e0       	ldi	r29, 0x00	; 0
     33a:	cb 01       	movw	r24, r22
     33c:	be 01       	movw	r22, r28
     33e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     342:	48 2f       	mov	r20, r24
     344:	40 68       	ori	r20, 0x80	; 128
     346:	66 e0       	ldi	r22, 0x06	; 6
     348:	88 e1       	ldi	r24, 0x18	; 24
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e2       	ldi	r20, 0x20	; 32
     356:	51 e4       	ldi	r21, 0x41	; 65
     358:	c3 01       	movw	r24, r6
     35a:	b2 01       	movw	r22, r4
     35c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     360:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     364:	cb 01       	movw	r24, r22
     366:	be 01       	movw	r22, r28
     368:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     36c:	48 2f       	mov	r20, r24
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	88 e1       	ldi	r24, 0x18	; 24
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	64 e0       	ldi	r22, 0x04	; 4
     37c:	88 e1       	ldi	r24, 0x18	; 24
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 e2       	ldi	r20, 0x20	; 32
     38a:	51 e4       	ldi	r21, 0x41	; 65
     38c:	c5 01       	movw	r24, r10
     38e:	b4 01       	movw	r22, r8
     390:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     394:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     398:	46 2f       	mov	r20, r22
     39a:	67 e0       	ldi	r22, 0x07	; 7
     39c:	88 e1       	ldi	r24, 0x18	; 24
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     3ac:	cb 01       	movw	r24, r22
     3ae:	be 01       	movw	r22, r28
     3b0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     3b4:	48 2f       	mov	r20, r24
     3b6:	40 68       	ori	r20, 0x80	; 128
     3b8:	65 e0       	ldi	r22, 0x05	; 5
     3ba:	88 e1       	ldi	r24, 0x18	; 24
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	fb d7       	rcall	.+4086   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e2       	ldi	r20, 0x20	; 32
     3c6:	51 e4       	ldi	r21, 0x41	; 65
     3c8:	c5 01       	movw	r24, r10
     3ca:	b4 01       	movw	r22, r8
     3cc:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     3d0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     3d4:	cb 01       	movw	r24, r22
     3d6:	be 01       	movw	r22, r28
     3d8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     3dc:	48 2f       	mov	r20, r24
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	88 e1       	ldi	r24, 0x18	; 24
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	e8 d7       	rcall	.+4048   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     3e6:	42 ea       	ldi	r20, 0xA2	; 162
     3e8:	69 e0       	ldi	r22, 0x09	; 9
     3ea:	82 e1       	ldi	r24, 0x12	; 18
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	e3 d7       	rcall	.+4038   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	64 e0       	ldi	r22, 0x04	; 4
     3f4:	82 e1       	ldi	r24, 0x12	; 18
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	de d7       	rcall	.+4028   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 e2       	ldi	r20, 0x20	; 32
     400:	51 e4       	ldi	r21, 0x41	; 65
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     40a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     40e:	46 2f       	mov	r20, r22
     410:	66 e0       	ldi	r22, 0x06	; 6
     412:	82 e1       	ldi	r24, 0x12	; 18
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	cf d7       	rcall	.+3998   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     418:	c7 01       	movw	r24, r14
     41a:	b6 01       	movw	r22, r12
     41c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     420:	cb 01       	movw	r24, r22
     422:	be 01       	movw	r22, r28
     424:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     428:	48 2f       	mov	r20, r24
     42a:	40 68       	ori	r20, 0x80	; 128
     42c:	68 e0       	ldi	r22, 0x08	; 8
     42e:	82 e1       	ldi	r24, 0x12	; 18
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	c1 d7       	rcall	.+3970   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e2       	ldi	r20, 0x20	; 32
     43a:	51 e4       	ldi	r21, 0x41	; 65
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     444:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     448:	cb 01       	movw	r24, r22
     44a:	be 01       	movw	r22, r28
     44c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     450:	48 2f       	mov	r20, r24
     452:	62 e0       	ldi	r22, 0x02	; 2
     454:	82 e1       	ldi	r24, 0x12	; 18
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	ae d7       	rcall	.+3932   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	9f 90       	pop	r9
     470:	8f 90       	pop	r8
     472:	7f 90       	pop	r7
     474:	6f 90       	pop	r6
     476:	5f 90       	pop	r5
     478:	4f 90       	pop	r4
     47a:	08 95       	ret

0000047c <_Z18sendToDisplayBelowf>:
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	6b 01       	movw	r12, r22
     48a:	7c 01       	movw	r14, r24
     48c:	42 ea       	ldi	r20, 0xA2	; 162
     48e:	69 e0       	ldi	r22, 0x09	; 9
     490:	82 e1       	ldi	r24, 0x12	; 18
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	90 d7       	rcall	.+3872   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	64 e0       	ldi	r22, 0x04	; 4
     49a:	82 e1       	ldi	r24, 0x12	; 18
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	8b d7       	rcall	.+3862   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e2       	ldi	r20, 0x20	; 32
     4a6:	51 e4       	ldi	r21, 0x41	; 65
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     4b0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     4b4:	46 2f       	mov	r20, r22
     4b6:	66 e0       	ldi	r22, 0x06	; 6
     4b8:	82 e1       	ldi	r24, 0x12	; 18
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	7c d7       	rcall	.+3832   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     4c6:	ca e0       	ldi	r28, 0x0A	; 10
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	cb 01       	movw	r24, r22
     4cc:	be 01       	movw	r22, r28
     4ce:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     4d2:	48 2f       	mov	r20, r24
     4d4:	40 68       	ori	r20, 0x80	; 128
     4d6:	68 e0       	ldi	r22, 0x08	; 8
     4d8:	82 e1       	ldi	r24, 0x12	; 18
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	6c d7       	rcall	.+3800   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e2       	ldi	r20, 0x20	; 32
     4e4:	51 e4       	ldi	r21, 0x41	; 65
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     4ee:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
     4f2:	cb 01       	movw	r24, r22
     4f4:	be 01       	movw	r22, r28
     4f6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodhi4>
     4fa:	48 2f       	mov	r20, r24
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	82 e1       	ldi	r24, 0x12	; 18
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	59 d7       	rcall	.+3762   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	08 95       	ret

00000512 <_Z15displaySensFailv>:
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	69 e0       	ldi	r22, 0x09	; 9
     516:	88 e1       	ldi	r24, 0x18	; 24
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	4d d7       	rcall	.+3738   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     51c:	4b e5       	ldi	r20, 0x5B	; 91
     51e:	63 e0       	ldi	r22, 0x03	; 3
     520:	88 e1       	ldi	r24, 0x18	; 24
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	48 d7       	rcall	.+3728   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     526:	4f e4       	ldi	r20, 0x4F	; 79
     528:	67 e0       	ldi	r22, 0x07	; 7
     52a:	88 e1       	ldi	r24, 0x18	; 24
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	43 d7       	rcall	.+3718   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     530:	45 e1       	ldi	r20, 0x15	; 21
     532:	65 e0       	ldi	r22, 0x05	; 5
     534:	88 e1       	ldi	r24, 0x18	; 24
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	3e d7       	rcall	.+3708   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     53a:	4b e5       	ldi	r20, 0x5B	; 91
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	39 d7       	rcall	.+3698   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     544:	47 e4       	ldi	r20, 0x47	; 71
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	88 e1       	ldi	r24, 0x18	; 24
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	34 d7       	rcall	.+3688   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     54e:	47 e7       	ldi	r20, 0x77	; 119
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	88 e1       	ldi	r24, 0x18	; 24
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	2f d7       	rcall	.+3678   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     558:	46 e0       	ldi	r20, 0x06	; 6
     55a:	66 e0       	ldi	r22, 0x06	; 6
     55c:	88 e1       	ldi	r24, 0x18	; 24
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	2a d7       	rcall	.+3668   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     562:	4e e0       	ldi	r20, 0x0E	; 14
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	88 e1       	ldi	r24, 0x18	; 24
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	25 c7       	rjmp	.+3658   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     56c:	08 95       	ret

0000056e <_Z21displaySetTemperaturev>:
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	69 e0       	ldi	r22, 0x09	; 9
     572:	88 e1       	ldi	r24, 0x18	; 24
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	1f d7       	rcall	.+3646   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	88 e1       	ldi	r24, 0x18	; 24
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	1a d7       	rcall	.+3636   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     582:	4b e5       	ldi	r20, 0x5B	; 91
     584:	67 e0       	ldi	r22, 0x07	; 7
     586:	88 e1       	ldi	r24, 0x18	; 24
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	15 d7       	rcall	.+3626   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     58c:	4f e4       	ldi	r20, 0x4F	; 79
     58e:	65 e0       	ldi	r22, 0x05	; 5
     590:	88 e1       	ldi	r24, 0x18	; 24
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	10 d7       	rcall	.+3616   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     596:	4f e0       	ldi	r20, 0x0F	; 15
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	88 e1       	ldi	r24, 0x18	; 24
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0b d7       	rcall	.+3606   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5a0:	4f e0       	ldi	r20, 0x0F	; 15
     5a2:	64 e0       	ldi	r22, 0x04	; 4
     5a4:	88 e1       	ldi	r24, 0x18	; 24
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	06 d7       	rcall	.+3596   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5aa:	47 e6       	ldi	r20, 0x67	; 103
     5ac:	68 e0       	ldi	r22, 0x08	; 8
     5ae:	88 e1       	ldi	r24, 0x18	; 24
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	01 d7       	rcall	.+3586   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	66 e0       	ldi	r22, 0x06	; 6
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	fc d6       	rcall	.+3576   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	88 e1       	ldi	r24, 0x18	; 24
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	f7 c6       	rjmp	.+3566   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5c8:	08 95       	ret

000005ca <_Z14displayPreHeatv>:
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	69 e0       	ldi	r22, 0x09	; 9
     5ce:	88 e1       	ldi	r24, 0x18	; 24
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	f1 d6       	rcall	.+3554   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	63 e0       	ldi	r22, 0x03	; 3
     5d8:	88 e1       	ldi	r24, 0x18	; 24
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	ec d6       	rcall	.+3544   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5de:	47 e6       	ldi	r20, 0x67	; 103
     5e0:	67 e0       	ldi	r22, 0x07	; 7
     5e2:	88 e1       	ldi	r24, 0x18	; 24
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	e7 d6       	rcall	.+3534   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5e8:	45 e0       	ldi	r20, 0x05	; 5
     5ea:	65 e0       	ldi	r22, 0x05	; 5
     5ec:	88 e1       	ldi	r24, 0x18	; 24
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	e2 d6       	rcall	.+3524   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5f2:	4f e4       	ldi	r20, 0x4F	; 79
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	88 e1       	ldi	r24, 0x18	; 24
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	dd d6       	rcall	.+3514   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     5fc:	47 e3       	ldi	r20, 0x37	; 55
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	88 e1       	ldi	r24, 0x18	; 24
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	d8 d6       	rcall	.+3504   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     606:	4f e4       	ldi	r20, 0x4F	; 79
     608:	68 e0       	ldi	r22, 0x08	; 8
     60a:	88 e1       	ldi	r24, 0x18	; 24
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	d3 d6       	rcall	.+3494   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     610:	47 e7       	ldi	r20, 0x77	; 119
     612:	66 e0       	ldi	r22, 0x06	; 6
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	ce d6       	rcall	.+3484   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     61a:	4f e0       	ldi	r20, 0x0F	; 15
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	88 e1       	ldi	r24, 0x18	; 24
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	c9 c6       	rjmp	.+3474   	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
     624:	08 95       	ret

00000626 <_Z8titititiv>:
}

void titititi(){
	controls.startBuzzer();
     626:	88 e3       	ldi	r24, 0x38	; 56
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	20 d4       	rcall	.+2112   	; 0xe6c <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	81 ee       	ldi	r24, 0xE1	; 225
     630:	94 e0       	ldi	r25, 0x04	; 4
     632:	21 50       	subi	r18, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <_Z8titititiv+0xc>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <_Z8titititiv+0x16>
     63c:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     63e:	88 e3       	ldi	r24, 0x38	; 56
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	1a d4       	rcall	.+2100   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	81 ee       	ldi	r24, 0xE1	; 225
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	80 40       	sbci	r24, 0x00	; 0
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <_Z8titititiv+0x24>
     652:	00 c0       	rjmp	.+0      	; 0x654 <_Z8titititiv+0x2e>
     654:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     656:	88 e3       	ldi	r24, 0x38	; 56
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	08 d4       	rcall	.+2064   	; 0xe6c <_ZN8Controls11startBuzzerEv>
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	81 ee       	ldi	r24, 0xE1	; 225
     660:	94 e0       	ldi	r25, 0x04	; 4
     662:	21 50       	subi	r18, 0x01	; 1
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	90 40       	sbci	r25, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <_Z8titititiv+0x3c>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <_Z8titititiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     66c:	00 00       	nop
     66e:	88 e3       	ldi	r24, 0x38	; 56
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	02 d4       	rcall	.+2052   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     674:	2f ef       	ldi	r18, 0xFF	; 255
     676:	85 ea       	ldi	r24, 0xA5	; 165
     678:	9e e0       	ldi	r25, 0x0E	; 14
     67a:	21 50       	subi	r18, 0x01	; 1
     67c:	80 40       	sbci	r24, 0x00	; 0
     67e:	90 40       	sbci	r25, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <_Z8titititiv+0x54>
     682:	00 c0       	rjmp	.+0      	; 0x684 <_Z8titititiv+0x5e>
	_delay_ms(300);
	controls.startBuzzer();
     684:	00 00       	nop
     686:	88 e3       	ldi	r24, 0x38	; 56
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	f0 d3       	rcall	.+2016   	; 0xe6c <_ZN8Controls11startBuzzerEv>
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	81 ee       	ldi	r24, 0xE1	; 225
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	21 50       	subi	r18, 0x01	; 1
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	90 40       	sbci	r25, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <_Z8titititiv+0x6c>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <_Z8titititiv+0x76>
	_delay_ms(100);
	controls.stopBuzzer();
     69c:	00 00       	nop
     69e:	88 e3       	ldi	r24, 0x38	; 56
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	ea d3       	rcall	.+2004   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	81 ee       	ldi	r24, 0xE1	; 225
     6a8:	94 e0       	ldi	r25, 0x04	; 4
     6aa:	21 50       	subi	r18, 0x01	; 1
     6ac:	80 40       	sbci	r24, 0x00	; 0
     6ae:	90 40       	sbci	r25, 0x00	; 0
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <_Z8titititiv+0x84>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <_Z8titititiv+0x8e>
	_delay_ms(100);
	controls.startBuzzer();
     6b4:	00 00       	nop
     6b6:	88 e3       	ldi	r24, 0x38	; 56
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	d8 d3       	rcall	.+1968   	; 0xe6c <_ZN8Controls11startBuzzerEv>
     6bc:	2f ef       	ldi	r18, 0xFF	; 255
     6be:	81 ee       	ldi	r24, 0xE1	; 225
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	21 50       	subi	r18, 0x01	; 1
     6c4:	80 40       	sbci	r24, 0x00	; 0
     6c6:	90 40       	sbci	r25, 0x00	; 0
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <_Z8titititiv+0x9c>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <_Z8titititiv+0xa6>
	_delay_ms(100);
	controls.stopBuzzer();
     6cc:	00 00       	nop
     6ce:	88 e3       	ldi	r24, 0x38	; 56
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	d2 c3       	rjmp	.+1956   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     6d4:	08 95       	ret

000006d6 <_Z4titiv>:
}

void titi(){
	controls.startBuzzer();
     6d6:	88 e3       	ldi	r24, 0x38	; 56
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	c8 d3       	rcall	.+1936   	; 0xe6c <_ZN8Controls11startBuzzerEv>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	81 ee       	ldi	r24, 0xE1	; 225
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <_Z4titiv+0xc>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <_Z4titiv+0x16>
     6ec:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     6ee:	88 e3       	ldi	r24, 0x38	; 56
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	c2 d3       	rcall	.+1924   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	81 ee       	ldi	r24, 0xE1	; 225
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <_Z4titiv+0x24>
     702:	00 c0       	rjmp	.+0      	; 0x704 <_Z4titiv+0x2e>
     704:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     706:	88 e3       	ldi	r24, 0x38	; 56
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	b0 d3       	rcall	.+1888   	; 0xe6c <_ZN8Controls11startBuzzerEv>
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	81 ee       	ldi	r24, 0xE1	; 225
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	21 50       	subi	r18, 0x01	; 1
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	90 40       	sbci	r25, 0x00	; 0
     718:	e1 f7       	brne	.-8      	; 0x712 <_Z4titiv+0x3c>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <_Z4titiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     71c:	00 00       	nop
     71e:	88 e3       	ldi	r24, 0x38	; 56
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	aa d3       	rcall	.+1876   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	81 ee       	ldi	r24, 0xE1	; 225
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	21 50       	subi	r18, 0x01	; 1
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	90 40       	sbci	r25, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <_Z4titiv+0x54>
     732:	00 c0       	rjmp	.+0      	; 0x734 <_Z4titiv+0x5e>
     734:	00 00       	nop
     736:	08 95       	ret

00000738 <_Z5checkv>:
		displayUpdate = true;
		display_count = 0;
	}
}

void check() {
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	cf 93       	push	r28
	
	
	if((skin_temperature > 37.2) |(skin_temperature < 36.50) | (air_temperature>39.00) ) {
     74a:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <skin_temperature>
     74e:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <skin_temperature+0x1>
     752:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <skin_temperature+0x2>
     756:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <skin_temperature+0x3>
     75a:	c0 90 28 02 	lds	r12, 0x0228	; 0x800228 <skin_temperature>
     75e:	d0 90 29 02 	lds	r13, 0x0229	; 0x800229 <skin_temperature+0x1>
     762:	e0 90 2a 02 	lds	r14, 0x022A	; 0x80022a <skin_temperature+0x2>
     766:	f0 90 2b 02 	lds	r15, 0x022B	; 0x80022b <skin_temperature+0x3>
     76a:	80 90 24 02 	lds	r8, 0x0224	; 0x800224 <air_temperature>
     76e:	90 90 25 02 	lds	r9, 0x0225	; 0x800225 <air_temperature+0x1>
     772:	a0 90 26 02 	lds	r10, 0x0226	; 0x800226 <air_temperature+0x2>
     776:	b0 90 27 02 	lds	r11, 0x0227	; 0x800227 <air_temperature+0x3>
     77a:	c1 e0       	ldi	r28, 0x01	; 1
     77c:	2d ec       	ldi	r18, 0xCD	; 205
     77e:	3c ec       	ldi	r19, 0xCC	; 204
     780:	44 e1       	ldi	r20, 0x14	; 20
     782:	52 e4       	ldi	r21, 0x42	; 66
     784:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	0c f0       	brlt	.+2      	; 0x78e <_Z5checkv+0x56>
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	42 e1       	ldi	r20, 0x12	; 18
     794:	52 e4       	ldi	r21, 0x42	; 66
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	3f d7       	rcall	.+3710   	; 0x161a <__cmpsf2>
     79c:	88 1f       	adc	r24, r24
     79e:	88 27       	eor	r24, r24
     7a0:	88 1f       	adc	r24, r24
     7a2:	8c 2b       	or	r24, r28
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <_Z5checkv+0x8a>
     7a6:	c1 e0       	ldi	r28, 0x01	; 1
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	4c e1       	ldi	r20, 0x1C	; 28
     7ae:	52 e4       	ldi	r21, 0x42	; 66
     7b0:	c5 01       	movw	r24, r10
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     7b8:	18 16       	cp	r1, r24
     7ba:	0c f0       	brlt	.+2      	; 0x7be <_Z5checkv+0x86>
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
     7be:	cc 23       	and	r28, r28
     7c0:	b9 f0       	breq	.+46     	; 0x7f0 <_Z5checkv+0xb8>
		if(!startMonitor) {
     7c2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <startMonitor>
     7c6:	81 11       	cpse	r24, r1
     7c8:	26 c0       	rjmp	.+76     	; 0x816 <_Z5checkv+0xde>
			start_buzzer = true;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <start_buzzer>
		}
		
		if(stop_buzzer && !startMonitor) {
     7d0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <stop_buzzer>
     7d4:	88 23       	and	r24, r24
     7d6:	f9 f0       	breq	.+62     	; 0x816 <_Z5checkv+0xde>
			startMonitor = true;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <startMonitor>
			second = 0;
     7de:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <second+0x1>
     7e2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <second>
			stop_buzzer = false;
     7e6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <stop_buzzer>
			start_buzzer = false;
     7ea:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <start_buzzer>
     7ee:	20 c0       	rjmp	.+64     	; 0x830 <_Z5checkv+0xf8>
		}

	}
	else {
		controls.stopBuzzer();
     7f0:	88 e3       	ldi	r24, 0x38	; 56
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	41 d3       	rcall	.+1666   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     7f6:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <start_buzzer>
		Led.led_do(TS_HIGH_LED, 0);
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	81 e1       	ldi	r24, 0x11	; 17
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	51 d3       	rcall	.+1698   	; 0xeaa <_ZN3led6led_doEii>
		startMonitor = false;
     808:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <startMonitor>
		second = 0;
     80c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <second+0x1>
     810:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <second>
     814:	0d c0       	rjmp	.+26     	; 0x830 <_Z5checkv+0xf8>
	}
	
	if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
     816:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <second>
     81a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <second+0x1>
     81e:	88 35       	cpi	r24, 0x58	; 88
     820:	92 40       	sbci	r25, 0x02	; 2
     822:	34 f0       	brlt	.+12     	; 0x830 <_Z5checkv+0xf8>
		//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
		//controls.startBuzzer();
		startMonitor = false;
     824:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <startMonitor>
		second = 0;
     828:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <second+0x1>
     82c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <second>
	}
	
	if(air_temperature > 39) {
     830:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <air_temperature>
     834:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <air_temperature+0x1>
     838:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <air_temperature+0x2>
     83c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <air_temperature+0x3>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	4c e1       	ldi	r20, 0x1C	; 28
     846:	52 e4       	ldi	r21, 0x42	; 66
     848:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	44 f4       	brge	.+16     	; 0x860 <_Z5checkv+0x128>
		//controls.startBuzzer();
		//Led.led_do(TS_HIGH_LED, 1);
		Led.led_do(TA_HIGH_LED, 1);
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	81 e1       	ldi	r24, 0x11	; 17
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	26 d3       	rcall	.+1612   	; 0xeaa <_ZN3led6led_doEii>
     85e:	07 c0       	rjmp	.+14     	; 0x86e <_Z5checkv+0x136>
		} else{
		//controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	81 e1       	ldi	r24, 0x11	; 17
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	1e d3       	rcall	.+1596   	; 0xeaa <_ZN3led6led_doEii>
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     86e:	65 99       	sbic	0x0c, 5	; 12
     870:	a4 c0       	rjmp	.+328    	; 0x9ba <_Z5checkv+0x282>
     872:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <buzzer_stop_pressed>
     876:	81 11       	cpse	r24, r1
     878:	a0 c0       	rjmp	.+320    	; 0x9ba <_Z5checkv+0x282>
     87a:	96 c0       	rjmp	.+300    	; 0x9a8 <_Z5checkv+0x270>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     87c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <buzzer_stop_pressed>
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     880:	1c 99       	sbic	0x03, 4	; 3
     882:	9e c0       	rjmp	.+316    	; 0x9c0 <_Z5checkv+0x288>
     884:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <set_up_pressed>
     888:	81 11       	cpse	r24, r1
     88a:	9a c0       	rjmp	.+308    	; 0x9c0 <_Z5checkv+0x288>
     88c:	9c c0       	rjmp	.+312    	; 0x9c6 <_Z5checkv+0x28e>
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     88e:	2d ec       	ldi	r18, 0xCD	; 205
     890:	3c ec       	ldi	r19, 0xCC	; 204
     892:	4c ec       	ldi	r20, 0xCC	; 204
     894:	5d e3       	ldi	r21, 0x3D	; 61
     896:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <set_temperature_copy>
     89a:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <set_temperature_copy+0x1>
     89e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <set_temperature_copy+0x2>
     8a2:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <set_temperature_copy+0x3>
     8a6:	55 d6       	rcall	.+3242   	; 0x1552 <__addsf3>
     8a8:	6b 01       	movw	r12, r22
     8aa:	7c 01       	movw	r14, r24
			if(set_temperature_copy >= 37.2){
     8ac:	2d ec       	ldi	r18, 0xCD	; 205
     8ae:	3c ec       	ldi	r19, 0xCC	; 204
     8b0:	44 e1       	ldi	r20, 0x14	; 20
     8b2:	52 e4       	ldi	r21, 0x42	; 66
     8b4:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     8b8:	88 23       	and	r24, r24
     8ba:	4c f4       	brge	.+18     	; 0x8ce <_Z5checkv+0x196>
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     8bc:	c0 92 20 02 	sts	0x0220, r12	; 0x800220 <set_temperature_copy>
     8c0:	d0 92 21 02 	sts	0x0221, r13	; 0x800221 <set_temperature_copy+0x1>
     8c4:	e0 92 22 02 	sts	0x0222, r14	; 0x800222 <set_temperature_copy+0x2>
     8c8:	f0 92 23 02 	sts	0x0223, r15	; 0x800223 <set_temperature_copy+0x3>
     8cc:	0c c0       	rjmp	.+24     	; 0x8e6 <_Z5checkv+0x1ae>
			if(set_temperature_copy >= 37.2){
				set_temperature_copy = 37.2;
     8ce:	8d ec       	ldi	r24, 0xCD	; 205
     8d0:	9c ec       	ldi	r25, 0xCC	; 204
     8d2:	a4 e1       	ldi	r26, 0x14	; 20
     8d4:	b2 e4       	ldi	r27, 0x42	; 66
     8d6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <set_temperature_copy>
     8da:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <set_temperature_copy+0x1>
     8de:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <set_temperature_copy+0x2>
     8e2:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <set_temperature_copy+0x3>
			}
		}
		set_up_pressed = true;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <set_up_pressed>
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <_Z5checkv+0x1ba>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     8ee:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <set_up_pressed>
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     8f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     8f6:	85 fd       	sbrc	r24, 5
     8f8:	70 c0       	rjmp	.+224    	; 0x9da <_Z5checkv+0x2a2>
     8fa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <set_down_pressed>
     8fe:	81 11       	cpse	r24, r1
     900:	6c c0       	rjmp	.+216    	; 0x9da <_Z5checkv+0x2a2>
     902:	66 c0       	rjmp	.+204    	; 0x9d0 <_Z5checkv+0x298>
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     904:	2d ec       	ldi	r18, 0xCD	; 205
     906:	3c ec       	ldi	r19, 0xCC	; 204
     908:	4c ec       	ldi	r20, 0xCC	; 204
     90a:	5d e3       	ldi	r21, 0x3D	; 61
     90c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <set_temperature_copy>
     910:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <set_temperature_copy+0x1>
     914:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <set_temperature_copy+0x2>
     918:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <set_temperature_copy+0x3>
     91c:	19 d6       	rcall	.+3122   	; 0x1550 <__subsf3>
     91e:	6b 01       	movw	r12, r22
			//limit set temperature below range
			if(set_temperature_copy <= 36.5){
     920:	7c 01       	movw	r14, r24
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	42 e1       	ldi	r20, 0x12	; 18
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	77 d6       	rcall	.+3310   	; 0x161a <__cmpsf2>
     92c:	18 16       	cp	r1, r24
     92e:	4c f4       	brge	.+18     	; 0x942 <_Z5checkv+0x20a>
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     930:	c0 92 20 02 	sts	0x0220, r12	; 0x800220 <set_temperature_copy>
     934:	d0 92 21 02 	sts	0x0221, r13	; 0x800221 <set_temperature_copy+0x1>
     938:	e0 92 22 02 	sts	0x0222, r14	; 0x800222 <set_temperature_copy+0x2>
     93c:	f0 92 23 02 	sts	0x0223, r15	; 0x800223 <set_temperature_copy+0x3>
     940:	0c c0       	rjmp	.+24     	; 0x95a <_Z5checkv+0x222>
			//limit set temperature below range
			if(set_temperature_copy <= 36.5){
				set_temperature_copy = 36.5;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a2 e1       	ldi	r26, 0x12	; 18
     948:	b2 e4       	ldi	r27, 0x42	; 66
     94a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <set_temperature_copy>
     94e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <set_temperature_copy+0x1>
     952:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <set_temperature_copy+0x2>
     956:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <set_temperature_copy+0x3>
			}
		}
		
		set_down_pressed= true;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <set_down_pressed>
     960:	02 c0       	rjmp	.+4      	; 0x966 <_Z5checkv+0x22e>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     962:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <set_down_pressed>
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     966:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     96a:	86 fd       	sbrc	r24, 6
     96c:	44 c0       	rjmp	.+136    	; 0x9f6 <_Z5checkv+0x2be>
     96e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <set_pressed>
     972:	81 11       	cpse	r24, r1
     974:	40 c0       	rjmp	.+128    	; 0x9f6 <_Z5checkv+0x2be>
     976:	36 c0       	rjmp	.+108    	; 0x9e4 <_Z5checkv+0x2ac>
		button_change = !button_change;
		if(!button_change) {
			set_temperature = set_temperature_copy;
     978:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <set_temperature_copy>
     97c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <set_temperature_copy+0x1>
     980:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <set_temperature_copy+0x2>
     984:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <set_temperature_copy+0x3>
     988:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <set_temperature>
     98c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <set_temperature+0x1>
     990:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <set_temperature+0x2>
     994:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <set_temperature+0x3>
			titi();
     998:	9e de       	rcall	.-708    	; 0x6d6 <_Z4titiv>
		}
		
		set_pressed = true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <set_pressed>
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <_Z5checkv+0x2c6>
     9a2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <set_pressed>
		Led.led_do(TS_HIGH_LED, 0);
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		controls.stopBuzzer();
     9a6:	2b c0       	rjmp	.+86     	; 0x9fe <_Z5checkv+0x2c6>
     9a8:	88 e3       	ldi	r24, 0x38	; 56
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	65 d2       	rcall	.+1226   	; 0xe78 <_ZN8Controls10stopBuzzerEv>
		stop_buzzer = true;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stop_buzzer>
		buzzer_stop_pressed = true;
     9b4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <buzzer_stop_pressed>
     9b8:	63 cf       	rjmp	.-314    	; 0x880 <_Z5checkv+0x148>
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     9ba:	65 99       	sbic	0x0c, 5	; 12
     9bc:	5f cf       	rjmp	.-322    	; 0x87c <_Z5checkv+0x144>
     9be:	60 cf       	rjmp	.-320    	; 0x880 <_Z5checkv+0x148>
			}
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     9c0:	1c 99       	sbic	0x03, 4	; 3
     9c2:	95 cf       	rjmp	.-214    	; 0x8ee <_Z5checkv+0x1b6>
     9c4:	96 cf       	rjmp	.-212    	; 0x8f2 <_Z5checkv+0x1ba>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     9c6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <button_change>
     9ca:	81 11       	cpse	r24, r1
     9cc:	60 cf       	rjmp	.-320    	; 0x88e <_Z5checkv+0x156>
     9ce:	8b cf       	rjmp	.-234    	; 0x8e6 <_Z5checkv+0x1ae>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     9d0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <button_change>
     9d4:	81 11       	cpse	r24, r1
     9d6:	96 cf       	rjmp	.-212    	; 0x904 <_Z5checkv+0x1cc>
     9d8:	c0 cf       	rjmp	.-128    	; 0x95a <_Z5checkv+0x222>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     9da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     9de:	85 fd       	sbrc	r24, 5
     9e0:	c0 cf       	rjmp	.-128    	; 0x962 <_Z5checkv+0x22a>
     9e2:	c1 cf       	rjmp	.-126    	; 0x966 <_Z5checkv+0x22e>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
		button_change = !button_change;
     9e4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <button_change>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	89 27       	eor	r24, r25
     9ec:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <button_change>
		if(!button_change) {
     9f0:	81 11       	cpse	r24, r1
     9f2:	d3 cf       	rjmp	.-90     	; 0x99a <_Z5checkv+0x262>
     9f4:	c1 cf       	rjmp	.-126    	; 0x978 <_Z5checkv+0x240>
		}
		
		set_pressed = true;
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     9f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     9fa:	86 fd       	sbrc	r24, 6
     9fc:	d2 cf       	rjmp	.-92     	; 0x9a2 <_Z5checkv+0x26a>
		set_pressed = false;
	}
	
}
     9fe:	cf 91       	pop	r28
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	08 95       	ret

00000a12 <main>:
//nonstandard/checking variables
uint32_t countpreheat = 0;

int main(void)
{	
	initUART0();
     a12:	82 d5       	rcall	.+2820   	; 0x1518 <_Z9initUART0v>
	init_devices();
     a14:	99 db       	rcall	.-2254   	; 0x148 <_Z12init_devicesv>
	
	titi();
     a16:	5f de       	rcall	.-834    	; 0x6d6 <_Z4titiv>
	
	
	//*********************************************************************************//
	
	//check Sensor and display sensor fail if failure of sensor
 	max1.MAX7219_clearDisplay();
     a18:	88 e1       	ldi	r24, 0x18	; 24
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	1e d5       	rcall	.+2620   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
 	max2.MAX7219_clearDisplay();
     a1e:	82 e1       	ldi	r24, 0x12	; 18
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	1b d5       	rcall	.+2614   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
 	maxSkin.begin(SKIN_SENSOR);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	8c e2       	ldi	r24, 0x2C	; 44
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	97 d3       	rcall	.+1838   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
 	maxAir.begin(AIR_SENSOR);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	81 e3       	ldi	r24, 0x31	; 49
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	93 d3       	rcall	.+1830   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
     a34:	00 e0       	ldi	r16, 0x00	; 0
 	skin_temperature = maxSkin.temperature(100.0,430.0);
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	27 ed       	ldi	r18, 0xD7	; 215
     a3a:	33 e4       	ldi	r19, 0x43	; 67
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	68 ec       	ldi	r22, 0xC8	; 200
     a42:	72 e4       	ldi	r23, 0x42	; 66
     a44:	8c e2       	ldi	r24, 0x2C	; 44
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	c9 d3       	rcall	.+1938   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     a4a:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <skin_temperature>
     a4e:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <skin_temperature+0x1>
     a52:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <skin_temperature+0x2>
     a56:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <skin_temperature+0x3>
     a5a:	00 e0       	ldi	r16, 0x00	; 0
 	air_temperature = maxAir.temperature(100.0,430.0);
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	27 ed       	ldi	r18, 0xD7	; 215
     a60:	33 e4       	ldi	r19, 0x43	; 67
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	68 ec       	ldi	r22, 0xC8	; 200
     a68:	72 e4       	ldi	r23, 0x42	; 66
     a6a:	81 e3       	ldi	r24, 0x31	; 49
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	b6 d3       	rcall	.+1900   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     a70:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <air_temperature>
     a74:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <air_temperature+0x1>
     a78:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <air_temperature+0x2>
     a7c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <air_temperature+0x3>
     a80:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <skin_temperature>
	 
	//check the sensor conditions, loop the program if it doesn't detect the air sensor and skin sensor//
 	while(skin_temperature <= 0.0 || skin_temperature >= 50 ){
     a84:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <skin_temperature+0x1>
     a88:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <skin_temperature+0x2>
     a8c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <skin_temperature+0x3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	a9 01       	movw	r20, r18
     a96:	c1 d5       	rcall	.+2946   	; 0x161a <__cmpsf2>
     a98:	18 16       	cp	r1, r24
     a9a:	7c f4       	brge	.+30     	; 0xaba <main+0xa8>
     a9c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <skin_temperature>
     aa0:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <skin_temperature+0x1>
     aa4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <skin_temperature+0x2>
     aa8:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <skin_temperature+0x3>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	48 e4       	ldi	r20, 0x48	; 72
     ab2:	52 e4       	ldi	r21, 0x42	; 66
     ab4:	01 d7       	rcall	.+3586   	; 0x18b8 <__gesf2>
     ab6:	88 23       	and	r24, r24
     ab8:	4c f1       	brlt	.+82     	; 0xb0c <main+0xfa>
 		if(displayUpdate){
     aba:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <displayUpdate>
     abe:	88 23       	and	r24, r24
			displayUpdate = false;
     ac0:	19 f1       	breq	.+70     	; 0xb08 <main+0xf6>
     ac2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <displayUpdate>
			max1.MAX7219_init(REINITIALIZE);
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	92 e0       	ldi	r25, 0x02	; 2
			max2.MAX7219_init(REINITIALIZE);
     acc:	a7 d4       	rcall	.+2382   	; 0x141c <_ZN7max721912MAX7219_initEc>
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	82 e1       	ldi	r24, 0x12	; 18
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	a3 d4       	rcall	.+2374   	; 0x141c <_ZN7max721912MAX7219_initEc>
			displaySensFail();
     ad6:	1d dd       	rcall	.-1478   	; 0x512 <_Z15displaySensFailv>
     ad8:	61 e0       	ldi	r22, 0x01	; 1
			maxSkin.begin(SKIN_SENSOR);
     ada:	8c e2       	ldi	r24, 0x2C	; 44
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	3d d3       	rcall	.+1658   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
     ae0:	00 e0       	ldi	r16, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0,430.0);
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	27 ed       	ldi	r18, 0xD7	; 215
     ae6:	33 e4       	ldi	r19, 0x43	; 67
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	68 ec       	ldi	r22, 0xC8	; 200
     aee:	72 e4       	ldi	r23, 0x42	; 66
     af0:	8c e2       	ldi	r24, 0x2C	; 44
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	73 d3       	rcall	.+1766   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     af6:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <skin_temperature>
     afa:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <skin_temperature+0x1>
     afe:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <skin_temperature+0x2>
     b02:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <skin_temperature+0x3>
     b06:	bc cf       	rjmp	.-136    	; 0xa80 <main+0x6e>
     b08:	00 00       	nop
		}
		else{
			asm volatile ("nop");
     b0a:	ba cf       	rjmp	.-140    	; 0xa80 <main+0x6e>
     b0c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <air_temperature>
		}
 	}

 	while(air_temperature <= 0.0 || air_temperature >= 50){
     b10:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <air_temperature+0x1>
     b14:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <air_temperature+0x2>
     b18:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <air_temperature+0x3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	a9 01       	movw	r20, r18
     b22:	7b d5       	rcall	.+2806   	; 0x161a <__cmpsf2>
     b24:	18 16       	cp	r1, r24
     b26:	7c f4       	brge	.+30     	; 0xb46 <main+0x134>
     b28:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <air_temperature>
     b2c:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <air_temperature+0x1>
     b30:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <air_temperature+0x2>
     b34:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <air_temperature+0x3>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	48 e4       	ldi	r20, 0x48	; 72
     b3e:	52 e4       	ldi	r21, 0x42	; 66
     b40:	bb d6       	rcall	.+3446   	; 0x18b8 <__gesf2>
     b42:	88 23       	and	r24, r24
 		if(displayUpdate){
     b44:	4c f1       	brlt	.+82     	; 0xb98 <main+0x186>
     b46:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <displayUpdate>
			displayUpdate = false;
     b4a:	88 23       	and	r24, r24
     b4c:	19 f1       	breq	.+70     	; 0xb94 <main+0x182>
 			max1.MAX7219_init(REINITIALIZE);
     b4e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <displayUpdate>
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	88 e1       	ldi	r24, 0x18	; 24
     b56:	92 e0       	ldi	r25, 0x02	; 2
 			max2.MAX7219_init(REINITIALIZE);
     b58:	61 d4       	rcall	.+2242   	; 0x141c <_ZN7max721912MAX7219_initEc>
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	82 e1       	ldi	r24, 0x12	; 18
     b5e:	92 e0       	ldi	r25, 0x02	; 2
 			displaySensFail();
     b60:	5d d4       	rcall	.+2234   	; 0x141c <_ZN7max721912MAX7219_initEc>
     b62:	d7 dc       	rcall	.-1618   	; 0x512 <_Z15displaySensFailv>
 			maxAir.begin(AIR_SENSOR);
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	81 e3       	ldi	r24, 0x31	; 49
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	f7 d2       	rcall	.+1518   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
     b6c:	00 e0       	ldi	r16, 0x00	; 0
 			air_temperature = maxAir.temperature(100.0,430.0);
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	27 ed       	ldi	r18, 0xD7	; 215
     b72:	33 e4       	ldi	r19, 0x43	; 67
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	68 ec       	ldi	r22, 0xC8	; 200
     b7a:	72 e4       	ldi	r23, 0x42	; 66
     b7c:	81 e3       	ldi	r24, 0x31	; 49
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	2d d3       	rcall	.+1626   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     b82:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <air_temperature>
     b86:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <air_temperature+0x1>
     b8a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <air_temperature+0x2>
     b8e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <air_temperature+0x3>
     b92:	bc cf       	rjmp	.-136    	; 0xb0c <main+0xfa>
     b94:	00 00       	nop
 		}
 		else{
 			asm volatile ("nop");
     b96:	ba cf       	rjmp	.-140    	; 0xb0c <main+0xfa>
     b98:	f1 2c       	mov	r15, r1
     b9a:	c1 e0       	ldi	r28, 0x01	; 1
	//*************************************************************//
	/// After this start preheat condition of baby warmer //////
 	while(!preHeat){
 		
 		if(displayUpdate){
 			clear_display = !clear_display;
     b9c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
	
	
	
	//*************************************************************//
	/// After this start preheat condition of baby warmer //////
 	while(!preHeat){
     ba0:	81 11       	cpse	r24, r1
     ba2:	67 c0       	rjmp	.+206    	; 0xc72 <main+0x260>
 		
 		if(displayUpdate){
     ba4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <displayUpdate>
     ba8:	88 23       	and	r24, r24
     baa:	09 f4       	brne	.+2      	; 0xbae <main+0x19c>
     bac:	60 c0       	rjmp	.+192    	; 0xc6e <main+0x25c>
 			clear_display = !clear_display;
     bae:	fc 26       	eor	r15, r28
 			
 			displayUpdate = false;
     bb0:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <displayUpdate>
 			maxSkin.begin(SKIN_SENSOR);
     bb4:	6c 2f       	mov	r22, r28
     bb6:	8c e2       	ldi	r24, 0x2C	; 44
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	cf d2       	rcall	.+1438   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0,430.0);
     bbc:	00 e0       	ldi	r16, 0x00	; 0
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	27 ed       	ldi	r18, 0xD7	; 215
     bc2:	33 e4       	ldi	r19, 0x43	; 67
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	68 ec       	ldi	r22, 0xC8	; 200
     bca:	72 e4       	ldi	r23, 0x42	; 66
     bcc:	8c e2       	ldi	r24, 0x2C	; 44
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	05 d3       	rcall	.+1546   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     bd2:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <skin_temperature>
     bd6:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <skin_temperature+0x1>
     bda:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <skin_temperature+0x2>
 			max1.MAX7219_init(REINITIALIZE);
     bde:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <skin_temperature+0x3>
     be2:	6c 2f       	mov	r22, r28
     be4:	88 e1       	ldi	r24, 0x18	; 24
     be6:	92 e0       	ldi	r25, 0x02	; 2
 			max2.MAX7219_init(REINITIALIZE);
     be8:	19 d4       	rcall	.+2098   	; 0x141c <_ZN7max721912MAX7219_initEc>
     bea:	6c 2f       	mov	r22, r28
     bec:	82 e1       	ldi	r24, 0x12	; 18
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	15 d4       	rcall	.+2090   	; 0x141c <_ZN7max721912MAX7219_initEc>
 			displayPreHeat();
     bf2:	eb dc       	rcall	.-1578   	; 0x5ca <_Z14displayPreHeatv>
     bf4:	ff 20       	and	r15, r15
 			if(clear_display) {
     bf6:	21 f0       	breq	.+8      	; 0xc00 <main+0x1ee>
     bf8:	82 e1       	ldi	r24, 0x12	; 18
 				max2.MAX7219_clearDisplay();
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	2e d4       	rcall	.+2140   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <main+0x200>
     c00:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <skin_temperature>
 				//max1.MAX7219_clearDisplay();
 				} else {
 				sendToDisplayBelow(skin_temperature);
     c04:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <skin_temperature+0x1>
     c08:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <skin_temperature+0x2>
     c0c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <skin_temperature+0x3>
     c10:	35 dc       	rcall	.-1942   	; 0x47c <_Z18sendToDisplayBelowf>
 			}
 			if(skin_temperature >= pre_heat_max_temp) {
     c12:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <skin_temperature>
     c16:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <skin_temperature+0x1>
     c1a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <skin_temperature+0x2>
     c1e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <skin_temperature+0x3>
     c22:	80 90 02 02 	lds	r8, 0x0202	; 0x800202 <pre_heat_max_temp>
     c26:	90 90 03 02 	lds	r9, 0x0203	; 0x800203 <pre_heat_max_temp+0x1>
     c2a:	a0 90 04 02 	lds	r10, 0x0204	; 0x800204 <pre_heat_max_temp+0x2>
     c2e:	b0 90 05 02 	lds	r11, 0x0205	; 0x800205 <pre_heat_max_temp+0x3>
     c32:	a5 01       	movw	r20, r10
     c34:	94 01       	movw	r18, r8
     c36:	40 d6       	rcall	.+3200   	; 0x18b8 <__gesf2>
     c38:	88 23       	and	r24, r24
 				controls.stopHeater();
     c3a:	3c f0       	brlt	.+14     	; 0xc4a <main+0x238>
     c3c:	88 e3       	ldi	r24, 0x38	; 56
     c3e:	92 e0       	ldi	r25, 0x02	; 2
 				preHeat = true;
     c40:	13 d1       	rcall	.+550    	; 0xe68 <_ZN8Controls10stopHeaterEv>
     c42:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <__data_end>
 				titititi();
     c46:	ef dc       	rcall	.-1570   	; 0x626 <_Z8titititiv>
     c48:	a9 cf       	rjmp	.-174    	; 0xb9c <main+0x18a>
 			}
 			else if(skin_temperature < pre_heat_max_temp) {
     c4a:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <skin_temperature>
     c4e:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <skin_temperature+0x1>
     c52:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <skin_temperature+0x2>
     c56:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <skin_temperature+0x3>
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	2c d6       	rcall	.+3160   	; 0x18b8 <__gesf2>
     c60:	18 16       	cp	r1, r24
     c62:	0c f0       	brlt	.+2      	; 0xc66 <main+0x254>
 				controls.startHeater();
     c64:	9b cf       	rjmp	.-202    	; 0xb9c <main+0x18a>
     c66:	88 e3       	ldi	r24, 0x38	; 56
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	fc d0       	rcall	.+504    	; 0xe64 <_ZN8Controls11startHeaterEv>
 			}
 		}
 		
 		else{
 			asm volatile ("nop");
     c6c:	97 cf       	rjmp	.-210    	; 0xb9c <main+0x18a>
     c6e:	00 00       	nop
	///The preheat condition of baby warmer ends here ///////////
	
	//clear display
	//note that for clearDisplay to clear screen, mode decode register should be in 0xff form or the display shows tttttttt 

	max1.MAX7219_clearDisplay();
     c70:	95 cf       	rjmp	.-214    	; 0xb9c <main+0x18a>
     c72:	88 e1       	ldi	r24, 0x18	; 24
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	f1 d3       	rcall	.+2018   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
	max2.MAX7219_clearDisplay();
     c78:	82 e1       	ldi	r24, 0x12	; 18
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	ee d3       	rcall	.+2012   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
     c7e:	2f ef       	ldi	r18, 0xFF	; 255
     c80:	81 ee       	ldi	r24, 0xE1	; 225
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	80 40       	sbci	r24, 0x00	; 0
     c88:	90 40       	sbci	r25, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <main+0x272>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <main+0x27c>
     c8e:	00 00       	nop
	float temperature_heater_off = 0.0;
	float temperature_heater_on = 0.0;
	//
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
     c90:	c0 e0       	ldi	r28, 0x00	; 0
	max2.MAX7219_clearDisplay();
	_delay_ms(100);
	
	while(1)
	{
		check();
     c92:	52 dd       	rcall	.-1372   	; 0x738 <_Z5checkv>
     c94:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <displayUpdate>
		if(displayUpdate) {
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <main+0x28c>
     c9c:	c0 c0       	rjmp	.+384    	; 0xe1e <main+0x40c>
			
			//spi for temperature pt100
			maxAir.begin(AIR_SENSOR); //these are init
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	81 e3       	ldi	r24, 0x31	; 49
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	5a d2       	rcall	.+1204   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
			maxSkin.begin(SKIN_SENSOR);
     ca8:	8c e2       	ldi	r24, 0x2C	; 44
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	56 d2       	rcall	.+1196   	; 0x115a <_ZN17Adafruit_MAX318655beginEh>
     cae:	00 e0       	ldi	r16, 0x00	; 0
     cb0:	10 e0       	ldi	r17, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0, 430.0);
     cb2:	27 ed       	ldi	r18, 0xD7	; 215
     cb4:	33 e4       	ldi	r19, 0x43	; 67
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	68 ec       	ldi	r22, 0xC8	; 200
     cbc:	72 e4       	ldi	r23, 0x42	; 66
     cbe:	8c e2       	ldi	r24, 0x2C	; 44
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	8c d2       	rcall	.+1304   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     cc4:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <skin_temperature>
     cc8:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <skin_temperature+0x1>
     ccc:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <skin_temperature+0x2>
     cd0:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <skin_temperature+0x3>
     cd4:	00 e0       	ldi	r16, 0x00	; 0
			air_temperature = maxAir.temperature(100.0, 430.0);
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	27 ed       	ldi	r18, 0xD7	; 215
     cda:	33 e4       	ldi	r19, 0x43	; 67
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	68 ec       	ldi	r22, 0xC8	; 200
     ce2:	72 e4       	ldi	r23, 0x42	; 66
     ce4:	81 e3       	ldi	r24, 0x31	; 49
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	79 d2       	rcall	.+1266   	; 0x11dc <_ZN17Adafruit_MAX3186511temperatureEff>
     cea:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <air_temperature>
     cee:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <air_temperature+0x1>
     cf2:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <air_temperature+0x2>
     cf6:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <air_temperature+0x3>
			max1.MAX7219_init(REINITIALIZE); // these are init
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	88 e1       	ldi	r24, 0x18	; 24
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	8d d3       	rcall	.+1818   	; 0x141c <_ZN7max721912MAX7219_initEc>
			max2.MAX7219_init(REINITIALIZE);
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	82 e1       	ldi	r24, 0x12	; 18
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	89 d3       	rcall	.+1810   	; 0x141c <_ZN7max721912MAX7219_initEc>
			
			//buzzer karaying
			if(start_buzzer) {
     d0a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <start_buzzer>
     d0e:	88 23       	and	r24, r24
     d10:	79 f0       	breq	.+30     	; 0xd30 <main+0x31e>
				buzzer_timer = !buzzer_timer;
     d12:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <buzzer_timer>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	89 27       	eor	r24, r25
     d1a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <buzzer_timer>
				if(buzzer_timer) {
     d1e:	88 23       	and	r24, r24
     d20:	21 f0       	breq	.+8      	; 0xd2a <main+0x318>
					//  UART0TransmitString("On\r\n");
					controls.startBuzzer();
     d22:	88 e3       	ldi	r24, 0x38	; 56
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	a2 d0       	rcall	.+324    	; 0xe6c <_ZN8Controls11startBuzzerEv>
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <main+0x31e>
     d2a:	88 e3       	ldi	r24, 0x38	; 56
					} else {
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	a4 d0       	rcall	.+328    	; 0xe78 <_ZN8Controls10stopBuzzerEv>
     d30:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <button_change>
				}
			}
			// sending this
			if(button_change){
     d34:	88 23       	and	r24, r24
     d36:	91 f0       	breq	.+36     	; 0xd5c <main+0x34a>
     d38:	81 e0       	ldi	r24, 0x01	; 1
				set_temp_display = !set_temp_display;
     d3a:	c8 27       	eor	r28, r24
     d3c:	51 f0       	breq	.+20     	; 0xd52 <main+0x340>
				if(set_temp_display) {
     d3e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <set_temperature_copy>
					sendToDisplayBelow(set_temperature_copy);
     d42:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <set_temperature_copy+0x1>
     d46:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <set_temperature_copy+0x2>
     d4a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <set_temperature_copy+0x3>
     d4e:	96 db       	rcall	.-2260   	; 0x47c <_Z18sendToDisplayBelowf>
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <main+0x346>
     d52:	82 e1       	ldi	r24, 0x12	; 18
     d54:	92 e0       	ldi	r25, 0x02	; 2
					} else {
					max2.MAX7219_clearDisplay();
     d56:	81 d3       	rcall	.+1794   	; 0x145a <_ZN7max721920MAX7219_clearDisplayEv>
     d58:	0a dc       	rcall	.-2028   	; 0x56e <_Z21displaySetTemperaturev>
     d5a:	19 c0       	rjmp	.+50     	; 0xd8e <main+0x37c>
     d5c:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <skin_temperature>
				}
				displaySetTemperature();
     d60:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <skin_temperature+0x1>
			}
			
			else{
				sendToDisplay(air_temperature, skin_temperature, set_temperature);
     d64:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <skin_temperature+0x2>
     d68:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <skin_temperature+0x3>
     d6c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <air_temperature>
     d70:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <air_temperature+0x1>
     d74:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <air_temperature+0x2>
     d78:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <air_temperature+0x3>
     d7c:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
     d80:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
     d84:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
     d88:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
     d8c:	9e da       	rcall	.-2756   	; 0x2ca <_Z13sendToDisplayfff>
     d8e:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <set_temperature>
			}
			
			temperature_heater_off = set_temperature - 0.1f;
     d92:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <set_temperature+0x1>
     d96:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <set_temperature+0x2>
     d9a:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <set_temperature+0x3>
			temperature_heater_on = set_temperature - 0.2f;
			
			if(skin_temperature >= temperature_heater_off) {
     d9e:	80 90 28 02 	lds	r8, 0x0228	; 0x800228 <skin_temperature>
     da2:	90 90 29 02 	lds	r9, 0x0229	; 0x800229 <skin_temperature+0x1>
     da6:	a0 90 2a 02 	lds	r10, 0x022A	; 0x80022a <skin_temperature+0x2>
     daa:	b0 90 2b 02 	lds	r11, 0x022B	; 0x80022b <skin_temperature+0x3>
     dae:	2d ec       	ldi	r18, 0xCD	; 205
     db0:	3c ec       	ldi	r19, 0xCC	; 204
     db2:	4c ec       	ldi	r20, 0xCC	; 204
     db4:	5d e3       	ldi	r21, 0x3D	; 61
     db6:	c7 01       	movw	r24, r14
     db8:	b6 01       	movw	r22, r12
     dba:	ca d3       	rcall	.+1940   	; 0x1550 <__subsf3>
     dbc:	a5 01       	movw	r20, r10
     dbe:	94 01       	movw	r18, r8
     dc0:	2c d4       	rcall	.+2136   	; 0x161a <__cmpsf2>
     dc2:	18 16       	cp	r1, r24
				Led.led_do(HEATER_FAIL_LED,0);
     dc4:	5c f0       	brlt	.+22     	; 0xddc <main+0x3ca>
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	64 e0       	ldi	r22, 0x04	; 4
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	81 e1       	ldi	r24, 0x11	; 17
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	6b d0       	rcall	.+214    	; 0xeaa <_ZN3led6led_doEii>
				controls.stopHeater();
     dd4:	88 e3       	ldi	r24, 0x38	; 56
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	47 d0       	rcall	.+142    	; 0xe68 <_ZN8Controls10stopHeaterEv>
     dda:	1e c0       	rjmp	.+60     	; 0xe18 <main+0x406>
     ddc:	80 90 28 02 	lds	r8, 0x0228	; 0x800228 <skin_temperature>
				}else if(skin_temperature <= temperature_heater_on) {
     de0:	90 90 29 02 	lds	r9, 0x0229	; 0x800229 <skin_temperature+0x1>
     de4:	a0 90 2a 02 	lds	r10, 0x022A	; 0x80022a <skin_temperature+0x2>
     de8:	b0 90 2b 02 	lds	r11, 0x022B	; 0x80022b <skin_temperature+0x3>
     dec:	2d ec       	ldi	r18, 0xCD	; 205
     dee:	3c ec       	ldi	r19, 0xCC	; 204
     df0:	4c e4       	ldi	r20, 0x4C	; 76
     df2:	5e e3       	ldi	r21, 0x3E	; 62
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	ab d3       	rcall	.+1878   	; 0x1550 <__subsf3>
     dfa:	a5 01       	movw	r20, r10
     dfc:	94 01       	movw	r18, r8
     dfe:	5c d5       	rcall	.+2744   	; 0x18b8 <__gesf2>
     e00:	88 23       	and	r24, r24
     e02:	54 f0       	brlt	.+20     	; 0xe18 <main+0x406>
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	64 e0       	ldi	r22, 0x04	; 4
				Led.led_do(HEATER_FAIL_LED,1);
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	81 e1       	ldi	r24, 0x11	; 17
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	4c d0       	rcall	.+152    	; 0xeaa <_ZN3led6led_doEii>
     e12:	88 e3       	ldi	r24, 0x38	; 56
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	26 d0       	rcall	.+76     	; 0xe64 <_ZN8Controls11startHeaterEv>
     e18:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <displayUpdate>
				controls.startHeater();
     e1c:	3a cf       	rjmp	.-396    	; 0xc92 <main+0x280>
     e1e:	00 00       	nop
     e20:	38 cf       	rjmp	.-400    	; 0xc92 <main+0x280>

00000e22 <_GLOBAL__sub_I_resetFunc>:
			}
			
			displayUpdate = false;
     e22:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <set_temperature>
     e26:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <set_temperature+0x1>
		}
		else{
			asm volatile ("nop");
     e2a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <set_temperature+0x2>
Adafruit_MAX31865 maxSkin;

volatile float skin_temperature = 0.0;
volatile float air_temperature = 0.0;
float set_temperature = 36.5;
float set_temperature_copy = set_temperature;
     e2e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <set_temperature+0x3>
     e32:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <set_temperature_copy>
     e36:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <set_temperature_copy+0x1>
     e3a:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <set_temperature_copy+0x2>
     e3e:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <set_temperature_copy+0x3>

#define FIRSTINITIALIZE 0
#define REINITIALIZE	1


class max7219 {
     e42:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <max1+0x1>
     e46:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <max1>
     e4a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <max2+0x1>
     e4e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <max2>
     e52:	08 95       	ret

00000e54 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     e54:	25 9a       	sbi	0x04, 5	; 4
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	80 61       	ori	r24, 0x10	; 16
     e5e:	80 83       	st	Z, r24
     e60:	2d 98       	cbi	0x05, 5	; 5
     e62:	08 95       	ret

00000e64 <_ZN8Controls11startHeaterEv>:
     e64:	2d 9a       	sbi	0x05, 5	; 5
     e66:	08 95       	ret

00000e68 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     e68:	2d 98       	cbi	0x05, 5	; 5
     e6a:	08 95       	ret

00000e6c <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     e6c:	e2 e0       	ldi	r30, 0x02	; 2
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	80 81       	ld	r24, Z
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	80 83       	st	Z, r24
     e76:	08 95       	ret

00000e78 <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     e78:	e2 e0       	ldi	r30, 0x02	; 2
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	80 83       	st	Z, r24
     e82:	08 95       	ret

00000e84 <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     e84:	ea e0       	ldi	r30, 0x0A	; 10
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	80 81       	ld	r24, Z
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	80 83       	st	Z, r24
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     e8e:	80 81       	ld	r24, Z
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	80 83       	st	Z, r24
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     e94:	80 81       	ld	r24, Z
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	80 83       	st	Z, r24
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     e9a:	6b 9a       	sbi	0x0d, 3	; 13
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     e9c:	e1 e0       	ldi	r30, 0x01	; 1
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	80 83       	st	Z, r24
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     ea6:	9d 9a       	sbi	0x13, 5	; 19
     ea8:	08 95       	ret

00000eaa <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     eaa:	62 30       	cpi	r22, 0x02	; 2
     eac:	71 05       	cpc	r23, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <_ZN3led6led_doEii+0x8>
     eb0:	41 c0       	rjmp	.+130    	; 0xf34 <_ZN3led6led_doEii+0x8a>
     eb2:	3c f4       	brge	.+14     	; 0xec2 <_ZN3led6led_doEii+0x18>
     eb4:	61 15       	cp	r22, r1
     eb6:	71 05       	cpc	r23, r1
     eb8:	69 f0       	breq	.+26     	; 0xed4 <_ZN3led6led_doEii+0x2a>
     eba:	61 30       	cpi	r22, 0x01	; 1
     ebc:	71 05       	cpc	r23, r1
     ebe:	c1 f0       	breq	.+48     	; 0xef0 <_ZN3led6led_doEii+0x46>
     ec0:	08 95       	ret
     ec2:	64 30       	cpi	r22, 0x04	; 4
     ec4:	71 05       	cpc	r23, r1
     ec6:	41 f1       	breq	.+80     	; 0xf18 <_ZN3led6led_doEii+0x6e>
     ec8:	0c f4       	brge	.+2      	; 0xecc <_ZN3led6led_doEii+0x22>
     eca:	42 c0       	rjmp	.+132    	; 0xf50 <_ZN3led6led_doEii+0xa6>
     ecc:	65 30       	cpi	r22, 0x05	; 5
     ece:	71 05       	cpc	r23, r1
     ed0:	e9 f0       	breq	.+58     	; 0xf0c <_ZN3led6led_doEii+0x62>
     ed2:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     ed4:	45 2b       	or	r20, r21
     ed6:	31 f0       	breq	.+12     	; 0xee4 <_ZN3led6led_doEii+0x3a>
     ed8:	eb e0       	ldi	r30, 0x0B	; 11
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	80 81       	ld	r24, Z
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	80 83       	st	Z, r24
     ee2:	08 95       	ret
     ee4:	eb e0       	ldi	r30, 0x0B	; 11
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	80 81       	ld	r24, Z
     eea:	8d 7f       	andi	r24, 0xFD	; 253
     eec:	80 83       	st	Z, r24
     eee:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     ef0:	45 2b       	or	r20, r21
     ef2:	31 f0       	breq	.+12     	; 0xf00 <_ZN3led6led_doEii+0x56>
     ef4:	eb e0       	ldi	r30, 0x0B	; 11
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	80 81       	ld	r24, Z
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	80 83       	st	Z, r24
     efe:	08 95       	ret
     f00:	eb e0       	ldi	r30, 0x0B	; 11
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	80 81       	ld	r24, Z
     f06:	8f 7d       	andi	r24, 0xDF	; 223
     f08:	80 83       	st	Z, r24
     f0a:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     f0c:	45 2b       	or	r20, r21
     f0e:	11 f0       	breq	.+4      	; 0xf14 <_ZN3led6led_doEii+0x6a>
     f10:	73 9a       	sbi	0x0e, 3	; 14
     f12:	08 95       	ret
     f14:	73 98       	cbi	0x0e, 3	; 14
     f16:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     f18:	45 2b       	or	r20, r21
     f1a:	31 f0       	breq	.+12     	; 0xf28 <_ZN3led6led_doEii+0x7e>
     f1c:	e2 e0       	ldi	r30, 0x02	; 2
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	80 83       	st	Z, r24
     f26:	08 95       	ret
     f28:	e2 e0       	ldi	r30, 0x02	; 2
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	80 81       	ld	r24, Z
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	80 83       	st	Z, r24
     f32:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     f34:	45 2b       	or	r20, r21
     f36:	31 f0       	breq	.+12     	; 0xf44 <_ZN3led6led_doEii+0x9a>
     f38:	eb e0       	ldi	r30, 0x0B	; 11
     f3a:	f1 e0       	ldi	r31, 0x01	; 1
     f3c:	80 81       	ld	r24, Z
     f3e:	88 60       	ori	r24, 0x08	; 8
     f40:	80 83       	st	Z, r24
     f42:	08 95       	ret
     f44:	eb e0       	ldi	r30, 0x0B	; 11
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	80 81       	ld	r24, Z
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 83       	st	Z, r24
     f4e:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     f50:	45 2b       	or	r20, r21
     f52:	11 f0       	breq	.+4      	; 0xf58 <_ZN3led6led_doEii+0xae>
     f54:	a5 9a       	sbi	0x14, 5	; 20
     f56:	08 95       	ret
     f58:	a5 98       	cbi	0x14, 5	; 20
     f5a:	08 95       	ret

00000f5c <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     f5c:	6e bd       	out	0x2e, r22	; 46
     f5e:	0d b4       	in	r0, 0x2d	; 45
     f60:	07 fe       	sbrs	r0, 7
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <_ZN17Adafruit_MAX318657spixferEh+0x2>
     f64:	8e b5       	in	r24, 0x2e	; 46
     f66:	08 95       	ret

00000f68 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	7c 01       	movw	r14, r24
     f76:	ea 01       	movw	r28, r20
     f78:	12 2f       	mov	r17, r18
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	88 23       	and	r24, r24
     f80:	19 f0       	breq	.+6      	; 0xf88 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	51 f0       	breq	.+20     	; 0xf9a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x32>
     f86:	11 c0       	rjmp	.+34     	; 0xfaa <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     f88:	eb e0       	ldi	r30, 0x0B	; 11
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	80 81       	ld	r24, Z
     f8e:	8e 7f       	andi	r24, 0xFE	; 254
     f90:	80 83       	st	Z, r24
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	80 83       	st	Z, r24
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     f9a:	eb e0       	ldi	r30, 0x0B	; 11
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	80 81       	ld	r24, Z
     fa0:	8b 7f       	andi	r24, 0xFB	; 251
     fa2:	80 83       	st	Z, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	80 83       	st	Z, r24
     faa:	6f 77       	andi	r22, 0x7F	; 127
     fac:	c7 01       	movw	r24, r14
     fae:	d6 df       	rcall	.-84     	; 0xf5c <_ZN17Adafruit_MAX318657spixferEh>
     fb0:	0f ef       	ldi	r16, 0xFF	; 255
     fb2:	01 0f       	add	r16, r17
     fb4:	11 23       	and	r17, r17
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x68>
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	0c 0f       	add	r16, r28
     fc0:	1d 1f       	adc	r17, r29
     fc2:	6f ef       	ldi	r22, 0xFF	; 255
     fc4:	c7 01       	movw	r24, r14
     fc6:	ca df       	rcall	.-108    	; 0xf5c <_ZN17Adafruit_MAX318657spixferEh>
     fc8:	89 93       	st	Y+, r24
     fca:	c0 17       	cp	r28, r16
     fcc:	d1 07       	cpc	r29, r17
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5a>
     fd0:	f7 01       	movw	r30, r14
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	19 f0       	breq	.+6      	; 0xfde <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x76>
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	39 f0       	breq	.+14     	; 0xfea <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x82>
     fdc:	0b c0       	rjmp	.+22     	; 0xff4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
     fde:	eb e0       	ldi	r30, 0x0B	; 11
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	80 83       	st	Z, r24
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
     fea:	eb e0       	ldi	r30, 0x0B	; 11
     fec:	f1 e0       	ldi	r31, 0x01	; 1
     fee:	80 81       	ld	r24, Z
     ff0:	84 60       	ori	r24, 0x04	; 4
     ff2:	80 83       	st	Z, r24
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	08 95       	ret

00001002 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	ae 01       	movw	r20, r28
    1012:	4f 5f       	subi	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	a8 df       	rcall	.-176    	; 0xf68 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	0f 90       	pop	r0
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
    102e:	19 82       	std	Y+1, r1	; 0x01
    1030:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
    1032:	22 e0       	ldi	r18, 0x02	; 2
    1034:	ae 01       	movw	r20, r28
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	96 df       	rcall	.-212    	; 0xf68 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
    1040:	98 2f       	mov	r25, r24
    1042:	88 27       	eor	r24, r24
ret |=  buffer[1];
    1044:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
    1046:	82 2b       	or	r24, r18
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	14 2f       	mov	r17, r20
 
  switch(choose) {
    105c:	88 81       	ld	r24, Y
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	51 f0       	breq	.+20     	; 0x107a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x28>
    1066:	11 c0       	rjmp	.+34     	; 0x108a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 0:
		TEMP_I_PORT &=~ (1 << TEMP_I_PIN);
    1068:	eb e0       	ldi	r30, 0x0B	; 11
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	80 81       	ld	r24, Z
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 83       	st	Z, r24
		TEMP_II_PORT |= (1 << TEMP_II_PIN);
    1072:	80 81       	ld	r24, Z
    1074:	84 60       	ori	r24, 0x04	; 4
    1076:	80 83       	st	Z, r24
		break;
    1078:	08 c0       	rjmp	.+16     	; 0x108a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 1:
		TEMP_II_PORT &=~ (1 << TEMP_II_PIN);
    107a:	eb e0       	ldi	r30, 0x0B	; 11
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	80 81       	ld	r24, Z
    1080:	8b 7f       	andi	r24, 0xFB	; 251
    1082:	80 83       	st	Z, r24
		TEMP_I_PORT |= (1 << TEMP_I_PIN);
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
    108a:	60 68       	ori	r22, 0x80	; 128
    108c:	ce 01       	movw	r24, r28
    108e:	66 df       	rcall	.-308    	; 0xf5c <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
    1090:	61 2f       	mov	r22, r17
    1092:	ce 01       	movw	r24, r28
    1094:	63 df       	rcall	.-314    	; 0xf5c <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
    1096:	88 81       	ld	r24, Y
    1098:	88 23       	and	r24, r24
    109a:	19 f0       	breq	.+6      	; 0x10a2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x50>
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	39 f0       	breq	.+14     	; 0x10ae <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x5c>
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
   case 0:
	TEMP_I_PORT |= (1 << TEMP_I_PIN);
    10a2:	eb e0       	ldi	r30, 0x0B	; 11
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	80 81       	ld	r24, Z
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	80 83       	st	Z, r24
	break;
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
  case 1:
	TEMP_II_PORT |= (1 << TEMP_II_PIN);
    10ae:	eb e0       	ldi	r30, 0x0B	; 11
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	80 81       	ld	r24, Z
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	80 83       	st	Z, r24
	break;
}
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	08 95       	ret

000010c0 <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	9c df       	rcall	.-200    	; 0x1002 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
    10ca:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    10cc:	48 2f       	mov	r20, r24
    10ce:	42 60       	ori	r20, 0x02	; 2
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	ce 01       	movw	r24, r28
    10d4:	be df       	rcall	.-132    	; 0x1052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	8c df       	rcall	.-232    	; 0x1002 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    10ea:	11 23       	and	r17, r17
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
    10ee:	48 2f       	mov	r20, r24
    10f0:	40 68       	ori	r20, 0x80	; 128
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
    10f4:	48 2f       	mov	r20, r24
    10f6:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	ce 01       	movw	r24, r28
    10fc:	aa df       	rcall	.-172    	; 0x1052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	08 95       	ret

00001106 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    110e:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	77 df       	rcall	.-274    	; 0x1002 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    1114:	11 23       	and	r17, r17
    1116:	19 f0       	breq	.+6      	; 0x111e <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
    1118:	48 2f       	mov	r20, r24
    111a:	40 64       	ori	r20, 0x40	; 64
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
    111e:	48 2f       	mov	r20, r24
    1120:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	ce 01       	movw	r24, r28
    1126:	95 df       	rcall	.-214    	; 0x1052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	08 95       	ret

00001130 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ec 01       	movw	r28, r24
    1138:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	62 df       	rcall	.-316    	; 0x1002 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
    113e:	11 30       	cpi	r17, 0x01	; 1
    1140:	19 f4       	brne	.+6      	; 0x1148 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
    1142:	48 2f       	mov	r20, r24
    1144:	40 61       	ori	r20, 0x10	; 16
    1146:	02 c0       	rjmp	.+4      	; 0x114c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
    1148:	48 2f       	mov	r20, r24
    114a:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	80 df       	rcall	.-256    	; 0x1052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	08 95       	ret

0000115a <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
    1162:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    1164:	e8 e0       	ldi	r30, 0x08	; 8
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	80 81       	ld	r24, Z
    116a:	80 6c       	ori	r24, 0xC0	; 192
    116c:	80 83       	st	Z, r24
	SPI.begin();
    116e:	9e d1       	rcall	.+828    	; 0x14ac <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
    1170:	85 e5       	ldi	r24, 0x55	; 85
    1172:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
    1174:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	ce 01       	movw	r24, r28
    117a:	da df       	rcall	.-76     	; 0x1130 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	ce 01       	movw	r24, r28
    1180:	ad df       	rcall	.-166    	; 0x10dc <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	ce 01       	movw	r24, r28
    1186:	bf df       	rcall	.-130    	; 0x1106 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
    1188:	ce 01       	movw	r24, r28
    118a:	9a df       	rcall	.-204    	; 0x10c0 <_ZN17Adafruit_MAX3186510clearFaultEv>
    118c:	81 e0       	ldi	r24, 0x01	; 1
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	08 95       	ret

00001196 <_ZN17Adafruit_MAX318657readRTDEv>:
    1196:	cf 93       	push	r28
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
	clearFault();
    119c:	91 df       	rcall	.-222    	; 0x10c0 <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	ce 01       	movw	r24, r28
    11a2:	9c df       	rcall	.-200    	; 0x10dc <_ZN17Adafruit_MAX3186510enableBiasEb>
    11a4:	83 ec       	ldi	r24, 0xC3	; 195
    11a6:	99 e0       	ldi	r25, 0x09	; 9
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <_ZN17Adafruit_MAX318657readRTDEv+0x18>
    11ae:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	ce 01       	movw	r24, r28
    11b4:	26 df       	rcall	.-436    	; 0x1002 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    11b6:	48 2f       	mov	r20, r24
    11b8:	40 62       	ori	r20, 0x20	; 32
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	ce 01       	movw	r24, r28
    11be:	49 df       	rcall	.-366    	; 0x1052 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    11c0:	89 e7       	ldi	r24, 0x79	; 121
    11c2:	9f e3       	ldi	r25, 0x3F	; 63
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
    11c8:	00 c0       	rjmp	.+0      	; 0x11ca <_ZN17Adafruit_MAX318657readRTDEv+0x34>
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
    11ca:	00 00       	nop
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	ce 01       	movw	r24, r28
    11d0:	28 df       	rcall	.-432    	; 0x1022 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
    11dc:	4f 92       	push	r4
    11de:	5f 92       	push	r5
    11e0:	6f 92       	push	r6
    11e2:	7f 92       	push	r7
    11e4:	8f 92       	push	r8
    11e6:	9f 92       	push	r9
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	6a 01       	movw	r12, r20
    11fe:	7b 01       	movw	r14, r22
    1200:	48 01       	movw	r8, r16
    1202:	59 01       	movw	r10, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
    1204:	c8 df       	rcall	.-112    	; 0x1196 <_ZN17Adafruit_MAX318657readRTDEv>
    1206:	bc 01       	movw	r22, r24
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a3 d2       	rcall	.+1350   	; 0x1754 <__floatunsisf>
	Rt /= 32768;
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	58 e3       	ldi	r21, 0x38	; 56
    1216:	54 d3       	rcall	.+1704   	; 0x18c0 <__mulsf3>
	Rt *= refResistor;
    1218:	a5 01       	movw	r20, r10
    121a:	94 01       	movw	r18, r8
    121c:	51 d3       	rcall	.+1698   	; 0x18c0 <__mulsf3>
    121e:	4b 01       	movw	r8, r22
    1220:	5c 01       	movw	r10, r24
    1222:	a7 01       	movw	r20, r14
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
	temp = (sqrt(temp) + Z1) / Z4;
    1224:	96 01       	movw	r18, r12
    1226:	6f e7       	ldi	r22, 0x7F	; 127
    1228:	75 e0       	ldi	r23, 0x05	; 5
    122a:	8b e1       	ldi	r24, 0x1B	; 27
    122c:	96 eb       	ldi	r25, 0xB6	; 182
    122e:	f9 d1       	rcall	.+1010   	; 0x1622 <__divsf3>
    1230:	2b 01       	movw	r4, r22
    1232:	3c 01       	movw	r6, r24
    1234:	a5 01       	movw	r20, r10
    1236:	94 01       	movw	r18, r8
    1238:	c3 01       	movw	r24, r6
    123a:	b2 01       	movw	r22, r4
    123c:	41 d3       	rcall	.+1666   	; 0x18c0 <__mulsf3>
    123e:	26 e1       	ldi	r18, 0x16	; 22
    1240:	33 e8       	ldi	r19, 0x83	; 131
    1242:	43 e9       	ldi	r20, 0x93	; 147
    1244:	57 e3       	ldi	r21, 0x37	; 55
    1246:	85 d1       	rcall	.+778    	; 0x1552 <__addsf3>
    1248:	a2 d3       	rcall	.+1860   	; 0x198e <sqrt>
    124a:	22 e3       	ldi	r18, 0x32	; 50
    124c:	31 e1       	ldi	r19, 0x11	; 17
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5b e3       	ldi	r21, 0x3B	; 59
    1252:	7e d1       	rcall	.+764    	; 0x1550 <__subsf3>
    1254:	2f e7       	ldi	r18, 0x7F	; 127
    1256:	35 e0       	ldi	r19, 0x05	; 5
    1258:	4b e9       	ldi	r20, 0x9B	; 155
    125a:	55 eb       	ldi	r21, 0xB5	; 181
    125c:	e2 d1       	rcall	.+964    	; 0x1622 <__divsf3>
    125e:	06 2f       	mov	r16, r22
    1260:	17 2f       	mov	r17, r23
    1262:	d8 2f       	mov	r29, r24
    1264:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	25 d3       	rcall	.+1610   	; 0x18b8 <__gesf2>
    126e:	88 23       	and	r24, r24
    1270:	0c f0       	brlt	.+2      	; 0x1274 <_ZN17Adafruit_MAX3186511temperatureEff+0x98>

	// ugh.
	Rt /= RTDnominal;
	Rt *= 100;      // normalize to 100 ohm
    1272:	60 c0       	rjmp	.+192    	; 0x1334 <_ZN17Adafruit_MAX3186511temperatureEff+0x158>
    1274:	a7 01       	movw	r20, r14
    1276:	96 01       	movw	r18, r12
    1278:	c5 01       	movw	r24, r10
    127a:	b4 01       	movw	r22, r8
    127c:	d2 d1       	rcall	.+932    	; 0x1622 <__divsf3>
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	48 ec       	ldi	r20, 0xC8	; 200
    1284:	52 e4       	ldi	r21, 0x42	; 66
    1286:	1c d3       	rcall	.+1592   	; 0x18c0 <__mulsf3>
    1288:	6b 01       	movw	r12, r22

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
    128a:	7c 01       	movw	r14, r24
    128c:	2b e5       	ldi	r18, 0x5B	; 91
    128e:	32 e4       	ldi	r19, 0x42	; 66
    1290:	4e e0       	ldi	r20, 0x0E	; 14
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	15 d3       	rcall	.+1578   	; 0x18c0 <__mulsf3>
    1296:	2f e1       	ldi	r18, 0x1F	; 31
    1298:	35 e0       	ldi	r19, 0x05	; 5
    129a:	42 e7       	ldi	r20, 0x72	; 114
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	58 d1       	rcall	.+688    	; 0x1550 <__subsf3>
    12a0:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // square
    12a2:	3c 01       	movw	r6, r24
    12a4:	a7 01       	movw	r20, r14
    12a6:	96 01       	movw	r18, r12
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	09 d3       	rcall	.+1554   	; 0x18c0 <__mulsf3>
    12ae:	4b 01       	movw	r8, r22
	temp += 2.5859e-3 * rpoly;
    12b0:	5c 01       	movw	r10, r24
    12b2:	24 e3       	ldi	r18, 0x34	; 52
    12b4:	38 e7       	ldi	r19, 0x78	; 120
    12b6:	49 e2       	ldi	r20, 0x29	; 41
    12b8:	5b e3       	ldi	r21, 0x3B	; 59
    12ba:	02 d3       	rcall	.+1540   	; 0x18c0 <__mulsf3>
    12bc:	a3 01       	movw	r20, r6
    12be:	92 01       	movw	r18, r4
    12c0:	48 d1       	rcall	.+656    	; 0x1552 <__addsf3>
    12c2:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^3
    12c4:	3c 01       	movw	r6, r24
    12c6:	a5 01       	movw	r20, r10
    12c8:	94 01       	movw	r18, r8
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	f8 d2       	rcall	.+1520   	; 0x18c0 <__mulsf3>
    12d0:	4b 01       	movw	r8, r22
	temp -= 4.8260e-6 * rpoly;
    12d2:	5c 01       	movw	r10, r24
    12d4:	26 e0       	ldi	r18, 0x06	; 6
    12d6:	3f ee       	ldi	r19, 0xEF	; 239
    12d8:	41 ea       	ldi	r20, 0xA1	; 161
    12da:	56 e3       	ldi	r21, 0x36	; 54
    12dc:	f1 d2       	rcall	.+1506   	; 0x18c0 <__mulsf3>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	c3 01       	movw	r24, r6
    12e4:	b2 01       	movw	r22, r4
    12e6:	34 d1       	rcall	.+616    	; 0x1550 <__subsf3>
    12e8:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^4
    12ea:	3c 01       	movw	r6, r24
    12ec:	a5 01       	movw	r20, r10
    12ee:	94 01       	movw	r18, r8
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	e5 d2       	rcall	.+1482   	; 0x18c0 <__mulsf3>
    12f6:	4b 01       	movw	r8, r22
	temp -= 2.8183e-8 * rpoly;
    12f8:	5c 01       	movw	r10, r24
    12fa:	23 e1       	ldi	r18, 0x13	; 19
    12fc:	37 e1       	ldi	r19, 0x17	; 23
    12fe:	42 ef       	ldi	r20, 0xF2	; 242
    1300:	52 e3       	ldi	r21, 0x32	; 50
    1302:	de d2       	rcall	.+1468   	; 0x18c0 <__mulsf3>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	c3 01       	movw	r24, r6
    130a:	b2 01       	movw	r22, r4
    130c:	21 d1       	rcall	.+578    	; 0x1550 <__subsf3>
    130e:	2b 01       	movw	r4, r22
    1310:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
	temp += 1.5243e-10 * rpoly;
    1312:	a5 01       	movw	r20, r10
    1314:	94 01       	movw	r18, r8
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	d2 d2       	rcall	.+1444   	; 0x18c0 <__mulsf3>
    131c:	2b e3       	ldi	r18, 0x3B	; 59
    131e:	39 e9       	ldi	r19, 0x99	; 153
    1320:	47 e2       	ldi	r20, 0x27	; 39
    1322:	5f e2       	ldi	r21, 0x2F	; 47
    1324:	cd d2       	rcall	.+1434   	; 0x18c0 <__mulsf3>
    1326:	a3 01       	movw	r20, r6
    1328:	92 01       	movw	r18, r4
    132a:	13 d1       	rcall	.+550    	; 0x1552 <__addsf3>
    132c:	06 2f       	mov	r16, r22
    132e:	17 2f       	mov	r17, r23
    1330:	d8 2f       	mov	r29, r24

	return temp;
    1332:	c9 2f       	mov	r28, r25
    1334:	60 2f       	mov	r22, r16
    1336:	71 2f       	mov	r23, r17
    1338:	8d 2f       	mov	r24, r29
}
    133a:	9c 2f       	mov	r25, r28
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	5f 90       	pop	r5
    135a:	4f 90       	pop	r4
    135c:	08 95       	ret

0000135e <_Z8spi_initv>:

extern volatile uint8_t spiTimerCheck;

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    135e:	8c b5       	in	r24, 0x2c	; 44
    1360:	82 65       	ori	r24, 0x52	; 82
    1362:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
    1364:	8c b5       	in	r24, 0x2c	; 44
    1366:	8a 7f       	andi	r24, 0xFA	; 250
    1368:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDR(SCK_PORT) |= (1 << SCK_PIN) | (1 << MOSI_PIN) ;
    136a:	84 b1       	in	r24, 0x04	; 4
    136c:	86 60       	ori	r24, 0x06	; 6
    136e:	84 b9       	out	0x04, r24	; 4
	DDR(SS_PORT) |= (1  << SS_PIN);
    1370:	20 9a       	sbi	0x04, 0	; 4
	SS_PORT |= (1 << SS_PIN);
    1372:	28 9a       	sbi	0x05, 0	; 5
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    1374:	e7 e0       	ldi	r30, 0x07	; 7
    1376:	f1 e0       	ldi	r31, 0x01	; 1
    1378:	80 81       	ld	r24, Z
    137a:	80 6c       	ori	r24, 0xC0	; 192
    137c:	80 83       	st	Z, r24
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
    137e:	e8 e0       	ldi	r30, 0x08	; 8
    1380:	f1 e0       	ldi	r31, 0x01	; 1
    1382:	80 81       	ld	r24, Z
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	80 83       	st	Z, r24
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
    1388:	80 81       	ld	r24, Z
    138a:	80 64       	ori	r24, 0x40	; 64
    138c:	80 83       	st	Z, r24
    138e:	08 95       	ret

00001390 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1390:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	spiTimerCheck = 0;
    1392:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <spiTimerCheck>
	//wait 1 second in while loop.
	while ((!(SPSR & (1 << SPIF))) && spiTimerCheck <= 1){};
    1396:	0d b4       	in	r0, 0x2d	; 45
    1398:	07 fc       	sbrc	r0, 7
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <_Z11spiSendBytec+0x14>
    139c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <spiTimerCheck>
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	c8 f3       	brcs	.-14     	; 0x1396 <_Z11spiSendBytec+0x6>
    13a4:	08 95       	ret

000013a6 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
    13a6:	fc 01       	movw	r30, r24
	num = numm;
    13a8:	71 83       	std	Z+1, r23	; 0x01
    13aa:	60 83       	st	Z, r22
	digits1 = ii;
    13ac:	53 83       	std	Z+3, r21	; 0x03
    13ae:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
    13b0:	35 83       	std	Z+5, r19	; 0x05
    13b2:	24 83       	std	Z+4, r18	; 0x04
    13b4:	08 95       	ret

000013b6 <_ZN7max721917MAX7219_writeDataEcc>:
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
	}
}

void max7219::MAX7219_writeData(char data_register, char data)
{
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	ec 01       	movw	r28, r24
    13be:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
    13c0:	28 81       	ld	r18, Y
    13c2:	39 81       	ldd	r19, Y+1	; 0x01
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <_ZN7max721917MAX7219_writeDataEcc+0x1c>
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	31 05       	cpc	r19, r1
    13ce:	39 f0       	breq	.+14     	; 0x13de <_ZN7max721917MAX7219_writeDataEcc+0x28>
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 0:
		MAX7219_LOAD_ON_1(0);
    13d2:	e8 e0       	ldi	r30, 0x08	; 8
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 77       	andi	r24, 0x7F	; 127
    13da:	80 83       	st	Z, r24
		break;
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 1:
		MAX7219_LOAD_ON_2(1);
    13de:	e8 e0       	ldi	r30, 0x08	; 8
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 7b       	andi	r24, 0xBF	; 191
    13e6:	80 83       	st	Z, r24
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
    13e8:	86 2f       	mov	r24, r22
    13ea:	d2 df       	rcall	.-92     	; 0x1390 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
    13ec:	81 2f       	mov	r24, r17
    13ee:	d0 df       	rcall	.-96     	; 0x1390 <_Z11spiSendBytec>
	
	switch(max7219::num){
    13f0:	88 81       	ld	r24, Y
    13f2:	99 81       	ldd	r25, Y+1	; 0x01
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	19 f0       	breq	.+6      	; 0x13fe <_ZN7max721917MAX7219_writeDataEcc+0x48>
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	39 f0       	breq	.+14     	; 0x140a <_ZN7max721917MAX7219_writeDataEcc+0x54>
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
    13fe:	e8 e0       	ldi	r30, 0x08	; 8
    1400:	f1 e0       	ldi	r31, 0x01	; 1
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	80 83       	st	Z, r24
		break;
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
    140a:	e8 e0       	ldi	r30, 0x08	; 8
    140c:	f1 e0       	ldi	r31, 0x01	; 1
    140e:	80 81       	ld	r24, Z
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	80 83       	st	Z, r24
		break;
	}
	
}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	08 95       	ret

0000141c <_ZN7max721912MAX7219_initEc>:
void max7219::MAX7219_set(int numm, int ii, int jj) {
	num = numm;
	digits1 = ii;
	digits2 = jj;
}
void max7219::MAX7219_init(char a) {
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
	if(a == REINITIALIZE){
    1422:	61 30       	cpi	r22, 0x01	; 1
    1424:	11 f4       	brne	.+4      	; 0x142a <_ZN7max721912MAX7219_initEc+0xe>
		spi_init();
    1426:	9b df       	rcall	.-202    	; 0x135e <_Z8spi_initv>
    1428:	15 c0       	rjmp	.+42     	; 0x1454 <_ZN7max721912MAX7219_initEc+0x38>
	}
	else{
		spi_init();
    142a:	99 df       	rcall	.-206    	; 0x135e <_Z8spi_initv>
    142c:	4f ef       	ldi	r20, 0xFF	; 255
		// Decode mode to "Font Code-B"
		max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    142e:	69 e0       	ldi	r22, 0x09	; 9
    1430:	ce 01       	movw	r24, r28
    1432:	c1 df       	rcall	.-126    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    1434:	40 e0       	ldi	r20, 0x00	; 0
		max7219::MAX7219_writeData(MAX7219_MODE_TEST, 0);
    1436:	6f e0       	ldi	r22, 0x0F	; 15
    1438:	ce 01       	movw	r24, r28
    143a:	bd df       	rcall	.-134    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    143c:	47 e0       	ldi	r20, 0x07	; 7

		// Scan limit runs from 0.
		max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
    143e:	6b e0       	ldi	r22, 0x0B	; 11
    1440:	ce 01       	movw	r24, r28
    1442:	b9 df       	rcall	.-142    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    1444:	4f ef       	ldi	r20, 0xFF	; 255
		max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0xff);
    1446:	6a e0       	ldi	r22, 0x0A	; 10
    1448:	ce 01       	movw	r24, r28
    144a:	b5 df       	rcall	.-150    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    144c:	41 e0       	ldi	r20, 0x01	; 1
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
    144e:	6c e0       	ldi	r22, 0x0C	; 12
    1450:	ce 01       	movw	r24, r28
    1452:	b1 df       	rcall	.-158    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
	}
}
    1458:	08 95       	ret

0000145a <_ZN7max721920MAX7219_clearDisplayEv>:
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
	}
	
}

void max7219::MAX7219_clearDisplay()
{
    145e:	ec 01       	movw	r28, r24
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	69 e0       	ldi	r22, 0x09	; 9
    1464:	a8 df       	rcall	.-176    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(1,das);
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	ce 01       	movw	r24, r28
    146c:	a4 df       	rcall	.-184    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(2,das);
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	62 e0       	ldi	r22, 0x02	; 2
    1472:	ce 01       	movw	r24, r28
    1474:	a0 df       	rcall	.-192    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(3,das);
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	ce 01       	movw	r24, r28
    147c:	9c df       	rcall	.-200    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(4,das);
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	64 e0       	ldi	r22, 0x04	; 4
    1482:	ce 01       	movw	r24, r28
    1484:	98 df       	rcall	.-208    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(5,das);
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	65 e0       	ldi	r22, 0x05	; 5
    148a:	ce 01       	movw	r24, r28
    148c:	94 df       	rcall	.-216    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(6,das);
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	66 e0       	ldi	r22, 0x06	; 6
    1492:	ce 01       	movw	r24, r28
    1494:	90 df       	rcall	.-224    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(7,das);
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	67 e0       	ldi	r22, 0x07	; 7
    149a:	ce 01       	movw	r24, r28
    149c:	8c df       	rcall	.-232    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(8,das);
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	68 e0       	ldi	r22, 0x08	; 8
    14a2:	ce 01       	movw	r24, r28
    14a4:	88 df       	rcall	.-240    	; 0x13b6 <_ZN7max721917MAX7219_writeDataEcc>
    14a6:	df 91       	pop	r29
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
	*/
}
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDR(SS_PORT) |= (1 << SS_PIN);
    14ac:	20 9a       	sbi	0x04, 0	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    14ae:	8c b5       	in	r24, 0x2c	; 44
    14b0:	80 61       	ori	r24, 0x10	; 16
    14b2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    14b4:	8c b5       	in	r24, 0x2c	; 44
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
    14ba:	8c b5       	in	r24, 0x2c	; 44
    14bc:	8c 7f       	andi	r24, 0xFC	; 252
    14be:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDR(SCK_PORT) |= (1 << SCK_PIN);
    14c0:	21 9a       	sbi	0x04, 1	; 4
    //pinMode(MOSI, OUTPUT);
	DDR(MOSI_PORT) |= (1 << MOSI_PIN);
    14c2:	22 9a       	sbi	0x04, 2	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    14c4:	ea e0       	ldi	r30, 0x0A	; 10
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	80 81       	ld	r24, Z
    14ca:	85 60       	ori	r24, 0x05	; 5
    14cc:	80 83       	st	Z, r24
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    14ce:	eb e0       	ldi	r30, 0x0B	; 11
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	80 81       	ld	r24, Z
    14d4:	85 60       	ori	r24, 0x05	; 5
    14d6:	80 83       	st	Z, r24
    14d8:	08 95       	ret

000014da <_ZN6Timerr11setTimerNumEi>:
    14da:	fc 01       	movw	r30, r24
    14dc:	71 83       	std	Z+1, r23	; 0x01
    14de:	60 83       	st	Z, r22
    14e0:	08 95       	ret

000014e2 <_ZN6Timerr19setCompareInterruptEv>:
    14e2:	ef e6       	ldi	r30, 0x6F	; 111
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	82 60       	ori	r24, 0x02	; 2
    14ea:	80 83       	st	Z, r24
    14ec:	08 95       	ret

000014ee <_ZN6Timerr16startCustomTimerEi>:
    14ee:	07 2e       	mov	r0, r23
    14f0:	00 0c       	add	r0, r0
    14f2:	88 0b       	sbc	r24, r24
    14f4:	99 0b       	sbc	r25, r25
    14f6:	30 d1       	rcall	.+608    	; 0x1758 <__floatsisf>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	df d1       	rcall	.+958    	; 0x18c0 <__mulsf3>
    1502:	f7 d0       	rcall	.+494    	; 0x16f2 <__fixsfsi>
    1504:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1508:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    150c:	e1 e8       	ldi	r30, 0x81	; 129
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	85 60       	ori	r24, 0x05	; 5
    1514:	80 83       	st	Z, r24
    1516:	08 95       	ret

00001518 <_Z9initUART0v>:
    1518:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    151c:	87 e6       	ldi	r24, 0x67	; 103
    151e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1522:	88 e9       	ldi	r24, 0x98	; 152
    1524:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1528:	86 e0       	ldi	r24, 0x06	; 6
    152a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    152e:	08 95       	ret

00001530 <__vector_25>:
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	8f 93       	push	r24
    153c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1540:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <buffer>
    1544:	8f 91       	pop	r24
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <__subsf3>:
    1550:	50 58       	subi	r21, 0x80	; 128

00001552 <__addsf3>:
    1552:	bb 27       	eor	r27, r27
    1554:	aa 27       	eor	r26, r26
    1556:	0e d0       	rcall	.+28     	; 0x1574 <__addsf3x>
    1558:	75 c1       	rjmp	.+746    	; 0x1844 <__fp_round>
    155a:	66 d1       	rcall	.+716    	; 0x1828 <__fp_pscA>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__addsf3+0x18>
    155e:	6b d1       	rcall	.+726    	; 0x1836 <__fp_pscB>
    1560:	20 f0       	brcs	.+8      	; 0x156a <__addsf3+0x18>
    1562:	31 f4       	brne	.+12     	; 0x1570 <__addsf3+0x1e>
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	11 f4       	brne	.+4      	; 0x156c <__addsf3+0x1a>
    1568:	1e f4       	brtc	.+6      	; 0x1570 <__addsf3+0x1e>
    156a:	5b c1       	rjmp	.+694    	; 0x1822 <__fp_nan>
    156c:	0e f4       	brtc	.+2      	; 0x1570 <__addsf3+0x1e>
    156e:	e0 95       	com	r30
    1570:	e7 fb       	bst	r30, 7
    1572:	51 c1       	rjmp	.+674    	; 0x1816 <__fp_inf>

00001574 <__addsf3x>:
    1574:	e9 2f       	mov	r30, r25
    1576:	77 d1       	rcall	.+750    	; 0x1866 <__fp_split3>
    1578:	80 f3       	brcs	.-32     	; 0x155a <__addsf3+0x8>
    157a:	ba 17       	cp	r27, r26
    157c:	62 07       	cpc	r22, r18
    157e:	73 07       	cpc	r23, r19
    1580:	84 07       	cpc	r24, r20
    1582:	95 07       	cpc	r25, r21
    1584:	18 f0       	brcs	.+6      	; 0x158c <__addsf3x+0x18>
    1586:	71 f4       	brne	.+28     	; 0x15a4 <__addsf3x+0x30>
    1588:	9e f5       	brtc	.+102    	; 0x15f0 <__addsf3x+0x7c>
    158a:	8f c1       	rjmp	.+798    	; 0x18aa <__fp_zero>
    158c:	0e f4       	brtc	.+2      	; 0x1590 <__addsf3x+0x1c>
    158e:	e0 95       	com	r30
    1590:	0b 2e       	mov	r0, r27
    1592:	ba 2f       	mov	r27, r26
    1594:	a0 2d       	mov	r26, r0
    1596:	0b 01       	movw	r0, r22
    1598:	b9 01       	movw	r22, r18
    159a:	90 01       	movw	r18, r0
    159c:	0c 01       	movw	r0, r24
    159e:	ca 01       	movw	r24, r20
    15a0:	a0 01       	movw	r20, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	ff 27       	eor	r31, r31
    15a6:	59 1b       	sub	r21, r25
    15a8:	99 f0       	breq	.+38     	; 0x15d0 <__addsf3x+0x5c>
    15aa:	59 3f       	cpi	r21, 0xF9	; 249
    15ac:	50 f4       	brcc	.+20     	; 0x15c2 <__addsf3x+0x4e>
    15ae:	50 3e       	cpi	r21, 0xE0	; 224
    15b0:	68 f1       	brcs	.+90     	; 0x160c <__addsf3x+0x98>
    15b2:	1a 16       	cp	r1, r26
    15b4:	f0 40       	sbci	r31, 0x00	; 0
    15b6:	a2 2f       	mov	r26, r18
    15b8:	23 2f       	mov	r18, r19
    15ba:	34 2f       	mov	r19, r20
    15bc:	44 27       	eor	r20, r20
    15be:	58 5f       	subi	r21, 0xF8	; 248
    15c0:	f3 cf       	rjmp	.-26     	; 0x15a8 <__addsf3x+0x34>
    15c2:	46 95       	lsr	r20
    15c4:	37 95       	ror	r19
    15c6:	27 95       	ror	r18
    15c8:	a7 95       	ror	r26
    15ca:	f0 40       	sbci	r31, 0x00	; 0
    15cc:	53 95       	inc	r21
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__addsf3x+0x4e>
    15d0:	7e f4       	brtc	.+30     	; 0x15f0 <__addsf3x+0x7c>
    15d2:	1f 16       	cp	r1, r31
    15d4:	ba 0b       	sbc	r27, r26
    15d6:	62 0b       	sbc	r22, r18
    15d8:	73 0b       	sbc	r23, r19
    15da:	84 0b       	sbc	r24, r20
    15dc:	ba f0       	brmi	.+46     	; 0x160c <__addsf3x+0x98>
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	a1 f0       	breq	.+40     	; 0x160a <__addsf3x+0x96>
    15e2:	ff 0f       	add	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	c2 f7       	brpl	.-16     	; 0x15de <__addsf3x+0x6a>
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <__addsf3x+0x98>
    15f0:	ba 0f       	add	r27, r26
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 1f       	adc	r23, r19
    15f6:	84 1f       	adc	r24, r20
    15f8:	48 f4       	brcc	.+18     	; 0x160c <__addsf3x+0x98>
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	b7 95       	ror	r27
    1602:	f7 95       	ror	r31
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	08 f0       	brcs	.+2      	; 0x160a <__addsf3x+0x96>
    1608:	b3 cf       	rjmp	.-154    	; 0x1570 <__addsf3+0x1e>
    160a:	93 95       	inc	r25
    160c:	88 0f       	add	r24, r24
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__addsf3x+0x9e>
    1610:	99 27       	eor	r25, r25
    1612:	ee 0f       	add	r30, r30
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	08 95       	ret

0000161a <__cmpsf2>:
    161a:	d9 d0       	rcall	.+434    	; 0x17ce <__fp_cmp>
    161c:	08 f4       	brcc	.+2      	; 0x1620 <__cmpsf2+0x6>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	08 95       	ret

00001622 <__divsf3>:
    1622:	0c d0       	rcall	.+24     	; 0x163c <__divsf3x>
    1624:	0f c1       	rjmp	.+542    	; 0x1844 <__fp_round>
    1626:	07 d1       	rcall	.+526    	; 0x1836 <__fp_pscB>
    1628:	40 f0       	brcs	.+16     	; 0x163a <__divsf3+0x18>
    162a:	fe d0       	rcall	.+508    	; 0x1828 <__fp_pscA>
    162c:	30 f0       	brcs	.+12     	; 0x163a <__divsf3+0x18>
    162e:	21 f4       	brne	.+8      	; 0x1638 <__divsf3+0x16>
    1630:	5f 3f       	cpi	r21, 0xFF	; 255
    1632:	19 f0       	breq	.+6      	; 0x163a <__divsf3+0x18>
    1634:	f0 c0       	rjmp	.+480    	; 0x1816 <__fp_inf>
    1636:	51 11       	cpse	r21, r1
    1638:	39 c1       	rjmp	.+626    	; 0x18ac <__fp_szero>
    163a:	f3 c0       	rjmp	.+486    	; 0x1822 <__fp_nan>

0000163c <__divsf3x>:
    163c:	14 d1       	rcall	.+552    	; 0x1866 <__fp_split3>
    163e:	98 f3       	brcs	.-26     	; 0x1626 <__divsf3+0x4>

00001640 <__divsf3_pse>:
    1640:	99 23       	and	r25, r25
    1642:	c9 f3       	breq	.-14     	; 0x1636 <__divsf3+0x14>
    1644:	55 23       	and	r21, r21
    1646:	b1 f3       	breq	.-20     	; 0x1634 <__divsf3+0x12>
    1648:	95 1b       	sub	r25, r21
    164a:	55 0b       	sbc	r21, r21
    164c:	bb 27       	eor	r27, r27
    164e:	aa 27       	eor	r26, r26
    1650:	62 17       	cp	r22, r18
    1652:	73 07       	cpc	r23, r19
    1654:	84 07       	cpc	r24, r20
    1656:	38 f0       	brcs	.+14     	; 0x1666 <__divsf3_pse+0x26>
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	5f 4f       	sbci	r21, 0xFF	; 255
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	44 1f       	adc	r20, r20
    1662:	aa 1f       	adc	r26, r26
    1664:	a9 f3       	breq	.-22     	; 0x1650 <__divsf3_pse+0x10>
    1666:	33 d0       	rcall	.+102    	; 0x16ce <__divsf3_pse+0x8e>
    1668:	0e 2e       	mov	r0, r30
    166a:	3a f0       	brmi	.+14     	; 0x167a <__divsf3_pse+0x3a>
    166c:	e0 e8       	ldi	r30, 0x80	; 128
    166e:	30 d0       	rcall	.+96     	; 0x16d0 <__divsf3_pse+0x90>
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	50 40       	sbci	r21, 0x00	; 0
    1674:	e6 95       	lsr	r30
    1676:	00 1c       	adc	r0, r0
    1678:	ca f7       	brpl	.-14     	; 0x166c <__divsf3_pse+0x2c>
    167a:	29 d0       	rcall	.+82     	; 0x16ce <__divsf3_pse+0x8e>
    167c:	fe 2f       	mov	r31, r30
    167e:	27 d0       	rcall	.+78     	; 0x16ce <__divsf3_pse+0x8e>
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	bb 1f       	adc	r27, r27
    1688:	26 17       	cp	r18, r22
    168a:	37 07       	cpc	r19, r23
    168c:	48 07       	cpc	r20, r24
    168e:	ab 07       	cpc	r26, r27
    1690:	b0 e8       	ldi	r27, 0x80	; 128
    1692:	09 f0       	breq	.+2      	; 0x1696 <__divsf3_pse+0x56>
    1694:	bb 0b       	sbc	r27, r27
    1696:	80 2d       	mov	r24, r0
    1698:	bf 01       	movw	r22, r30
    169a:	ff 27       	eor	r31, r31
    169c:	93 58       	subi	r25, 0x83	; 131
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	2a f0       	brmi	.+10     	; 0x16ac <__divsf3_pse+0x6c>
    16a2:	9e 3f       	cpi	r25, 0xFE	; 254
    16a4:	51 05       	cpc	r21, r1
    16a6:	68 f0       	brcs	.+26     	; 0x16c2 <__divsf3_pse+0x82>
    16a8:	b6 c0       	rjmp	.+364    	; 0x1816 <__fp_inf>
    16aa:	00 c1       	rjmp	.+512    	; 0x18ac <__fp_szero>
    16ac:	5f 3f       	cpi	r21, 0xFF	; 255
    16ae:	ec f3       	brlt	.-6      	; 0x16aa <__divsf3_pse+0x6a>
    16b0:	98 3e       	cpi	r25, 0xE8	; 232
    16b2:	dc f3       	brlt	.-10     	; 0x16aa <__divsf3_pse+0x6a>
    16b4:	86 95       	lsr	r24
    16b6:	77 95       	ror	r23
    16b8:	67 95       	ror	r22
    16ba:	b7 95       	ror	r27
    16bc:	f7 95       	ror	r31
    16be:	9f 5f       	subi	r25, 0xFF	; 255
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__divsf3_pse+0x74>
    16c2:	88 0f       	add	r24, r24
    16c4:	91 1d       	adc	r25, r1
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	97 f9       	bld	r25, 7
    16cc:	08 95       	ret
    16ce:	e1 e0       	ldi	r30, 0x01	; 1
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	bb 1f       	adc	r27, r27
    16d8:	62 17       	cp	r22, r18
    16da:	73 07       	cpc	r23, r19
    16dc:	84 07       	cpc	r24, r20
    16de:	ba 07       	cpc	r27, r26
    16e0:	20 f0       	brcs	.+8      	; 0x16ea <__divsf3_pse+0xaa>
    16e2:	62 1b       	sub	r22, r18
    16e4:	73 0b       	sbc	r23, r19
    16e6:	84 0b       	sbc	r24, r20
    16e8:	ba 0b       	sbc	r27, r26
    16ea:	ee 1f       	adc	r30, r30
    16ec:	88 f7       	brcc	.-30     	; 0x16d0 <__divsf3_pse+0x90>
    16ee:	e0 95       	com	r30
    16f0:	08 95       	ret

000016f2 <__fixsfsi>:
    16f2:	04 d0       	rcall	.+8      	; 0x16fc <__fixunssfsi>
    16f4:	68 94       	set
    16f6:	b1 11       	cpse	r27, r1
    16f8:	d9 c0       	rjmp	.+434    	; 0x18ac <__fp_szero>
    16fa:	08 95       	ret

000016fc <__fixunssfsi>:
    16fc:	bc d0       	rcall	.+376    	; 0x1876 <__fp_splitA>
    16fe:	88 f0       	brcs	.+34     	; 0x1722 <__fixunssfsi+0x26>
    1700:	9f 57       	subi	r25, 0x7F	; 127
    1702:	90 f0       	brcs	.+36     	; 0x1728 <__fixunssfsi+0x2c>
    1704:	b9 2f       	mov	r27, r25
    1706:	99 27       	eor	r25, r25
    1708:	b7 51       	subi	r27, 0x17	; 23
    170a:	a0 f0       	brcs	.+40     	; 0x1734 <__fixunssfsi+0x38>
    170c:	d1 f0       	breq	.+52     	; 0x1742 <__fixunssfsi+0x46>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	1a f0       	brmi	.+6      	; 0x171e <__fixunssfsi+0x22>
    1718:	ba 95       	dec	r27
    171a:	c9 f7       	brne	.-14     	; 0x170e <__fixunssfsi+0x12>
    171c:	12 c0       	rjmp	.+36     	; 0x1742 <__fixunssfsi+0x46>
    171e:	b1 30       	cpi	r27, 0x01	; 1
    1720:	81 f0       	breq	.+32     	; 0x1742 <__fixunssfsi+0x46>
    1722:	c3 d0       	rcall	.+390    	; 0x18aa <__fp_zero>
    1724:	b1 e0       	ldi	r27, 0x01	; 1
    1726:	08 95       	ret
    1728:	c0 c0       	rjmp	.+384    	; 0x18aa <__fp_zero>
    172a:	67 2f       	mov	r22, r23
    172c:	78 2f       	mov	r23, r24
    172e:	88 27       	eor	r24, r24
    1730:	b8 5f       	subi	r27, 0xF8	; 248
    1732:	39 f0       	breq	.+14     	; 0x1742 <__fixunssfsi+0x46>
    1734:	b9 3f       	cpi	r27, 0xF9	; 249
    1736:	cc f3       	brlt	.-14     	; 0x172a <__fixunssfsi+0x2e>
    1738:	86 95       	lsr	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b3 95       	inc	r27
    1740:	d9 f7       	brne	.-10     	; 0x1738 <__fixunssfsi+0x3c>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__fixunssfsi+0x56>
    1744:	90 95       	com	r25
    1746:	80 95       	com	r24
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__floatunsisf>:
    1754:	e8 94       	clt
    1756:	09 c0       	rjmp	.+18     	; 0x176a <__floatsisf+0x12>

00001758 <__floatsisf>:
    1758:	97 fb       	bst	r25, 7
    175a:	3e f4       	brtc	.+14     	; 0x176a <__floatsisf+0x12>
    175c:	90 95       	com	r25
    175e:	80 95       	com	r24
    1760:	70 95       	com	r23
    1762:	61 95       	neg	r22
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	8f 4f       	sbci	r24, 0xFF	; 255
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	99 23       	and	r25, r25
    176c:	a9 f0       	breq	.+42     	; 0x1798 <__floatsisf+0x40>
    176e:	f9 2f       	mov	r31, r25
    1770:	96 e9       	ldi	r25, 0x96	; 150
    1772:	bb 27       	eor	r27, r27
    1774:	93 95       	inc	r25
    1776:	f6 95       	lsr	r31
    1778:	87 95       	ror	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f1 11       	cpse	r31, r1
    1782:	f8 cf       	rjmp	.-16     	; 0x1774 <__floatsisf+0x1c>
    1784:	fa f4       	brpl	.+62     	; 0x17c4 <__floatsisf+0x6c>
    1786:	bb 0f       	add	r27, r27
    1788:	11 f4       	brne	.+4      	; 0x178e <__floatsisf+0x36>
    178a:	60 ff       	sbrs	r22, 0
    178c:	1b c0       	rjmp	.+54     	; 0x17c4 <__floatsisf+0x6c>
    178e:	6f 5f       	subi	r22, 0xFF	; 255
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <__floatsisf+0x6c>
    1798:	88 23       	and	r24, r24
    179a:	11 f0       	breq	.+4      	; 0x17a0 <__floatsisf+0x48>
    179c:	96 e9       	ldi	r25, 0x96	; 150
    179e:	11 c0       	rjmp	.+34     	; 0x17c2 <__floatsisf+0x6a>
    17a0:	77 23       	and	r23, r23
    17a2:	21 f0       	breq	.+8      	; 0x17ac <__floatsisf+0x54>
    17a4:	9e e8       	ldi	r25, 0x8E	; 142
    17a6:	87 2f       	mov	r24, r23
    17a8:	76 2f       	mov	r23, r22
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <__floatsisf+0x5e>
    17ac:	66 23       	and	r22, r22
    17ae:	71 f0       	breq	.+28     	; 0x17cc <__floatsisf+0x74>
    17b0:	96 e8       	ldi	r25, 0x86	; 134
    17b2:	86 2f       	mov	r24, r22
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	2a f0       	brmi	.+10     	; 0x17c4 <__floatsisf+0x6c>
    17ba:	9a 95       	dec	r25
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	da f7       	brpl	.-10     	; 0x17ba <__floatsisf+0x62>
    17c4:	88 0f       	add	r24, r24
    17c6:	96 95       	lsr	r25
    17c8:	87 95       	ror	r24
    17ca:	97 f9       	bld	r25, 7
    17cc:	08 95       	ret

000017ce <__fp_cmp>:
    17ce:	99 0f       	add	r25, r25
    17d0:	00 08       	sbc	r0, r0
    17d2:	55 0f       	add	r21, r21
    17d4:	aa 0b       	sbc	r26, r26
    17d6:	e0 e8       	ldi	r30, 0x80	; 128
    17d8:	fe ef       	ldi	r31, 0xFE	; 254
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	e8 07       	cpc	r30, r24
    17e0:	f9 07       	cpc	r31, r25
    17e2:	c0 f0       	brcs	.+48     	; 0x1814 <__fp_cmp+0x46>
    17e4:	12 16       	cp	r1, r18
    17e6:	13 06       	cpc	r1, r19
    17e8:	e4 07       	cpc	r30, r20
    17ea:	f5 07       	cpc	r31, r21
    17ec:	98 f0       	brcs	.+38     	; 0x1814 <__fp_cmp+0x46>
    17ee:	62 1b       	sub	r22, r18
    17f0:	73 0b       	sbc	r23, r19
    17f2:	84 0b       	sbc	r24, r20
    17f4:	95 0b       	sbc	r25, r21
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__fp_cmp+0x38>
    17f8:	0a 26       	eor	r0, r26
    17fa:	61 f0       	breq	.+24     	; 0x1814 <__fp_cmp+0x46>
    17fc:	23 2b       	or	r18, r19
    17fe:	24 2b       	or	r18, r20
    1800:	25 2b       	or	r18, r21
    1802:	21 f4       	brne	.+8      	; 0x180c <__fp_cmp+0x3e>
    1804:	08 95       	ret
    1806:	0a 26       	eor	r0, r26
    1808:	09 f4       	brne	.+2      	; 0x180c <__fp_cmp+0x3e>
    180a:	a1 40       	sbci	r26, 0x01	; 1
    180c:	a6 95       	lsr	r26
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	81 1d       	adc	r24, r1
    1812:	81 1d       	adc	r24, r1
    1814:	08 95       	ret

00001816 <__fp_inf>:
    1816:	97 f9       	bld	r25, 7
    1818:	9f 67       	ori	r25, 0x7F	; 127
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	08 95       	ret

00001822 <__fp_nan>:
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	80 ec       	ldi	r24, 0xC0	; 192
    1826:	08 95       	ret

00001828 <__fp_pscA>:
    1828:	00 24       	eor	r0, r0
    182a:	0a 94       	dec	r0
    182c:	16 16       	cp	r1, r22
    182e:	17 06       	cpc	r1, r23
    1830:	18 06       	cpc	r1, r24
    1832:	09 06       	cpc	r0, r25
    1834:	08 95       	ret

00001836 <__fp_pscB>:
    1836:	00 24       	eor	r0, r0
    1838:	0a 94       	dec	r0
    183a:	12 16       	cp	r1, r18
    183c:	13 06       	cpc	r1, r19
    183e:	14 06       	cpc	r1, r20
    1840:	05 06       	cpc	r0, r21
    1842:	08 95       	ret

00001844 <__fp_round>:
    1844:	09 2e       	mov	r0, r25
    1846:	03 94       	inc	r0
    1848:	00 0c       	add	r0, r0
    184a:	11 f4       	brne	.+4      	; 0x1850 <__fp_round+0xc>
    184c:	88 23       	and	r24, r24
    184e:	52 f0       	brmi	.+20     	; 0x1864 <__fp_round+0x20>
    1850:	bb 0f       	add	r27, r27
    1852:	40 f4       	brcc	.+16     	; 0x1864 <__fp_round+0x20>
    1854:	bf 2b       	or	r27, r31
    1856:	11 f4       	brne	.+4      	; 0x185c <__fp_round+0x18>
    1858:	60 ff       	sbrs	r22, 0
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <__fp_round+0x20>
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__fp_split3>:
    1866:	57 fd       	sbrc	r21, 7
    1868:	90 58       	subi	r25, 0x80	; 128
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	59 f0       	breq	.+22     	; 0x1886 <__fp_splitA+0x10>
    1870:	5f 3f       	cpi	r21, 0xFF	; 255
    1872:	71 f0       	breq	.+28     	; 0x1890 <__fp_splitA+0x1a>
    1874:	47 95       	ror	r20

00001876 <__fp_splitA>:
    1876:	88 0f       	add	r24, r24
    1878:	97 fb       	bst	r25, 7
    187a:	99 1f       	adc	r25, r25
    187c:	61 f0       	breq	.+24     	; 0x1896 <__fp_splitA+0x20>
    187e:	9f 3f       	cpi	r25, 0xFF	; 255
    1880:	79 f0       	breq	.+30     	; 0x18a0 <__fp_splitA+0x2a>
    1882:	87 95       	ror	r24
    1884:	08 95       	ret
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	14 06       	cpc	r1, r20
    188c:	55 1f       	adc	r21, r21
    188e:	f2 cf       	rjmp	.-28     	; 0x1874 <__fp_split3+0xe>
    1890:	46 95       	lsr	r20
    1892:	f1 df       	rcall	.-30     	; 0x1876 <__fp_splitA>
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <__fp_splitA+0x30>
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	99 1f       	adc	r25, r25
    189e:	f1 cf       	rjmp	.-30     	; 0x1882 <__fp_splitA+0xc>
    18a0:	86 95       	lsr	r24
    18a2:	71 05       	cpc	r23, r1
    18a4:	61 05       	cpc	r22, r1
    18a6:	08 94       	sec
    18a8:	08 95       	ret

000018aa <__fp_zero>:
    18aa:	e8 94       	clt

000018ac <__fp_szero>:
    18ac:	bb 27       	eor	r27, r27
    18ae:	66 27       	eor	r22, r22
    18b0:	77 27       	eor	r23, r23
    18b2:	cb 01       	movw	r24, r22
    18b4:	97 f9       	bld	r25, 7
    18b6:	08 95       	ret

000018b8 <__gesf2>:
    18b8:	8a df       	rcall	.-236    	; 0x17ce <__fp_cmp>
    18ba:	08 f4       	brcc	.+2      	; 0x18be <__gesf2+0x6>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <__mulsf3>:
    18c0:	0b d0       	rcall	.+22     	; 0x18d8 <__mulsf3x>
    18c2:	c0 cf       	rjmp	.-128    	; 0x1844 <__fp_round>
    18c4:	b1 df       	rcall	.-158    	; 0x1828 <__fp_pscA>
    18c6:	28 f0       	brcs	.+10     	; 0x18d2 <__mulsf3+0x12>
    18c8:	b6 df       	rcall	.-148    	; 0x1836 <__fp_pscB>
    18ca:	18 f0       	brcs	.+6      	; 0x18d2 <__mulsf3+0x12>
    18cc:	95 23       	and	r25, r21
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__mulsf3+0x12>
    18d0:	a2 cf       	rjmp	.-188    	; 0x1816 <__fp_inf>
    18d2:	a7 cf       	rjmp	.-178    	; 0x1822 <__fp_nan>
    18d4:	11 24       	eor	r1, r1
    18d6:	ea cf       	rjmp	.-44     	; 0x18ac <__fp_szero>

000018d8 <__mulsf3x>:
    18d8:	c6 df       	rcall	.-116    	; 0x1866 <__fp_split3>
    18da:	a0 f3       	brcs	.-24     	; 0x18c4 <__mulsf3+0x4>

000018dc <__mulsf3_pse>:
    18dc:	95 9f       	mul	r25, r21
    18de:	d1 f3       	breq	.-12     	; 0x18d4 <__mulsf3+0x14>
    18e0:	95 0f       	add	r25, r21
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	55 1f       	adc	r21, r21
    18e6:	62 9f       	mul	r22, r18
    18e8:	f0 01       	movw	r30, r0
    18ea:	72 9f       	mul	r23, r18
    18ec:	bb 27       	eor	r27, r27
    18ee:	f0 0d       	add	r31, r0
    18f0:	b1 1d       	adc	r27, r1
    18f2:	63 9f       	mul	r22, r19
    18f4:	aa 27       	eor	r26, r26
    18f6:	f0 0d       	add	r31, r0
    18f8:	b1 1d       	adc	r27, r1
    18fa:	aa 1f       	adc	r26, r26
    18fc:	64 9f       	mul	r22, r20
    18fe:	66 27       	eor	r22, r22
    1900:	b0 0d       	add	r27, r0
    1902:	a1 1d       	adc	r26, r1
    1904:	66 1f       	adc	r22, r22
    1906:	82 9f       	mul	r24, r18
    1908:	22 27       	eor	r18, r18
    190a:	b0 0d       	add	r27, r0
    190c:	a1 1d       	adc	r26, r1
    190e:	62 1f       	adc	r22, r18
    1910:	73 9f       	mul	r23, r19
    1912:	b0 0d       	add	r27, r0
    1914:	a1 1d       	adc	r26, r1
    1916:	62 1f       	adc	r22, r18
    1918:	83 9f       	mul	r24, r19
    191a:	a0 0d       	add	r26, r0
    191c:	61 1d       	adc	r22, r1
    191e:	22 1f       	adc	r18, r18
    1920:	74 9f       	mul	r23, r20
    1922:	33 27       	eor	r19, r19
    1924:	a0 0d       	add	r26, r0
    1926:	61 1d       	adc	r22, r1
    1928:	23 1f       	adc	r18, r19
    192a:	84 9f       	mul	r24, r20
    192c:	60 0d       	add	r22, r0
    192e:	21 1d       	adc	r18, r1
    1930:	82 2f       	mov	r24, r18
    1932:	76 2f       	mov	r23, r22
    1934:	6a 2f       	mov	r22, r26
    1936:	11 24       	eor	r1, r1
    1938:	9f 57       	subi	r25, 0x7F	; 127
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	8a f0       	brmi	.+34     	; 0x1960 <__mulsf3_pse+0x84>
    193e:	e1 f0       	breq	.+56     	; 0x1978 <__mulsf3_pse+0x9c>
    1940:	88 23       	and	r24, r24
    1942:	4a f0       	brmi	.+18     	; 0x1956 <__mulsf3_pse+0x7a>
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	bb 1f       	adc	r27, r27
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	91 50       	subi	r25, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	a9 f7       	brne	.-22     	; 0x1940 <__mulsf3_pse+0x64>
    1956:	9e 3f       	cpi	r25, 0xFE	; 254
    1958:	51 05       	cpc	r21, r1
    195a:	70 f0       	brcs	.+28     	; 0x1978 <__mulsf3_pse+0x9c>
    195c:	5c cf       	rjmp	.-328    	; 0x1816 <__fp_inf>
    195e:	a6 cf       	rjmp	.-180    	; 0x18ac <__fp_szero>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	ec f3       	brlt	.-6      	; 0x195e <__mulsf3_pse+0x82>
    1964:	98 3e       	cpi	r25, 0xE8	; 232
    1966:	dc f3       	brlt	.-10     	; 0x195e <__mulsf3_pse+0x82>
    1968:	86 95       	lsr	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f7 95       	ror	r31
    1972:	e7 95       	ror	r30
    1974:	9f 5f       	subi	r25, 0xFF	; 255
    1976:	c1 f7       	brne	.-16     	; 0x1968 <__mulsf3_pse+0x8c>
    1978:	fe 2b       	or	r31, r30
    197a:	88 0f       	add	r24, r24
    197c:	91 1d       	adc	r25, r1
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	97 f9       	bld	r25, 7
    1984:	08 95       	ret
    1986:	11 f4       	brne	.+4      	; 0x198c <__mulsf3_pse+0xb0>
    1988:	0e f4       	brtc	.+2      	; 0x198c <__mulsf3_pse+0xb0>
    198a:	4b cf       	rjmp	.-362    	; 0x1822 <__fp_nan>
    198c:	3e c0       	rjmp	.+124    	; 0x1a0a <__fp_mpack>

0000198e <sqrt>:
    198e:	73 df       	rcall	.-282    	; 0x1876 <__fp_splitA>
    1990:	d0 f3       	brcs	.-12     	; 0x1986 <__mulsf3_pse+0xaa>
    1992:	99 23       	and	r25, r25
    1994:	d9 f3       	breq	.-10     	; 0x198c <__mulsf3_pse+0xb0>
    1996:	ce f3       	brts	.-14     	; 0x198a <__mulsf3_pse+0xae>
    1998:	9f 57       	subi	r25, 0x7F	; 127
    199a:	55 0b       	sbc	r21, r21
    199c:	87 ff       	sbrs	r24, 7
    199e:	43 d0       	rcall	.+134    	; 0x1a26 <__fp_norm2>
    19a0:	00 24       	eor	r0, r0
    19a2:	a0 e6       	ldi	r26, 0x60	; 96
    19a4:	40 ea       	ldi	r20, 0xA0	; 160
    19a6:	90 01       	movw	r18, r0
    19a8:	80 58       	subi	r24, 0x80	; 128
    19aa:	56 95       	lsr	r21
    19ac:	97 95       	ror	r25
    19ae:	28 f4       	brcc	.+10     	; 0x19ba <sqrt+0x2c>
    19b0:	80 5c       	subi	r24, 0xC0	; 192
    19b2:	66 0f       	add	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	20 f0       	brcs	.+8      	; 0x19c2 <sqrt+0x34>
    19ba:	26 17       	cp	r18, r22
    19bc:	37 07       	cpc	r19, r23
    19be:	48 07       	cpc	r20, r24
    19c0:	30 f4       	brcc	.+12     	; 0x19ce <sqrt+0x40>
    19c2:	62 1b       	sub	r22, r18
    19c4:	73 0b       	sbc	r23, r19
    19c6:	84 0b       	sbc	r24, r20
    19c8:	20 29       	or	r18, r0
    19ca:	31 29       	or	r19, r1
    19cc:	4a 2b       	or	r20, r26
    19ce:	a6 95       	lsr	r26
    19d0:	17 94       	ror	r1
    19d2:	07 94       	ror	r0
    19d4:	20 25       	eor	r18, r0
    19d6:	31 25       	eor	r19, r1
    19d8:	4a 27       	eor	r20, r26
    19da:	58 f7       	brcc	.-42     	; 0x19b2 <sqrt+0x24>
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	88 1f       	adc	r24, r24
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <sqrt+0x5e>
    19e4:	26 17       	cp	r18, r22
    19e6:	37 07       	cpc	r19, r23
    19e8:	48 07       	cpc	r20, r24
    19ea:	30 f4       	brcc	.+12     	; 0x19f8 <sqrt+0x6a>
    19ec:	62 0b       	sbc	r22, r18
    19ee:	73 0b       	sbc	r23, r19
    19f0:	84 0b       	sbc	r24, r20
    19f2:	20 0d       	add	r18, r0
    19f4:	31 1d       	adc	r19, r1
    19f6:	41 1d       	adc	r20, r1
    19f8:	a0 95       	com	r26
    19fa:	81 f7       	brne	.-32     	; 0x19dc <sqrt+0x4e>
    19fc:	b9 01       	movw	r22, r18
    19fe:	84 2f       	mov	r24, r20
    1a00:	91 58       	subi	r25, 0x81	; 129
    1a02:	88 0f       	add	r24, r24
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	08 95       	ret

00001a0a <__fp_mpack>:
    1a0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <__fp_mpack_finite+0xc>

00001a0e <__fp_mpack_finite>:
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	20 f4       	brcc	.+8      	; 0x1a1a <__fp_mpack_finite+0xc>
    1a12:	87 95       	ror	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	88 0f       	add	r24, r24
    1a1c:	91 1d       	adc	r25, r1
    1a1e:	96 95       	lsr	r25
    1a20:	87 95       	ror	r24
    1a22:	97 f9       	bld	r25, 7
    1a24:	08 95       	ret

00001a26 <__fp_norm2>:
    1a26:	91 50       	subi	r25, 0x01	; 1
    1a28:	50 40       	sbci	r21, 0x00	; 0
    1a2a:	66 0f       	add	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	d2 f7       	brpl	.-12     	; 0x1a26 <__fp_norm2>
    1a32:	08 95       	ret

00001a34 <__divmodhi4>:
    1a34:	97 fb       	bst	r25, 7
    1a36:	07 2e       	mov	r0, r23
    1a38:	16 f4       	brtc	.+4      	; 0x1a3e <__divmodhi4+0xa>
    1a3a:	00 94       	com	r0
    1a3c:	06 d0       	rcall	.+12     	; 0x1a4a <__divmodhi4_neg1>
    1a3e:	77 fd       	sbrc	r23, 7
    1a40:	08 d0       	rcall	.+16     	; 0x1a52 <__divmodhi4_neg2>
    1a42:	0b d0       	rcall	.+22     	; 0x1a5a <__udivmodhi4>
    1a44:	07 fc       	sbrc	r0, 7
    1a46:	05 d0       	rcall	.+10     	; 0x1a52 <__divmodhi4_neg2>
    1a48:	3e f4       	brtc	.+14     	; 0x1a58 <__divmodhi4_exit>

00001a4a <__divmodhi4_neg1>:
    1a4a:	90 95       	com	r25
    1a4c:	81 95       	neg	r24
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	08 95       	ret

00001a52 <__divmodhi4_neg2>:
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255

00001a58 <__divmodhi4_exit>:
    1a58:	08 95       	ret

00001a5a <__udivmodhi4>:
    1a5a:	aa 1b       	sub	r26, r26
    1a5c:	bb 1b       	sub	r27, r27
    1a5e:	51 e1       	ldi	r21, 0x11	; 17
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <__udivmodhi4_ep>

00001a62 <__udivmodhi4_loop>:
    1a62:	aa 1f       	adc	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	a6 17       	cp	r26, r22
    1a68:	b7 07       	cpc	r27, r23
    1a6a:	10 f0       	brcs	.+4      	; 0x1a70 <__udivmodhi4_ep>
    1a6c:	a6 1b       	sub	r26, r22
    1a6e:	b7 0b       	sbc	r27, r23

00001a70 <__udivmodhi4_ep>:
    1a70:	88 1f       	adc	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	5a 95       	dec	r21
    1a76:	a9 f7       	brne	.-22     	; 0x1a62 <__udivmodhi4_loop>
    1a78:	80 95       	com	r24
    1a7a:	90 95       	com	r25
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	08 95       	ret

00001a82 <__tablejump2__>:
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	88 1f       	adc	r24, r24
    1a88:	8b bf       	out	0x3b, r24	; 59
    1a8a:	07 90       	elpm	r0, Z+
    1a8c:	f6 91       	elpm	r31, Z
    1a8e:	e0 2d       	mov	r30, r0
    1a90:	19 94       	eijmp

00001a92 <_exit>:
    1a92:	f8 94       	cli

00001a94 <__stop_program>:
    1a94:	ff cf       	rjmp	.-2      	; 0x1a94 <__stop_program>
