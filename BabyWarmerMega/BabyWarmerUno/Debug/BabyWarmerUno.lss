
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000175c  000017f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800210  00800210  00001800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000498f  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018fa  00000000  00000000  00006497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001607  00000000  00000000  00007d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  00009398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000134f  00000000  00000000  00009a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c2f  00000000  00000000  0000ad63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000c992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__vector_17>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	7b 05       	cpc	r23, r11

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ec e5       	ldi	r30, 0x5C	; 92
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a0 31       	cpi	r26, 0x10	; 16
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a0 e1       	ldi	r26, 0x10	; 16
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a6 34       	cpi	r26, 0x46	; 70
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	97 d3       	rcall	.+1838   	; 0x870 <main>
     142:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z12init_devicesv>:
	
	//second 4-7 segment display from left to right
	max1.MAX7219_writeData(4,B);
	max1.MAX7219_writeData(8,A);
	max1.MAX7219_writeData(6,B);
	max1.MAX7219_writeData(2,Y);
     148:	78 94       	sei
     14a:	8e e3       	ldi	r24, 0x3E	; 62
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	ec d4       	rcall	.+2520   	; 0xb28 <_ZN8Controls12initControlsEv>
     150:	87 e1       	ldi	r24, 0x17	; 23
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	01 d5       	rcall	.+2562   	; 0xb58 <_ZN3led8led_initEv>
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	80 e4       	ldi	r24, 0x40	; 64
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN6Timerr11setTimerNumEi>
     162:	80 e4       	ldi	r24, 0x40	; 64
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN6Timerr19setCompareInterruptEv>
     16a:	68 ec       	ldi	r22, 0xC8	; 200
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 e4       	ldi	r24, 0x40	; 64
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN6Timerr16startCustomTimerEi>
     176:	24 e0       	ldi	r18, 0x04	; 4
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	44 e0       	ldi	r20, 0x04	; 4
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	8e e1       	ldi	r24, 0x1E	; 30
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	73 d7       	rcall	.+3814   	; 0x106e <_ZN7max721911MAX7219_setEiii>
     188:	8f e3       	ldi	r24, 0x3F	; 63
     18a:	9c e9       	ldi	r25, 0x9C	; 156
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <_Z12init_devicesv+0x44>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_Z12init_devicesv+0x4a>
     192:	00 00       	nop
     194:	24 e0       	ldi	r18, 0x04	; 4
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	44 e0       	ldi	r20, 0x04	; 4
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	88 e1       	ldi	r24, 0x18	; 24
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	64 d7       	rcall	.+3784   	; 0x106e <_ZN7max721911MAX7219_setEiii>
     1a6:	8f e3       	ldi	r24, 0x3F	; 63
     1a8:	9c e9       	ldi	r25, 0x9C	; 156
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z12init_devicesv+0x62>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z12init_devicesv+0x68>
     1b0:	00 00       	nop
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	8e e1       	ldi	r24, 0x1E	; 30
     1b6:	92 e0       	ldi	r25, 0x02	; 2
     1b8:	95 d7       	rcall	.+3882   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
     1ba:	8f e3       	ldi	r24, 0x3F	; 63
     1bc:	9c e9       	ldi	r25, 0x9C	; 156
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z12init_devicesv+0x76>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z12init_devicesv+0x7c>
     1c4:	00 00       	nop
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	88 e1       	ldi	r24, 0x18	; 24
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	8b d7       	rcall	.+3862   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
     1ce:	8f e3       	ldi	r24, 0x3F	; 63
     1d0:	9c e9       	ldi	r25, 0x9C	; 156
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z12init_devicesv+0x8a>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_Z12init_devicesv+0x90>
     1d8:	00 00       	nop
     1da:	8e e1       	ldi	r24, 0x1E	; 30
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	a1 d7       	rcall	.+3906   	; 0x1122 <_ZN7max721920MAX7219_clearDisplayEv>
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	26 e7       	ldi	r18, 0x76	; 118
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	91 50       	subi	r25, 0x01	; 1
     1e8:	20 40       	sbci	r18, 0x00	; 0
     1ea:	80 40       	sbci	r24, 0x00	; 0
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <_Z12init_devicesv+0x9e>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_Z12init_devicesv+0xa8>
     1f0:	00 00       	nop
     1f2:	88 e1       	ldi	r24, 0x18	; 24
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	95 d7       	rcall	.+3882   	; 0x1122 <_ZN7max721920MAX7219_clearDisplayEv>
     1f8:	9f ef       	ldi	r25, 0xFF	; 255
     1fa:	26 e7       	ldi	r18, 0x76	; 118
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	91 50       	subi	r25, 0x01	; 1
     200:	20 40       	sbci	r18, 0x00	; 0
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <_Z12init_devicesv+0xb6>
     206:	00 c0       	rjmp	.+0      	; 0x208 <_Z12init_devicesv+0xc0>
     208:	00 00       	nop
     20a:	08 95       	ret

0000020c <__vector_17>:
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	2f 93       	push	r18
     218:	3f 93       	push	r19
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
     21e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     222:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     226:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <startMonitor>
     22a:	88 23       	and	r24, r24
     22c:	49 f0       	breq	.+18     	; 0x240 <__vector_17+0x34>
     22e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <second>
     232:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <second+0x1>
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <second+0x1>
     23c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <second>
     240:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <display_count>
     244:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <display_count+0x1>
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <display_count+0x1>
     24e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <display_count>
     252:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <display_count>
     256:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <display_count+0x1>
     25a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     262:	28 17       	cp	r18, r24
     264:	39 07       	cpc	r19, r25
     266:	3c f0       	brlt	.+14     	; 0x276 <__vector_17+0x6a>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <displayUpdate>
     26e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <display_count+0x1>
     272:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <display_count>
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
     282:	0f 90       	pop	r0
     284:	1f 90       	pop	r1
     286:	18 95       	reti

00000288 <_Z13sendToDisplayfff>:
     288:	4f 92       	push	r4
     28a:	5f 92       	push	r5
     28c:	6f 92       	push	r6
     28e:	7f 92       	push	r7
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	2b 01       	movw	r4, r22
     2aa:	3c 01       	movw	r6, r24
     2ac:	49 01       	movw	r8, r18
     2ae:	5a 01       	movw	r10, r20
     2b0:	67 01       	movw	r12, r14
     2b2:	78 01       	movw	r14, r16
     2b4:	4f ef       	ldi	r20, 0xFF	; 255
     2b6:	69 e0       	ldi	r22, 0x09	; 9
     2b8:	8e e1       	ldi	r24, 0x1E	; 30
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	e0 d6       	rcall	.+3520   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e2       	ldi	r20, 0x20	; 32
     2c4:	51 e4       	ldi	r21, 0x41	; 65
     2c6:	c3 01       	movw	r24, r6
     2c8:	b2 01       	movw	r22, r4
     2ca:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__divsf3>
     2ce:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixunssfsi>
     2d2:	46 2f       	mov	r20, r22
     2d4:	68 e0       	ldi	r22, 0x08	; 8
     2d6:	8e e1       	ldi	r24, 0x1E	; 30
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	d1 d6       	rcall	.+3490   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     2dc:	c3 01       	movw	r24, r6
     2de:	b2 01       	movw	r22, r4
     2e0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixsfsi>
     2e4:	ca e0       	ldi	r28, 0x0A	; 10
     2e6:	d0 e0       	ldi	r29, 0x00	; 0
     2e8:	cb 01       	movw	r24, r22
     2ea:	be 01       	movw	r22, r28
     2ec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     2f0:	48 2f       	mov	r20, r24
     2f2:	40 68       	ori	r20, 0x80	; 128
     2f4:	66 e0       	ldi	r22, 0x06	; 6
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	c1 d6       	rcall	.+3458   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e2       	ldi	r20, 0x20	; 32
     302:	51 e4       	ldi	r21, 0x41	; 65
     304:	c3 01       	movw	r24, r6
     306:	b2 01       	movw	r22, r4
     308:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__mulsf3>
     30c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixsfsi>
     310:	cb 01       	movw	r24, r22
     312:	be 01       	movw	r22, r28
     314:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     318:	48 2f       	mov	r20, r24
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	8e e1       	ldi	r24, 0x1E	; 30
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	ae d6       	rcall	.+3420   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e2       	ldi	r20, 0x20	; 32
     328:	51 e4       	ldi	r21, 0x41	; 65
     32a:	c5 01       	movw	r24, r10
     32c:	b4 01       	movw	r22, r8
     32e:	dc d7       	rcall	.+4024   	; 0x12e8 <__divsf3>
     330:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixunssfsi>
     334:	46 2f       	mov	r20, r22
     336:	67 e0       	ldi	r22, 0x07	; 7
     338:	8e e1       	ldi	r24, 0x1E	; 30
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	a0 d6       	rcall	.+3392   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     33e:	c5 01       	movw	r24, r10
     340:	b4 01       	movw	r22, r8
     342:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixsfsi>
     346:	cb 01       	movw	r24, r22
     348:	be 01       	movw	r22, r28
     34a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     34e:	48 2f       	mov	r20, r24
     350:	40 68       	ori	r20, 0x80	; 128
     352:	65 e0       	ldi	r22, 0x05	; 5
     354:	8e e1       	ldi	r24, 0x1E	; 30
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	92 d6       	rcall	.+3364   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e2       	ldi	r20, 0x20	; 32
     360:	51 e4       	ldi	r21, 0x41	; 65
     362:	c5 01       	movw	r24, r10
     364:	b4 01       	movw	r22, r8
     366:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__mulsf3>
     36a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixsfsi>
     36e:	cb 01       	movw	r24, r22
     370:	be 01       	movw	r22, r28
     372:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     376:	48 2f       	mov	r20, r24
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	8e e1       	ldi	r24, 0x1E	; 30
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	7f d6       	rcall	.+3326   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     380:	4f ef       	ldi	r20, 0xFF	; 255
     382:	69 e0       	ldi	r22, 0x09	; 9
     384:	88 e1       	ldi	r24, 0x18	; 24
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	7a d6       	rcall	.+3316   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e2       	ldi	r20, 0x20	; 32
     390:	51 e4       	ldi	r21, 0x41	; 65
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	a8 d7       	rcall	.+3920   	; 0x12e8 <__divsf3>
     398:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixunssfsi>
     39c:	46 2f       	mov	r20, r22
     39e:	66 e0       	ldi	r22, 0x06	; 6
     3a0:	88 e1       	ldi	r24, 0x18	; 24
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	6c d6       	rcall	.+3288   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixsfsi>
     3ae:	cb 01       	movw	r24, r22
     3b0:	be 01       	movw	r22, r28
     3b2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     3b6:	48 2f       	mov	r20, r24
     3b8:	40 68       	ori	r20, 0x80	; 128
     3ba:	68 e0       	ldi	r22, 0x08	; 8
     3bc:	88 e1       	ldi	r24, 0x18	; 24
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	5e d6       	rcall	.+3260   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e2       	ldi	r20, 0x20	; 32
     3c8:	51 e4       	ldi	r21, 0x41	; 65
     3ca:	c7 01       	movw	r24, r14
     3cc:	b6 01       	movw	r22, r12
     3ce:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__mulsf3>
     3d2:	f2 d7       	rcall	.+4068   	; 0x13b8 <__fixsfsi>
     3d4:	cb 01       	movw	r24, r22
     3d6:	be 01       	movw	r22, r28
     3d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     3dc:	48 2f       	mov	r20, r24
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	88 e1       	ldi	r24, 0x18	; 24
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	4c d6       	rcall	.+3224   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	08 95       	ret

00000408 <_Z18sendToDisplayBelowf>:
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	6b 01       	movw	r12, r22
     416:	7c 01       	movw	r14, r24
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	69 e0       	ldi	r22, 0x09	; 9
     41c:	88 e1       	ldi	r24, 0x18	; 24
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	2e d6       	rcall	.+3164   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e2       	ldi	r20, 0x20	; 32
     428:	51 e4       	ldi	r21, 0x41	; 65
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	5c d7       	rcall	.+3768   	; 0x12e8 <__divsf3>
     430:	c8 d7       	rcall	.+3984   	; 0x13c2 <__fixunssfsi>
     432:	46 2f       	mov	r20, r22
     434:	66 e0       	ldi	r22, 0x06	; 6
     436:	88 e1       	ldi	r24, 0x18	; 24
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	21 d6       	rcall	.+3138   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	bb d7       	rcall	.+3958   	; 0x13b8 <__fixsfsi>
     442:	ca e0       	ldi	r28, 0x0A	; 10
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	cb 01       	movw	r24, r22
     448:	be 01       	movw	r22, r28
     44a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     44e:	48 2f       	mov	r20, r24
     450:	40 68       	ori	r20, 0x80	; 128
     452:	68 e0       	ldi	r22, 0x08	; 8
     454:	88 e1       	ldi	r24, 0x18	; 24
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	12 d6       	rcall	.+3108   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e2       	ldi	r20, 0x20	; 32
     460:	51 e4       	ldi	r21, 0x41	; 65
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__mulsf3>
     46a:	a6 d7       	rcall	.+3916   	; 0x13b8 <__fixsfsi>
     46c:	cb 01       	movw	r24, r22
     46e:	be 01       	movw	r22, r28
     470:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divmodhi4>
     474:	48 2f       	mov	r20, r24
     476:	62 e0       	ldi	r22, 0x02	; 2
     478:	88 e1       	ldi	r24, 0x18	; 24
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	00 d6       	rcall	.+3072   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <_Z21displaySetTemperaturev>:
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	69 e0       	ldi	r22, 0x09	; 9
     490:	8e e1       	ldi	r24, 0x1E	; 30
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	f4 d5       	rcall	.+3048   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	8e e1       	ldi	r24, 0x1E	; 30
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	ef d5       	rcall	.+3038   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4a0:	4b e5       	ldi	r20, 0x5B	; 91
     4a2:	67 e0       	ldi	r22, 0x07	; 7
     4a4:	8e e1       	ldi	r24, 0x1E	; 30
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	ea d5       	rcall	.+3028   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4aa:	4f e4       	ldi	r20, 0x4F	; 79
     4ac:	65 e0       	ldi	r22, 0x05	; 5
     4ae:	8e e1       	ldi	r24, 0x1E	; 30
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	e5 d5       	rcall	.+3018   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4b4:	4f e0       	ldi	r20, 0x0F	; 15
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	8e e1       	ldi	r24, 0x1E	; 30
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	e0 d5       	rcall	.+3008   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4be:	4f e0       	ldi	r20, 0x0F	; 15
     4c0:	64 e0       	ldi	r22, 0x04	; 4
     4c2:	8e e1       	ldi	r24, 0x1E	; 30
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	db d5       	rcall	.+2998   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4c8:	47 e6       	ldi	r20, 0x67	; 103
     4ca:	68 e0       	ldi	r22, 0x08	; 8
     4cc:	8e e1       	ldi	r24, 0x1E	; 30
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	d6 d5       	rcall	.+2988   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	66 e0       	ldi	r22, 0x06	; 6
     4d6:	8e e1       	ldi	r24, 0x1E	; 30
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	d1 d5       	rcall	.+2978   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	62 e0       	ldi	r22, 0x02	; 2
     4e0:	8e e1       	ldi	r24, 0x1E	; 30
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	cc c5       	rjmp	.+2968   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4e6:	08 95       	ret

000004e8 <_Z14displayPreHeatv>:
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	69 e0       	ldi	r22, 0x09	; 9
     4ec:	8e e1       	ldi	r24, 0x1E	; 30
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	c6 d5       	rcall	.+2956   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	8e e1       	ldi	r24, 0x1E	; 30
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	c1 d5       	rcall	.+2946   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     4fc:	47 e6       	ldi	r20, 0x67	; 103
     4fe:	67 e0       	ldi	r22, 0x07	; 7
     500:	8e e1       	ldi	r24, 0x1E	; 30
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	bc d5       	rcall	.+2936   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     506:	45 e0       	ldi	r20, 0x05	; 5
     508:	65 e0       	ldi	r22, 0x05	; 5
     50a:	8e e1       	ldi	r24, 0x1E	; 30
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	b7 d5       	rcall	.+2926   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     510:	4f e4       	ldi	r20, 0x4F	; 79
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	b2 d5       	rcall	.+2916   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     51a:	47 e3       	ldi	r20, 0x37	; 55
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	8e e1       	ldi	r24, 0x1E	; 30
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	ad d5       	rcall	.+2906   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     524:	4f e4       	ldi	r20, 0x4F	; 79
     526:	68 e0       	ldi	r22, 0x08	; 8
     528:	8e e1       	ldi	r24, 0x1E	; 30
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	a8 d5       	rcall	.+2896   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     52e:	47 e7       	ldi	r20, 0x77	; 119
     530:	66 e0       	ldi	r22, 0x06	; 6
     532:	8e e1       	ldi	r24, 0x1E	; 30
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	a3 d5       	rcall	.+2886   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     538:	4f e0       	ldi	r20, 0x0F	; 15
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	8e e1       	ldi	r24, 0x1E	; 30
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	9e c5       	rjmp	.+2876   	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
     542:	08 95       	ret

00000544 <_Z8titititiv>:
// Order of right and left 4-7 segment matrix registers.
// 3 7 5 1      4 8 6 2


void titititi(){
	controls.startBuzzer();
     544:	8e e3       	ldi	r24, 0x3E	; 62
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	fb d2       	rcall	.+1526   	; 0xb40 <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	81 ee       	ldi	r24, 0xE1	; 225
     54e:	94 e0       	ldi	r25, 0x04	; 4
     550:	21 50       	subi	r18, 0x01	; 1
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <_Z8titititiv+0xc>
     558:	00 c0       	rjmp	.+0      	; 0x55a <_Z8titititiv+0x16>
     55a:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     55c:	8e e3       	ldi	r24, 0x3E	; 62
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	f5 d2       	rcall	.+1514   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     562:	2f ef       	ldi	r18, 0xFF	; 255
     564:	81 ee       	ldi	r24, 0xE1	; 225
     566:	94 e0       	ldi	r25, 0x04	; 4
     568:	21 50       	subi	r18, 0x01	; 1
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <_Z8titititiv+0x24>
     570:	00 c0       	rjmp	.+0      	; 0x572 <_Z8titititiv+0x2e>
     572:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     574:	8e e3       	ldi	r24, 0x3E	; 62
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	e3 d2       	rcall	.+1478   	; 0xb40 <_ZN8Controls11startBuzzerEv>
     57a:	2f ef       	ldi	r18, 0xFF	; 255
     57c:	81 ee       	ldi	r24, 0xE1	; 225
     57e:	94 e0       	ldi	r25, 0x04	; 4
     580:	21 50       	subi	r18, 0x01	; 1
     582:	80 40       	sbci	r24, 0x00	; 0
     584:	90 40       	sbci	r25, 0x00	; 0
     586:	e1 f7       	brne	.-8      	; 0x580 <_Z8titititiv+0x3c>
     588:	00 c0       	rjmp	.+0      	; 0x58a <_Z8titititiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     58a:	00 00       	nop
     58c:	8e e3       	ldi	r24, 0x3E	; 62
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	dd d2       	rcall	.+1466   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     592:	2f ef       	ldi	r18, 0xFF	; 255
     594:	85 ea       	ldi	r24, 0xA5	; 165
     596:	9e e0       	ldi	r25, 0x0E	; 14
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	80 40       	sbci	r24, 0x00	; 0
     59c:	90 40       	sbci	r25, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <_Z8titititiv+0x54>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <_Z8titititiv+0x5e>
	_delay_ms(300);
	controls.startBuzzer();
     5a2:	00 00       	nop
     5a4:	8e e3       	ldi	r24, 0x3E	; 62
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	cb d2       	rcall	.+1430   	; 0xb40 <_ZN8Controls11startBuzzerEv>
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	81 ee       	ldi	r24, 0xE1	; 225
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <_Z8titititiv+0x6c>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <_Z8titititiv+0x76>
	_delay_ms(100);
	controls.stopBuzzer();
     5ba:	00 00       	nop
     5bc:	8e e3       	ldi	r24, 0x3E	; 62
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	c5 d2       	rcall	.+1418   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	81 ee       	ldi	r24, 0xE1	; 225
     5c6:	94 e0       	ldi	r25, 0x04	; 4
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <_Z8titititiv+0x84>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_Z8titititiv+0x8e>
	_delay_ms(100);
	controls.startBuzzer();
     5d2:	00 00       	nop
     5d4:	8e e3       	ldi	r24, 0x3E	; 62
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	b3 d2       	rcall	.+1382   	; 0xb40 <_ZN8Controls11startBuzzerEv>
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	81 ee       	ldi	r24, 0xE1	; 225
     5de:	94 e0       	ldi	r25, 0x04	; 4
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <_Z8titititiv+0x9c>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <_Z8titititiv+0xa6>
     5ea:	00 00       	nop
     5ec:	08 95       	ret

000005ee <_Z4titiv>:
	_delay_ms(100);
}

void titi(){
	controls.startBuzzer();
     5ee:	8e e3       	ldi	r24, 0x3E	; 62
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	a6 d2       	rcall	.+1356   	; 0xb40 <_ZN8Controls11startBuzzerEv>
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	81 ee       	ldi	r24, 0xE1	; 225
     5f8:	94 e0       	ldi	r25, 0x04	; 4
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <_Z4titiv+0xc>
     602:	00 c0       	rjmp	.+0      	; 0x604 <_Z4titiv+0x16>
     604:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     606:	8e e3       	ldi	r24, 0x3E	; 62
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	a0 d2       	rcall	.+1344   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     60c:	2f ef       	ldi	r18, 0xFF	; 255
     60e:	81 ee       	ldi	r24, 0xE1	; 225
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	21 50       	subi	r18, 0x01	; 1
     614:	80 40       	sbci	r24, 0x00	; 0
     616:	90 40       	sbci	r25, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <_Z4titiv+0x24>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <_Z4titiv+0x2e>
     61c:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     61e:	8e e3       	ldi	r24, 0x3E	; 62
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	8e d2       	rcall	.+1308   	; 0xb40 <_ZN8Controls11startBuzzerEv>
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	81 ee       	ldi	r24, 0xE1	; 225
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	80 40       	sbci	r24, 0x00	; 0
     62e:	90 40       	sbci	r25, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <_Z4titiv+0x3c>
     632:	00 c0       	rjmp	.+0      	; 0x634 <_Z4titiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     634:	00 00       	nop
     636:	8e e3       	ldi	r24, 0x3E	; 62
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	88 d2       	rcall	.+1296   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	81 ee       	ldi	r24, 0xE1	; 225
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	21 50       	subi	r18, 0x01	; 1
     644:	80 40       	sbci	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <_Z4titiv+0x54>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <_Z4titiv+0x5e>
     64c:	00 00       	nop
     64e:	08 95       	ret

00000650 <_Z5checkv>:
	}
}

void check() {
	
	if(skin_temperature >= (set_temperature + 0.2f) ) {
     650:	2d ec       	ldi	r18, 0xCD	; 205
     652:	3c ec       	ldi	r19, 0xCC	; 204
     654:	4c e4       	ldi	r20, 0x4C	; 76
     656:	5e e3       	ldi	r21, 0x3E	; 62
     658:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <set_temperature>
     65c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <set_temperature+0x1>
     660:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <set_temperature+0x2>
     664:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <set_temperature+0x3>
     668:	d7 d5       	rcall	.+2990   	; 0x1218 <__addsf3>
     66a:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <skin_temperature>
     66e:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <skin_temperature+0x1>
     672:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <skin_temperature+0x2>
     676:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <skin_temperature+0x3>
     67a:	32 d6       	rcall	.+3172   	; 0x12e0 <__cmpsf2>
     67c:	18 16       	cp	r1, r24
     67e:	2c f1       	brlt	.+74     	; 0x6ca <_Z5checkv+0x7a>
		if(!startMonitor) {
     680:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <startMonitor>
     684:	81 11       	cpse	r24, r1
     686:	12 c0       	rjmp	.+36     	; 0x6ac <_Z5checkv+0x5c>
			//	UART0TransmitString("true\t");
			start_buzzer = true;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <start_buzzer>
		}
		
		if(stop_buzzer && !startMonitor) {
     68e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <stop_buzzer>
     692:	88 23       	and	r24, r24
     694:	59 f0       	breq	.+22     	; 0x6ac <_Z5checkv+0x5c>
			//UART0TransmitString("stop \t");
			startMonitor = true;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <startMonitor>
			second = 0;
     69c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     6a0:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
			stop_buzzer = false;
     6a4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <stop_buzzer>
			start_buzzer = false;
     6a8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <start_buzzer>
			//controls.stopBuzzer();
		}
		//UART0TransmitString("\r\n");
		Led.led_do(TS_HIGH_LED, 1);
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	87 e1       	ldi	r24, 0x17	; 23
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	62 d2       	rcall	.+1220   	; 0xb7e <_ZN3led6led_doEii>
		Led.led_do(TS_HIGH_LED, 0);
		startMonitor = false;
		second = 0;
	}
	
	if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
     6ba:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <second>
     6be:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <second+0x1>
     6c2:	88 35       	cpi	r24, 0x58	; 88
     6c4:	92 40       	sbci	r25, 0x02	; 2
     6c6:	a4 f4       	brge	.+40     	; 0x6f0 <_Z5checkv+0xa0>
		Led.led_do(TS_HIGH_LED, 1);
		//Led.led_do(TA_HIGH_LED, 1);
	}
	else {
		//	UART0TransmitString("else\r\n");
		controls.stopBuzzer();
     6c8:	19 c0       	rjmp	.+50     	; 0x6fc <_Z5checkv+0xac>
     6ca:	8e e3       	ldi	r24, 0x3E	; 62
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	3e d2       	rcall	.+1148   	; 0xb4c <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     6d0:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <start_buzzer>
		Led.led_do(TS_HIGH_LED, 0);
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	87 e1       	ldi	r24, 0x17	; 23
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	4e d2       	rcall	.+1180   	; 0xb7e <_ZN3led6led_doEii>
		startMonitor = false;
     6e2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <startMonitor>
		second = 0;
     6e6:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     6ea:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <_Z5checkv+0xac>
	}
	
	if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
		//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
		//controls.startBuzzer();
		startMonitor = false;
     6f0:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <startMonitor>
		second = 0;
     6f4:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <second+0x1>
     6f8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <second>
	}
	
	if(air_temperature > 37) {
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	44 e1       	ldi	r20, 0x14	; 20
     702:	52 e4       	ldi	r21, 0x42	; 66
     704:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <air_temperature>
     708:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <air_temperature+0x1>
     70c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <air_temperature+0x2>
     710:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <air_temperature+0x3>
     714:	34 d7       	rcall	.+3688   	; 0x157e <__gesf2>
     716:	18 16       	cp	r1, r24
     718:	44 f4       	brge	.+16     	; 0x72a <_Z5checkv+0xda>
		//controls.startBuzzer();
		//Led.led_do(TS_HIGH_LED, 1);
		Led.led_do(TA_HIGH_LED, 1);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	87 e1       	ldi	r24, 0x17	; 23
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	2b d2       	rcall	.+1110   	; 0xb7e <_ZN3led6led_doEii>
     728:	07 c0       	rjmp	.+14     	; 0x738 <_Z5checkv+0xe8>
		} else{
		//controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	87 e1       	ldi	r24, 0x17	; 23
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	23 d2       	rcall	.+1094   	; 0xb7e <_ZN3led6led_doEii>
     738:	65 99       	sbic	0x0c, 5	; 12
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     73a:	77 c0       	rjmp	.+238    	; 0x82a <_Z5checkv+0x1da>
     73c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buzzer_stop_pressed>
     740:	81 11       	cpse	r24, r1
     742:	73 c0       	rjmp	.+230    	; 0x82a <_Z5checkv+0x1da>
     744:	69 c0       	rjmp	.+210    	; 0x818 <_Z5checkv+0x1c8>
     746:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <buzzer_stop_pressed>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     74a:	1c 99       	sbic	0x03, 4	; 3
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     74c:	71 c0       	rjmp	.+226    	; 0x830 <_Z5checkv+0x1e0>
     74e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <set_up_pressed>
     752:	81 11       	cpse	r24, r1
     754:	6d c0       	rjmp	.+218    	; 0x830 <_Z5checkv+0x1e0>
     756:	6f c0       	rjmp	.+222    	; 0x836 <_Z5checkv+0x1e6>
     758:	2d ec       	ldi	r18, 0xCD	; 205
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     75a:	3c ec       	ldi	r19, 0xCC	; 204
     75c:	4c ec       	ldi	r20, 0xCC	; 204
     75e:	5d e3       	ldi	r21, 0x3D	; 61
     760:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <set_temperature_copy>
     764:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <set_temperature_copy+0x1>
     768:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <set_temperature_copy+0x2>
     76c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <set_temperature_copy+0x3>
     770:	53 d5       	rcall	.+2726   	; 0x1218 <__addsf3>
     772:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <set_temperature_copy>
     776:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <set_temperature_copy+0x1>
     77a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <set_temperature_copy+0x2>
     77e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <set_temperature_copy+0x3>
     782:	81 e0       	ldi	r24, 0x01	; 1
		}
		set_up_pressed = true;
     784:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <set_up_pressed>
     788:	02 c0       	rjmp	.+4      	; 0x78e <_Z5checkv+0x13e>
     78a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <set_up_pressed>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     78e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     792:	85 fd       	sbrc	r24, 5
     794:	5a c0       	rjmp	.+180    	; 0x84a <_Z5checkv+0x1fa>
     796:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <set_down_pressed>
     79a:	81 11       	cpse	r24, r1
     79c:	56 c0       	rjmp	.+172    	; 0x84a <_Z5checkv+0x1fa>
     79e:	50 c0       	rjmp	.+160    	; 0x840 <_Z5checkv+0x1f0>
     7a0:	2d ec       	ldi	r18, 0xCD	; 205
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     7a2:	3c ec       	ldi	r19, 0xCC	; 204
     7a4:	4c ec       	ldi	r20, 0xCC	; 204
     7a6:	5d e3       	ldi	r21, 0x3D	; 61
     7a8:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <set_temperature_copy>
     7ac:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <set_temperature_copy+0x1>
     7b0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <set_temperature_copy+0x2>
     7b4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <set_temperature_copy+0x3>
     7b8:	2e d5       	rcall	.+2652   	; 0x1216 <__subsf3>
     7ba:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <set_temperature_copy>
     7be:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <set_temperature_copy+0x1>
     7c2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <set_temperature_copy+0x2>
     7c6:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <set_temperature_copy+0x3>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		set_down_pressed= true;
     7cc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <set_down_pressed>
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <_Z5checkv+0x186>
     7d2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <set_down_pressed>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     7d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     7da:	86 fd       	sbrc	r24, 6
     7dc:	44 c0       	rjmp	.+136    	; 0x866 <_Z5checkv+0x216>
     7de:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <set_pressed>
     7e2:	81 11       	cpse	r24, r1
     7e4:	40 c0       	rjmp	.+128    	; 0x866 <_Z5checkv+0x216>
     7e6:	36 c0       	rjmp	.+108    	; 0x854 <_Z5checkv+0x204>
     7e8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy>
		button_change = !button_change;
		if(!button_change) {
			set_temperature = set_temperature_copy;
     7ec:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x1>
     7f0:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <set_temperature_copy+0x2>
     7f4:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <set_temperature_copy+0x3>
     7f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <set_temperature>
     7fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <set_temperature+0x1>
     800:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <set_temperature+0x2>
     804:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <set_temperature+0x3>
			titi();
     808:	f2 de       	rcall	.-540    	; 0x5ee <_Z4titiv>
		}
		
		set_pressed = true;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <set_pressed>
     810:	08 95       	ret
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     812:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <set_pressed>
	}
	
}
     816:	08 95       	ret
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		//UART0TransmitString("\r\n bhoot \r\n");
		controls.stopBuzzer();
     818:	8e e3       	ldi	r24, 0x3E	; 62
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	97 d1       	rcall	.+814    	; 0xb4c <_ZN8Controls10stopBuzzerEv>
     81e:	81 e0       	ldi	r24, 0x01	; 1
		stop_buzzer = true;
     820:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <stop_buzzer>
     824:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <buzzer_stop_pressed>
		buzzer_stop_pressed = true;
     828:	90 cf       	rjmp	.-224    	; 0x74a <_Z5checkv+0xfa>
     82a:	65 99       	sbic	0x0c, 5	; 12
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     82c:	8c cf       	rjmp	.-232    	; 0x746 <_Z5checkv+0xf6>
     82e:	8d cf       	rjmp	.-230    	; 0x74a <_Z5checkv+0xfa>
     830:	1c 99       	sbic	0x03, 4	; 3
			set_temperature_copy += 0.1f;
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     832:	ab cf       	rjmp	.-170    	; 0x78a <_Z5checkv+0x13a>
     834:	ac cf       	rjmp	.-168    	; 0x78e <_Z5checkv+0x13e>
     836:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <button_change>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     83a:	81 11       	cpse	r24, r1
     83c:	8d cf       	rjmp	.-230    	; 0x758 <_Z5checkv+0x108>
     83e:	a1 cf       	rjmp	.-190    	; 0x782 <_Z5checkv+0x132>
     840:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <button_change>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     844:	81 11       	cpse	r24, r1
     846:	ac cf       	rjmp	.-168    	; 0x7a0 <_Z5checkv+0x150>
     848:	c0 cf       	rjmp	.-128    	; 0x7ca <_Z5checkv+0x17a>
     84a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     84e:	85 fd       	sbrc	r24, 5
     850:	c0 cf       	rjmp	.-128    	; 0x7d2 <_Z5checkv+0x182>
     852:	c1 cf       	rjmp	.-126    	; 0x7d6 <_Z5checkv+0x186>
     854:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <button_change>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
		button_change = !button_change;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	89 27       	eor	r24, r25
     85c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <button_change>
     860:	81 11       	cpse	r24, r1
		if(!button_change) {
     862:	d3 cf       	rjmp	.-90     	; 0x80a <_Z5checkv+0x1ba>
     864:	c1 cf       	rjmp	.-126    	; 0x7e8 <_Z5checkv+0x198>
     866:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
		}
		
		set_pressed = true;
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     86a:	86 fd       	sbrc	r24, 6
     86c:	d2 cf       	rjmp	.-92     	; 0x812 <_Z5checkv+0x1c2>
     86e:	08 95       	ret

00000870 <main>:
     870:	6b dc       	rcall	.-1834   	; 0x148 <_Z12init_devicesv>
     872:	2f ef       	ldi	r18, 0xFF	; 255
     874:	83 ed       	ldi	r24, 0xD3	; 211
     876:	90 e3       	ldi	r25, 0x30	; 48
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	90 40       	sbci	r25, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <main+0x8>
     880:	00 c0       	rjmp	.+0      	; 0x882 <main+0x12>
	
	
	init_devices();
	_delay_ms(1000);
	
	initUART0();
     882:	00 00       	nop
     884:	96 d4       	rcall	.+2348   	; 0x11b2 <_Z9initUART0v>
	//titi();
	//initialize local variables.
	sendToDisplay(air_temperature,skin_temperature, set_temperature);
     886:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
     88a:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
     88e:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
     892:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
     896:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <skin_temperature>
     89a:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <skin_temperature+0x1>
     89e:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <skin_temperature+0x2>
     8a2:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <skin_temperature+0x3>
     8a6:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <air_temperature>
     8aa:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <air_temperature+0x1>
     8ae:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <air_temperature+0x2>
     8b2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <air_temperature+0x3>
     8b6:	e8 dc       	rcall	.-1584   	; 0x288 <_Z13sendToDisplayfff>
	//
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
	
	UART0TransmitString("On\r\n");
     8b8:	8a e0       	ldi	r24, 0x0A	; 10
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	8e d4       	rcall	.+2332   	; 0x11da <_Z19UART0TransmitStringPKc>
     8be:	f1 2c       	mov	r15, r1
	
	float temperature_heater_off = 0.0;
	float temperature_heater_on = 0.0;
	//
	//wait while preheat condition is meet.
	bool clear_display = false;
     8c0:	c1 e0       	ldi	r28, 0x01	; 1
	
	UART0TransmitString("On\r\n");
	while(!preHeat){
		
		if(displayUpdate){
			clear_display = !clear_display;
     8c2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
	
	UART0TransmitString("On\r\n");
	while(!preHeat){
     8c6:	81 11       	cpse	r24, r1
     8c8:	63 c0       	rjmp	.+198    	; 0x990 <main+0x120>
     8ca:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <displayUpdate>
		
		if(displayUpdate){
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x64>
     8d2:	5c c0       	rjmp	.+184    	; 0x98c <main+0x11c>
     8d4:	fc 26       	eor	r15, r28
			clear_display = !clear_display;
     8d6:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <displayUpdate>
			
			displayUpdate = false;
			maxSkin.begin(SKIN_SENSOR);
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	82 e3       	ldi	r24, 0x32	; 50
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	a6 d2       	rcall	.+1356   	; 0xe2e <_ZN17Adafruit_MAX318655beginEh>
     8e2:	00 e0       	ldi	r16, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0,430.0);
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	27 ed       	ldi	r18, 0xD7	; 215
     8e8:	33 e4       	ldi	r19, 0x43	; 67
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	68 ec       	ldi	r22, 0xC8	; 200
     8f0:	72 e4       	ldi	r23, 0x42	; 66
     8f2:	82 e3       	ldi	r24, 0x32	; 50
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	dc d2       	rcall	.+1464   	; 0xeb0 <_ZN17Adafruit_MAX3186511temperatureEff>
     8f8:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <skin_temperature>
     8fc:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <skin_temperature+0x1>
     900:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <skin_temperature+0x2>
     904:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <skin_temperature+0x3>
			max1.MAX7219_init(REINITIALIZE);
     908:	6c 2f       	mov	r22, r28
     90a:	8e e1       	ldi	r24, 0x1E	; 30
     90c:	92 e0       	ldi	r25, 0x02	; 2
			max2.MAX7219_init(REINITIALIZE);
     90e:	ea d3       	rcall	.+2004   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
     910:	6c 2f       	mov	r22, r28
     912:	88 e1       	ldi	r24, 0x18	; 24
     914:	92 e0       	ldi	r25, 0x02	; 2
			displayPreHeat();
     916:	e6 d3       	rcall	.+1996   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
     918:	e7 dd       	rcall	.-1074   	; 0x4e8 <_Z14displayPreHeatv>
			if(clear_display) {
     91a:	ff 20       	and	r15, r15
     91c:	21 f0       	breq	.+8      	; 0x926 <main+0xb6>
				max2.MAX7219_clearDisplay();
     91e:	88 e1       	ldi	r24, 0x18	; 24
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	ff d3       	rcall	.+2046   	; 0x1122 <_ZN7max721920MAX7219_clearDisplayEv>
     924:	09 c0       	rjmp	.+18     	; 0x938 <main+0xc8>
				//max1.MAX7219_clearDisplay();
				} else {
				sendToDisplayBelow(skin_temperature);
     926:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <skin_temperature>
     92a:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <skin_temperature+0x1>
     92e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <skin_temperature+0x2>
     932:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <skin_temperature+0x3>
     936:	68 dd       	rcall	.-1328   	; 0x408 <_Z18sendToDisplayBelowf>
     938:	80 90 2e 02 	lds	r8, 0x022E	; 0x80022e <skin_temperature>
			}
			if(skin_temperature >= pre_heat_max_temp) {
     93c:	90 90 2f 02 	lds	r9, 0x022F	; 0x80022f <skin_temperature+0x1>
     940:	a0 90 30 02 	lds	r10, 0x0230	; 0x800230 <skin_temperature+0x2>
     944:	b0 90 31 02 	lds	r11, 0x0231	; 0x800231 <skin_temperature+0x3>
     948:	40 90 02 02 	lds	r4, 0x0202	; 0x800202 <pre_heat_max_temp>
     94c:	50 90 03 02 	lds	r5, 0x0203	; 0x800203 <pre_heat_max_temp+0x1>
     950:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <pre_heat_max_temp+0x2>
     954:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <pre_heat_max_temp+0x3>
     958:	a3 01       	movw	r20, r6
     95a:	92 01       	movw	r18, r4
     95c:	c5 01       	movw	r24, r10
     95e:	b4 01       	movw	r22, r8
     960:	0e d6       	rcall	.+3100   	; 0x157e <__gesf2>
     962:	88 23       	and	r24, r24
				controls.stopHeater();
     964:	3c f0       	brlt	.+14     	; 0x974 <main+0x104>
     966:	8e e3       	ldi	r24, 0x3E	; 62
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	e8 d0       	rcall	.+464    	; 0xb3c <_ZN8Controls10stopHeaterEv>
				preHeat = true;
     96c:	c0 93 10 02 	sts	0x0210, r28	; 0x800210 <__data_end>
				titititi();
     970:	e9 dd       	rcall	.-1070   	; 0x544 <_Z8titititiv>
     972:	a7 cf       	rjmp	.-178    	; 0x8c2 <main+0x52>
			}
			else if(skin_temperature < pre_heat_max_temp) {
     974:	a3 01       	movw	r20, r6
     976:	92 01       	movw	r18, r4
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	b1 d4       	rcall	.+2402   	; 0x12e0 <__cmpsf2>
     97e:	88 23       	and	r24, r24
     980:	0c f0       	brlt	.+2      	; 0x984 <main+0x114>
     982:	9f cf       	rjmp	.-194    	; 0x8c2 <main+0x52>
				controls.startHeater();
     984:	8e e3       	ldi	r24, 0x3E	; 62
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	d7 d0       	rcall	.+430    	; 0xb38 <_ZN8Controls11startHeaterEv>
     98a:	9b cf       	rjmp	.-202    	; 0x8c2 <main+0x52>
			}
		}
		
		else{
			asm volatile ("nop");
     98c:	00 00       	nop
     98e:	99 cf       	rjmp	.-206    	; 0x8c2 <main+0x52>
		}
		
	}
	while(1)
	{
		check();
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	5e de       	rcall	.-836    	; 0x650 <_Z5checkv>
		if(displayUpdate) {
     994:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <displayUpdate>
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <main+0x12e>
     99c:	aa c0       	rjmp	.+340    	; 0xaf2 <main+0x282>
			//UART0TransmitString("On\r\n");
			
			//spi for temperature pt100
			maxAir.begin(AIR_SENSOR); //these are init
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	87 e3       	ldi	r24, 0x37	; 55
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	44 d2       	rcall	.+1160   	; 0xe2e <_ZN17Adafruit_MAX318655beginEh>
			maxSkin.begin(SKIN_SENSOR);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	82 e3       	ldi	r24, 0x32	; 50
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	40 d2       	rcall	.+1152   	; 0xe2e <_ZN17Adafruit_MAX318655beginEh>
     9ae:	00 e0       	ldi	r16, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0, 430.0);
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	27 ed       	ldi	r18, 0xD7	; 215
     9b4:	33 e4       	ldi	r19, 0x43	; 67
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	68 ec       	ldi	r22, 0xC8	; 200
     9bc:	72 e4       	ldi	r23, 0x42	; 66
     9be:	82 e3       	ldi	r24, 0x32	; 50
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	76 d2       	rcall	.+1260   	; 0xeb0 <_ZN17Adafruit_MAX3186511temperatureEff>
     9c4:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <skin_temperature>
     9c8:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <skin_temperature+0x1>
     9cc:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <skin_temperature+0x2>
     9d0:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <skin_temperature+0x3>
     9d4:	00 e0       	ldi	r16, 0x00	; 0
			air_temperature = maxAir.temperature(100.0, 430.0);
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	27 ed       	ldi	r18, 0xD7	; 215
     9da:	33 e4       	ldi	r19, 0x43	; 67
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	68 ec       	ldi	r22, 0xC8	; 200
     9e2:	72 e4       	ldi	r23, 0x42	; 66
     9e4:	87 e3       	ldi	r24, 0x37	; 55
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	63 d2       	rcall	.+1222   	; 0xeb0 <_ZN17Adafruit_MAX3186511temperatureEff>
     9ea:	60 93 2a 02 	sts	0x022A, r22	; 0x80022a <air_temperature>
     9ee:	70 93 2b 02 	sts	0x022B, r23	; 0x80022b <air_temperature+0x1>
     9f2:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <air_temperature+0x2>
     9f6:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <air_temperature+0x3>
			max1.MAX7219_init(REINITIALIZE); // these are init
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	71 d3       	rcall	.+1762   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
			max2.MAX7219_init(REINITIALIZE);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	88 e1       	ldi	r24, 0x18	; 24
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	6d d3       	rcall	.+1754   	; 0x10e4 <_ZN7max721912MAX7219_initEc>
			
			//buzzer karaying
			if(start_buzzer) {
     a0a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <start_buzzer>
     a0e:	88 23       	and	r24, r24
     a10:	79 f0       	breq	.+30     	; 0xa30 <main+0x1c0>
				buzzer_timer = !buzzer_timer;
     a12:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <buzzer_timer>
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	89 27       	eor	r24, r25
     a1a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <buzzer_timer>
				if(buzzer_timer) {
     a1e:	88 23       	and	r24, r24
					//  UART0TransmitString("On\r\n");
					controls.startBuzzer();
     a20:	21 f0       	breq	.+8      	; 0xa2a <main+0x1ba>
     a22:	8e e3       	ldi	r24, 0x3E	; 62
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	8c d0       	rcall	.+280    	; 0xb40 <_ZN8Controls11startBuzzerEv>
					} else {
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <main+0x1c0>
     a2a:	8e e3       	ldi	r24, 0x3E	; 62
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	8e d0       	rcall	.+284    	; 0xb4c <_ZN8Controls10stopBuzzerEv>
				}
			}
			// sending this
			if(button_change){
     a30:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <button_change>
     a34:	88 23       	and	r24, r24
     a36:	91 f0       	breq	.+36     	; 0xa5c <main+0x1ec>
				set_temp_display = !set_temp_display;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	c8 27       	eor	r28, r24
				if(set_temp_display) {
     a3c:	51 f0       	breq	.+20     	; 0xa52 <main+0x1e2>
					sendToDisplayBelow(set_temperature_copy);
     a3e:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <set_temperature_copy>
     a42:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <set_temperature_copy+0x1>
     a46:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <set_temperature_copy+0x2>
     a4a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <set_temperature_copy+0x3>
     a4e:	dc dc       	rcall	.-1608   	; 0x408 <_Z18sendToDisplayBelowf>
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <main+0x1e8>
     a52:	88 e1       	ldi	r24, 0x18	; 24
					} else {
					max2.MAX7219_clearDisplay();
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	65 d3       	rcall	.+1738   	; 0x1122 <_ZN7max721920MAX7219_clearDisplayEv>
     a58:	19 dd       	rcall	.-1486   	; 0x48c <_Z21displaySetTemperaturev>
				}
				displaySetTemperature();
     a5a:	19 c0       	rjmp	.+50     	; 0xa8e <main+0x21e>
     a5c:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
			}
			
			else{
				sendToDisplay(air_temperature, skin_temperature, set_temperature);
     a60:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
     a64:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
     a68:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
     a6c:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <skin_temperature>
     a70:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <skin_temperature+0x1>
     a74:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <skin_temperature+0x2>
     a78:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <skin_temperature+0x3>
     a7c:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <air_temperature>
     a80:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <air_temperature+0x1>
     a84:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <air_temperature+0x2>
     a88:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <air_temperature+0x3>
     a8c:	fd db       	rcall	.-2054   	; 0x288 <_Z13sendToDisplayfff>
     a8e:	80 90 06 02 	lds	r8, 0x0206	; 0x800206 <set_temperature>
			}
			
			temperature_heater_off = set_temperature - 0.1f;
     a92:	90 90 07 02 	lds	r9, 0x0207	; 0x800207 <set_temperature+0x1>
     a96:	a0 90 08 02 	lds	r10, 0x0208	; 0x800208 <set_temperature+0x2>
     a9a:	b0 90 09 02 	lds	r11, 0x0209	; 0x800209 <set_temperature+0x3>
			temperature_heater_on = set_temperature - 0.2f;
			
			if(skin_temperature >= temperature_heater_off) {
     a9e:	c0 90 2e 02 	lds	r12, 0x022E	; 0x80022e <skin_temperature>
     aa2:	d0 90 2f 02 	lds	r13, 0x022F	; 0x80022f <skin_temperature+0x1>
     aa6:	e0 90 30 02 	lds	r14, 0x0230	; 0x800230 <skin_temperature+0x2>
     aaa:	f0 90 31 02 	lds	r15, 0x0231	; 0x800231 <skin_temperature+0x3>
     aae:	2d ec       	ldi	r18, 0xCD	; 205
     ab0:	3c ec       	ldi	r19, 0xCC	; 204
     ab2:	4c ec       	ldi	r20, 0xCC	; 204
     ab4:	5d e3       	ldi	r21, 0x3D	; 61
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	ad d3       	rcall	.+1882   	; 0x1216 <__subsf3>
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0f d4       	rcall	.+2078   	; 0x12e0 <__cmpsf2>
     ac2:	18 16       	cp	r1, r24
				controls.stopHeater();
     ac4:	24 f0       	brlt	.+8      	; 0xace <main+0x25e>
     ac6:	8e e3       	ldi	r24, 0x3E	; 62
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	38 d0       	rcall	.+112    	; 0xb3c <_ZN8Controls10stopHeaterEv>
     acc:	0f c0       	rjmp	.+30     	; 0xaec <main+0x27c>
				}else if(skin_temperature <= temperature_heater_on) {
     ace:	2d ec       	ldi	r18, 0xCD	; 205
     ad0:	3c ec       	ldi	r19, 0xCC	; 204
     ad2:	4c e4       	ldi	r20, 0x4C	; 76
     ad4:	5e e3       	ldi	r21, 0x3E	; 62
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	9d d3       	rcall	.+1850   	; 0x1216 <__subsf3>
     adc:	a7 01       	movw	r20, r14
     ade:	96 01       	movw	r18, r12
     ae0:	4e d5       	rcall	.+2716   	; 0x157e <__gesf2>
     ae2:	88 23       	and	r24, r24
     ae4:	1c f0       	brlt	.+6      	; 0xaec <main+0x27c>
     ae6:	8e e3       	ldi	r24, 0x3E	; 62
     ae8:	92 e0       	ldi	r25, 0x02	; 2
				controls.startHeater();
     aea:	26 d0       	rcall	.+76     	; 0xb38 <_ZN8Controls11startHeaterEv>
     aec:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <displayUpdate>
     af0:	50 cf       	rjmp	.-352    	; 0x992 <main+0x122>
			}
			
			displayUpdate = false;
     af2:	00 00       	nop
     af4:	4e cf       	rjmp	.-356    	; 0x992 <main+0x122>

00000af6 <_GLOBAL__sub_I_startMonitor>:
     af6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <set_temperature>
		}
		else{
			asm volatile ("nop");
     afa:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <set_temperature+0x1>
Adafruit_MAX31865 maxSkin;

float skin_temperature = 0.0;
float air_temperature = 0.0;
float set_temperature = 35.0;
float set_temperature_copy = set_temperature;
     afe:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <set_temperature+0x2>
     b02:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <set_temperature+0x3>
     b06:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <set_temperature_copy>
     b0a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <set_temperature_copy+0x1>
     b0e:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <set_temperature_copy+0x2>
     b12:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <set_temperature_copy+0x3>

#define FIRSTINITIALIZE 0
#define REINITIALIZE	1


class max7219 {
     b16:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <max1+0x1>
     b1a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <max1>
     b1e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <max2+0x1>
     b22:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <max2>
     b26:	08 95       	ret

00000b28 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     b28:	53 9a       	sbi	0x0a, 3	; 10
     b2a:	e1 e0       	ldi	r30, 0x01	; 1
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	80 83       	st	Z, r24
     b34:	5b 98       	cbi	0x0b, 3	; 11
     b36:	08 95       	ret

00000b38 <_ZN8Controls11startHeaterEv>:
     b38:	5b 9a       	sbi	0x0b, 3	; 11
     b3a:	08 95       	ret

00000b3c <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     b3c:	5b 98       	cbi	0x0b, 3	; 11
     b3e:	08 95       	ret

00000b40 <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     b40:	e2 e0       	ldi	r30, 0x02	; 2
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	80 61       	ori	r24, 0x10	; 16
     b48:	80 83       	st	Z, r24
     b4a:	08 95       	ret

00000b4c <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     b4c:	e2 e0       	ldi	r30, 0x02	; 2
     b4e:	f1 e0       	ldi	r31, 0x01	; 1
     b50:	80 81       	ld	r24, Z
     b52:	8f 7e       	andi	r24, 0xEF	; 239
     b54:	80 83       	st	Z, r24
     b56:	08 95       	ret

00000b58 <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     b58:	ea e0       	ldi	r30, 0x0A	; 10
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	80 83       	st	Z, r24
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     b68:	80 81       	ld	r24, Z
     b6a:	88 60       	ori	r24, 0x08	; 8
     b6c:	80 83       	st	Z, r24
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     b6e:	e1 e0       	ldi	r30, 0x01	; 1
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	80 83       	st	Z, r24
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     b78:	6b 9a       	sbi	0x0d, 3	; 13
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     b7a:	9d 9a       	sbi	0x13, 5	; 19
     b7c:	08 95       	ret

00000b7e <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     b7e:	62 30       	cpi	r22, 0x02	; 2
     b80:	71 05       	cpc	r23, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <_ZN3led6led_doEii+0x8>
     b84:	41 c0       	rjmp	.+130    	; 0xc08 <_ZN3led6led_doEii+0x8a>
     b86:	3c f4       	brge	.+14     	; 0xb96 <_ZN3led6led_doEii+0x18>
     b88:	61 15       	cp	r22, r1
     b8a:	71 05       	cpc	r23, r1
     b8c:	69 f0       	breq	.+26     	; 0xba8 <_ZN3led6led_doEii+0x2a>
     b8e:	61 30       	cpi	r22, 0x01	; 1
     b90:	71 05       	cpc	r23, r1
     b92:	c1 f0       	breq	.+48     	; 0xbc4 <_ZN3led6led_doEii+0x46>
     b94:	08 95       	ret
     b96:	64 30       	cpi	r22, 0x04	; 4
     b98:	71 05       	cpc	r23, r1
     b9a:	81 f1       	breq	.+96     	; 0xbfc <_ZN3led6led_doEii+0x7e>
     b9c:	0c f4       	brge	.+2      	; 0xba0 <_ZN3led6led_doEii+0x22>
     b9e:	42 c0       	rjmp	.+132    	; 0xc24 <_ZN3led6led_doEii+0xa6>
     ba0:	65 30       	cpi	r22, 0x05	; 5
     ba2:	71 05       	cpc	r23, r1
     ba4:	e9 f0       	breq	.+58     	; 0xbe0 <_ZN3led6led_doEii+0x62>
     ba6:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     ba8:	45 2b       	or	r20, r21
     baa:	31 f0       	breq	.+12     	; 0xbb8 <_ZN3led6led_doEii+0x3a>
     bac:	eb e0       	ldi	r30, 0x0B	; 11
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	80 83       	st	Z, r24
     bb6:	08 95       	ret
     bb8:	eb e0       	ldi	r30, 0x0B	; 11
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	80 81       	ld	r24, Z
     bbe:	8d 7f       	andi	r24, 0xFD	; 253
     bc0:	80 83       	st	Z, r24
     bc2:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     bc4:	45 2b       	or	r20, r21
     bc6:	31 f0       	breq	.+12     	; 0xbd4 <_ZN3led6led_doEii+0x56>
     bc8:	eb e0       	ldi	r30, 0x0B	; 11
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	80 81       	ld	r24, Z
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	80 83       	st	Z, r24
     bd2:	08 95       	ret
     bd4:	eb e0       	ldi	r30, 0x0B	; 11
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	80 83       	st	Z, r24
     bde:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     be0:	45 2b       	or	r20, r21
     be2:	31 f0       	breq	.+12     	; 0xbf0 <_ZN3led6led_doEii+0x72>
     be4:	e2 e0       	ldi	r30, 0x02	; 2
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	80 81       	ld	r24, Z
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	80 83       	st	Z, r24
     bee:	08 95       	ret
     bf0:	e2 e0       	ldi	r30, 0x02	; 2
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	80 81       	ld	r24, Z
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 83       	st	Z, r24
     bfa:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     bfc:	45 2b       	or	r20, r21
     bfe:	11 f0       	breq	.+4      	; 0xc04 <_ZN3led6led_doEii+0x86>
     c00:	73 9a       	sbi	0x0e, 3	; 14
     c02:	08 95       	ret
     c04:	73 98       	cbi	0x0e, 3	; 14
     c06:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     c08:	45 2b       	or	r20, r21
     c0a:	31 f0       	breq	.+12     	; 0xc18 <_ZN3led6led_doEii+0x9a>
     c0c:	eb e0       	ldi	r30, 0x0B	; 11
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	80 81       	ld	r24, Z
     c12:	88 60       	ori	r24, 0x08	; 8
     c14:	80 83       	st	Z, r24
     c16:	08 95       	ret
     c18:	eb e0       	ldi	r30, 0x0B	; 11
     c1a:	f1 e0       	ldi	r31, 0x01	; 1
     c1c:	80 81       	ld	r24, Z
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 83       	st	Z, r24
     c22:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     c24:	45 2b       	or	r20, r21
     c26:	11 f0       	breq	.+4      	; 0xc2c <_ZN3led6led_doEii+0xae>
     c28:	a5 9a       	sbi	0x14, 5	; 20
     c2a:	08 95       	ret
     c2c:	a5 98       	cbi	0x14, 5	; 20
     c2e:	08 95       	ret

00000c30 <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     c30:	6e bd       	out	0x2e, r22	; 46
     c32:	0d b4       	in	r0, 0x2d	; 45
     c34:	07 fe       	sbrs	r0, 7
     c36:	fd cf       	rjmp	.-6      	; 0xc32 <_ZN17Adafruit_MAX318657spixferEh+0x2>
     c38:	8e b5       	in	r24, 0x2e	; 46
     c3a:	08 95       	ret

00000c3c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	7c 01       	movw	r14, r24
     c4a:	ea 01       	movw	r28, r20
     c4c:	12 2f       	mov	r17, r18
     c4e:	fc 01       	movw	r30, r24
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	19 f0       	breq	.+6      	; 0xc5c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	51 f0       	breq	.+20     	; 0xc6e <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x32>
     c5a:	11 c0       	rjmp	.+34     	; 0xc7e <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     c5c:	eb e0       	ldi	r30, 0x0B	; 11
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	80 81       	ld	r24, Z
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	80 83       	st	Z, r24
     c66:	80 81       	ld	r24, Z
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	80 83       	st	Z, r24
     c6c:	08 c0       	rjmp	.+16     	; 0xc7e <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     c6e:	eb e0       	ldi	r30, 0x0B	; 11
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	80 83       	st	Z, r24
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24
     c7e:	6f 77       	andi	r22, 0x7F	; 127
     c80:	c7 01       	movw	r24, r14
     c82:	d6 df       	rcall	.-84     	; 0xc30 <_ZN17Adafruit_MAX318657spixferEh>
     c84:	0f ef       	ldi	r16, 0xFF	; 255
     c86:	01 0f       	add	r16, r17
     c88:	11 23       	and	r17, r17
     c8a:	61 f0       	breq	.+24     	; 0xca4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x68>
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	0c 0f       	add	r16, r28
     c94:	1d 1f       	adc	r17, r29
     c96:	6f ef       	ldi	r22, 0xFF	; 255
     c98:	c7 01       	movw	r24, r14
     c9a:	ca df       	rcall	.-108    	; 0xc30 <_ZN17Adafruit_MAX318657spixferEh>
     c9c:	89 93       	st	Y+, r24
     c9e:	c0 17       	cp	r28, r16
     ca0:	d1 07       	cpc	r29, r17
     ca2:	c9 f7       	brne	.-14     	; 0xc96 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5a>
     ca4:	f7 01       	movw	r30, r14
     ca6:	80 81       	ld	r24, Z
     ca8:	88 23       	and	r24, r24
     caa:	19 f0       	breq	.+6      	; 0xcb2 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x76>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	39 f0       	breq	.+14     	; 0xcbe <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x82>
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
     cb2:	eb e0       	ldi	r30, 0x0B	; 11
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	80 81       	ld	r24, Z
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	80 83       	st	Z, r24
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
     cbe:	eb e0       	ldi	r30, 0x0B	; 11
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	80 81       	ld	r24, Z
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	80 83       	st	Z, r24
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	ae 01       	movw	r20, r28
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	a8 df       	rcall	.-176    	; 0xc3c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	0f 90       	pop	r0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	1f 92       	push	r1
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
     d02:	19 82       	std	Y+1, r1	; 0x01
     d04:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	ae 01       	movw	r20, r28
     d0a:	4f 5f       	subi	r20, 0xFF	; 255
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	96 df       	rcall	.-212    	; 0xc3c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
     d14:	98 2f       	mov	r25, r24
     d16:	88 27       	eor	r24, r24
ret |=  buffer[1];
     d18:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
     d1a:	82 2b       	or	r24, r18
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ec 01       	movw	r28, r24
     d2e:	14 2f       	mov	r17, r20
 
  switch(choose) {
     d30:	88 81       	ld	r24, Y
     d32:	88 23       	and	r24, r24
     d34:	19 f0       	breq	.+6      	; 0xd3c <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	51 f0       	breq	.+20     	; 0xd4e <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x28>
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 0:
		TEMP_I_PORT &=~ (1 << TEMP_I_PIN);
     d3c:	eb e0       	ldi	r30, 0x0B	; 11
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	80 83       	st	Z, r24
		TEMP_II_PORT |= (1 << TEMP_II_PIN);
     d46:	80 81       	ld	r24, Z
     d48:	84 60       	ori	r24, 0x04	; 4
     d4a:	80 83       	st	Z, r24
		break;
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 1:
		TEMP_II_PORT &=~ (1 << TEMP_II_PIN);
     d4e:	eb e0       	ldi	r30, 0x0B	; 11
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	80 81       	ld	r24, Z
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	80 83       	st	Z, r24
		TEMP_I_PORT |= (1 << TEMP_I_PIN);
     d58:	80 81       	ld	r24, Z
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	80 83       	st	Z, r24
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
     d5e:	60 68       	ori	r22, 0x80	; 128
     d60:	ce 01       	movw	r24, r28
     d62:	66 df       	rcall	.-308    	; 0xc30 <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
     d64:	61 2f       	mov	r22, r17
     d66:	ce 01       	movw	r24, r28
     d68:	63 df       	rcall	.-314    	; 0xc30 <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
     d6a:	88 81       	ld	r24, Y
     d6c:	88 23       	and	r24, r24
     d6e:	19 f0       	breq	.+6      	; 0xd76 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x50>
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	39 f0       	breq	.+14     	; 0xd82 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x5c>
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
   case 0:
	TEMP_I_PORT |= (1 << TEMP_I_PIN);
     d76:	eb e0       	ldi	r30, 0x0B	; 11
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 81       	ld	r24, Z
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	80 83       	st	Z, r24
	break;
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
  case 1:
	TEMP_II_PORT |= (1 << TEMP_II_PIN);
     d82:	eb e0       	ldi	r30, 0x0B	; 11
     d84:	f1 e0       	ldi	r31, 0x01	; 1
     d86:	80 81       	ld	r24, Z
     d88:	84 60       	ori	r24, 0x04	; 4
     d8a:	80 83       	st	Z, r24
	break;
}
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	08 95       	ret

00000d94 <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	9c df       	rcall	.-200    	; 0xcd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
     d9e:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
	writeRegister8(MAX31856_CONFIG_REG, t);
     da0:	48 2f       	mov	r20, r24
     da2:	42 60       	ori	r20, 0x02	; 2
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	ce 01       	movw	r24, r28
     da8:	be df       	rcall	.-132    	; 0xd26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
     db8:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8c df       	rcall	.-232    	; 0xcd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     dbe:	11 23       	and	r17, r17
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
     dc2:	48 2f       	mov	r20, r24
     dc4:	40 68       	ori	r20, 0x80	; 128
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
     dc8:	48 2f       	mov	r20, r24
     dca:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	ce 01       	movw	r24, r28
     dd0:	aa df       	rcall	.-172    	; 0xd26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret

00000dda <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
     de2:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	77 df       	rcall	.-274    	; 0xcd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     de8:	11 23       	and	r17, r17
     dea:	19 f0       	breq	.+6      	; 0xdf2 <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
     dec:	48 2f       	mov	r20, r24
     dee:	40 64       	ori	r20, 0x40	; 64
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
     df2:	48 2f       	mov	r20, r24
     df4:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	ce 01       	movw	r24, r28
     dfa:	95 df       	rcall	.-214    	; 0xd26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	08 95       	ret

00000e04 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	62 df       	rcall	.-316    	; 0xcd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
     e12:	11 30       	cpi	r17, 0x01	; 1
     e14:	19 f4       	brne	.+6      	; 0xe1c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
     e16:	48 2f       	mov	r20, r24
     e18:	40 61       	ori	r20, 0x10	; 16
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
     e1c:	48 2f       	mov	r20, r24
     e1e:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	ce 01       	movw	r24, r28
     e24:	80 df       	rcall	.-256    	; 0xd26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
     e36:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     e38:	e8 e0       	ldi	r30, 0x08	; 8
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	80 81       	ld	r24, Z
     e3e:	80 6c       	ori	r24, 0xC0	; 192
     e40:	80 83       	st	Z, r24
	SPI.begin();
     e42:	81 d1       	rcall	.+770    	; 0x1146 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
     e44:	85 e5       	ldi	r24, 0x55	; 85
     e46:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
     e48:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	ce 01       	movw	r24, r28
     e4e:	da df       	rcall	.-76     	; 0xe04 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	ce 01       	movw	r24, r28
     e54:	ad df       	rcall	.-166    	; 0xdb0 <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	ce 01       	movw	r24, r28
     e5a:	bf df       	rcall	.-130    	; 0xdda <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
     e5c:	ce 01       	movw	r24, r28
     e5e:	9a df       	rcall	.-204    	; 0xd94 <_ZN17Adafruit_MAX3186510clearFaultEv>
     e60:	81 e0       	ldi	r24, 0x01	; 1
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	08 95       	ret

00000e6a <_ZN17Adafruit_MAX318657readRTDEv>:
     e6a:	cf 93       	push	r28
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
	clearFault();
     e70:	91 df       	rcall	.-222    	; 0xd94 <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	ce 01       	movw	r24, r28
     e76:	9c df       	rcall	.-200    	; 0xdb0 <_ZN17Adafruit_MAX3186510enableBiasEb>
     e78:	83 ec       	ldi	r24, 0xC3	; 195
     e7a:	99 e0       	ldi	r25, 0x09	; 9
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <_ZN17Adafruit_MAX318657readRTDEv+0x12>
     e80:	00 c0       	rjmp	.+0      	; 0xe82 <_ZN17Adafruit_MAX318657readRTDEv+0x18>
     e82:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	ce 01       	movw	r24, r28
     e88:	26 df       	rcall	.-436    	; 0xcd6 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
	writeRegister8(MAX31856_CONFIG_REG, t);
     e8a:	48 2f       	mov	r20, r24
     e8c:	40 62       	ori	r20, 0x20	; 32
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	ce 01       	movw	r24, r28
     e92:	49 df       	rcall	.-366    	; 0xd26 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
     e94:	89 e7       	ldi	r24, 0x79	; 121
     e96:	9f e3       	ldi	r25, 0x3F	; 63
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <_ZN17Adafruit_MAX318657readRTDEv+0x34>
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
     e9e:	00 00       	nop
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	ce 01       	movw	r24, r28
     ea4:	28 df       	rcall	.-432    	; 0xcf6 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
     eb0:	4f 92       	push	r4
     eb2:	5f 92       	push	r5
     eb4:	6f 92       	push	r6
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	6a 01       	movw	r12, r20
     ed2:	7b 01       	movw	r14, r22
     ed4:	48 01       	movw	r8, r16
     ed6:	59 01       	movw	r10, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
     ed8:	c8 df       	rcall	.-112    	; 0xe6a <_ZN17Adafruit_MAX318657readRTDEv>
     eda:	bc 01       	movw	r22, r24
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9c d2       	rcall	.+1336   	; 0x141a <__floatunsisf>
	Rt /= 32768;
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	58 e3       	ldi	r21, 0x38	; 56
     eea:	4d d3       	rcall	.+1690   	; 0x1586 <__mulsf3>
	Rt *= refResistor;
     eec:	a5 01       	movw	r20, r10
     eee:	94 01       	movw	r18, r8
     ef0:	4a d3       	rcall	.+1684   	; 0x1586 <__mulsf3>
     ef2:	4b 01       	movw	r8, r22
     ef4:	5c 01       	movw	r10, r24
     ef6:	a7 01       	movw	r20, r14
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
	temp = (sqrt(temp) + Z1) / Z4;
     ef8:	96 01       	movw	r18, r12
     efa:	6f e7       	ldi	r22, 0x7F	; 127
     efc:	75 e0       	ldi	r23, 0x05	; 5
     efe:	8b e1       	ldi	r24, 0x1B	; 27
     f00:	96 eb       	ldi	r25, 0xB6	; 182
     f02:	f2 d1       	rcall	.+996    	; 0x12e8 <__divsf3>
     f04:	2b 01       	movw	r4, r22
     f06:	3c 01       	movw	r6, r24
     f08:	a5 01       	movw	r20, r10
     f0a:	94 01       	movw	r18, r8
     f0c:	c3 01       	movw	r24, r6
     f0e:	b2 01       	movw	r22, r4
     f10:	3a d3       	rcall	.+1652   	; 0x1586 <__mulsf3>
     f12:	26 e1       	ldi	r18, 0x16	; 22
     f14:	33 e8       	ldi	r19, 0x83	; 131
     f16:	43 e9       	ldi	r20, 0x93	; 147
     f18:	57 e3       	ldi	r21, 0x37	; 55
     f1a:	7e d1       	rcall	.+764    	; 0x1218 <__addsf3>
     f1c:	9b d3       	rcall	.+1846   	; 0x1654 <sqrt>
     f1e:	22 e3       	ldi	r18, 0x32	; 50
     f20:	31 e1       	ldi	r19, 0x11	; 17
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5b e3       	ldi	r21, 0x3B	; 59
     f26:	77 d1       	rcall	.+750    	; 0x1216 <__subsf3>
     f28:	2f e7       	ldi	r18, 0x7F	; 127
     f2a:	35 e0       	ldi	r19, 0x05	; 5
     f2c:	4b e9       	ldi	r20, 0x9B	; 155
     f2e:	55 eb       	ldi	r21, 0xB5	; 181
     f30:	db d1       	rcall	.+950    	; 0x12e8 <__divsf3>
     f32:	06 2f       	mov	r16, r22
     f34:	17 2f       	mov	r17, r23
     f36:	d8 2f       	mov	r29, r24
     f38:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	1e d3       	rcall	.+1596   	; 0x157e <__gesf2>
     f42:	88 23       	and	r24, r24
     f44:	0c f0       	brlt	.+2      	; 0xf48 <_ZN17Adafruit_MAX3186511temperatureEff+0x98>

	// ugh.
	Rt /= RTDnominal;
	Rt *= 100;      // normalize to 100 ohm
     f46:	60 c0       	rjmp	.+192    	; 0x1008 <_ZN17Adafruit_MAX3186511temperatureEff+0x158>
     f48:	a7 01       	movw	r20, r14
     f4a:	96 01       	movw	r18, r12
     f4c:	c5 01       	movw	r24, r10
     f4e:	b4 01       	movw	r22, r8
     f50:	cb d1       	rcall	.+918    	; 0x12e8 <__divsf3>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	48 ec       	ldi	r20, 0xC8	; 200
     f58:	52 e4       	ldi	r21, 0x42	; 66
     f5a:	15 d3       	rcall	.+1578   	; 0x1586 <__mulsf3>
     f5c:	6b 01       	movw	r12, r22

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
     f5e:	7c 01       	movw	r14, r24
     f60:	2b e5       	ldi	r18, 0x5B	; 91
     f62:	32 e4       	ldi	r19, 0x42	; 66
     f64:	4e e0       	ldi	r20, 0x0E	; 14
     f66:	50 e4       	ldi	r21, 0x40	; 64
     f68:	0e d3       	rcall	.+1564   	; 0x1586 <__mulsf3>
     f6a:	2f e1       	ldi	r18, 0x1F	; 31
     f6c:	35 e0       	ldi	r19, 0x05	; 5
     f6e:	42 e7       	ldi	r20, 0x72	; 114
     f70:	53 e4       	ldi	r21, 0x43	; 67
     f72:	51 d1       	rcall	.+674    	; 0x1216 <__subsf3>
     f74:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // square
     f76:	3c 01       	movw	r6, r24
     f78:	a7 01       	movw	r20, r14
     f7a:	96 01       	movw	r18, r12
     f7c:	c7 01       	movw	r24, r14
     f7e:	b6 01       	movw	r22, r12
     f80:	02 d3       	rcall	.+1540   	; 0x1586 <__mulsf3>
     f82:	4b 01       	movw	r8, r22
	temp += 2.5859e-3 * rpoly;
     f84:	5c 01       	movw	r10, r24
     f86:	24 e3       	ldi	r18, 0x34	; 52
     f88:	38 e7       	ldi	r19, 0x78	; 120
     f8a:	49 e2       	ldi	r20, 0x29	; 41
     f8c:	5b e3       	ldi	r21, 0x3B	; 59
     f8e:	fb d2       	rcall	.+1526   	; 0x1586 <__mulsf3>
     f90:	a3 01       	movw	r20, r6
     f92:	92 01       	movw	r18, r4
     f94:	41 d1       	rcall	.+642    	; 0x1218 <__addsf3>
     f96:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^3
     f98:	3c 01       	movw	r6, r24
     f9a:	a5 01       	movw	r20, r10
     f9c:	94 01       	movw	r18, r8
     f9e:	c7 01       	movw	r24, r14
     fa0:	b6 01       	movw	r22, r12
     fa2:	f1 d2       	rcall	.+1506   	; 0x1586 <__mulsf3>
     fa4:	4b 01       	movw	r8, r22
	temp -= 4.8260e-6 * rpoly;
     fa6:	5c 01       	movw	r10, r24
     fa8:	26 e0       	ldi	r18, 0x06	; 6
     faa:	3f ee       	ldi	r19, 0xEF	; 239
     fac:	41 ea       	ldi	r20, 0xA1	; 161
     fae:	56 e3       	ldi	r21, 0x36	; 54
     fb0:	ea d2       	rcall	.+1492   	; 0x1586 <__mulsf3>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	c3 01       	movw	r24, r6
     fb8:	b2 01       	movw	r22, r4
     fba:	2d d1       	rcall	.+602    	; 0x1216 <__subsf3>
     fbc:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^4
     fbe:	3c 01       	movw	r6, r24
     fc0:	a5 01       	movw	r20, r10
     fc2:	94 01       	movw	r18, r8
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	de d2       	rcall	.+1468   	; 0x1586 <__mulsf3>
     fca:	4b 01       	movw	r8, r22
	temp -= 2.8183e-8 * rpoly;
     fcc:	5c 01       	movw	r10, r24
     fce:	23 e1       	ldi	r18, 0x13	; 19
     fd0:	37 e1       	ldi	r19, 0x17	; 23
     fd2:	42 ef       	ldi	r20, 0xF2	; 242
     fd4:	52 e3       	ldi	r21, 0x32	; 50
     fd6:	d7 d2       	rcall	.+1454   	; 0x1586 <__mulsf3>
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	c3 01       	movw	r24, r6
     fde:	b2 01       	movw	r22, r4
     fe0:	1a d1       	rcall	.+564    	; 0x1216 <__subsf3>
     fe2:	2b 01       	movw	r4, r22
     fe4:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
	temp += 1.5243e-10 * rpoly;
     fe6:	a5 01       	movw	r20, r10
     fe8:	94 01       	movw	r18, r8
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	cb d2       	rcall	.+1430   	; 0x1586 <__mulsf3>
     ff0:	2b e3       	ldi	r18, 0x3B	; 59
     ff2:	39 e9       	ldi	r19, 0x99	; 153
     ff4:	47 e2       	ldi	r20, 0x27	; 39
     ff6:	5f e2       	ldi	r21, 0x2F	; 47
     ff8:	c6 d2       	rcall	.+1420   	; 0x1586 <__mulsf3>
     ffa:	a3 01       	movw	r20, r6
     ffc:	92 01       	movw	r18, r4
     ffe:	0c d1       	rcall	.+536    	; 0x1218 <__addsf3>
    1000:	06 2f       	mov	r16, r22
    1002:	17 2f       	mov	r17, r23
    1004:	d8 2f       	mov	r29, r24

	return temp;
    1006:	c9 2f       	mov	r28, r25
    1008:	60 2f       	mov	r22, r16
    100a:	71 2f       	mov	r23, r17
    100c:	8d 2f       	mov	r24, r29
}
    100e:	9c 2f       	mov	r25, r28
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	8f 90       	pop	r8
    1028:	7f 90       	pop	r7
    102a:	6f 90       	pop	r6
    102c:	5f 90       	pop	r5
    102e:	4f 90       	pop	r4
    1030:	08 95       	ret

00001032 <_Z8spi_initv>:

#include <avr/io.h>

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    1032:	8c b5       	in	r24, 0x2c	; 44
    1034:	82 65       	ori	r24, 0x52	; 82
    1036:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
    1038:	8c b5       	in	r24, 0x2c	; 44
    103a:	8a 7f       	andi	r24, 0xFA	; 250
    103c:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDR(SCK_PORT) |= (1 << SCK_PIN) | (1 << MOSI_PIN) ;
    103e:	84 b1       	in	r24, 0x04	; 4
    1040:	86 60       	ori	r24, 0x06	; 6
    1042:	84 b9       	out	0x04, r24	; 4
	DDR(SS_PORT) |= (1  << SS_PIN);
    1044:	20 9a       	sbi	0x04, 0	; 4
	SS_PORT |= (1 << SS_PIN);
    1046:	28 9a       	sbi	0x05, 0	; 5
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    1048:	e7 e0       	ldi	r30, 0x07	; 7
    104a:	f1 e0       	ldi	r31, 0x01	; 1
    104c:	80 81       	ld	r24, Z
    104e:	80 6c       	ori	r24, 0xC0	; 192
    1050:	80 83       	st	Z, r24
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
    1052:	e8 e0       	ldi	r30, 0x08	; 8
    1054:	f1 e0       	ldi	r31, 0x01	; 1
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	80 83       	st	Z, r24
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
    105c:	80 81       	ld	r24, Z
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	80 83       	st	Z, r24
    1062:	08 95       	ret

00001064 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1064:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    1066:	0d b4       	in	r0, 0x2d	; 45
    1068:	07 fe       	sbrs	r0, 7
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <_Z11spiSendBytec+0x2>
}
    106c:	08 95       	ret

0000106e <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
    106e:	fc 01       	movw	r30, r24
	num = numm;
    1070:	71 83       	std	Z+1, r23	; 0x01
    1072:	60 83       	st	Z, r22
	digits1 = ii;
    1074:	53 83       	std	Z+3, r21	; 0x03
    1076:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
    1078:	35 83       	std	Z+5, r19	; 0x05
    107a:	24 83       	std	Z+4, r18	; 0x04
    107c:	08 95       	ret

0000107e <_ZN7max721917MAX7219_writeDataEcc>:
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
	}
}

void max7219::MAX7219_writeData(char data_register, char data)
{
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
    1088:	28 81       	ld	r18, Y
    108a:	39 81       	ldd	r19, Y+1	; 0x01
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	21 f0       	breq	.+8      	; 0x109a <_ZN7max721917MAX7219_writeDataEcc+0x1c>
    1092:	21 30       	cpi	r18, 0x01	; 1
    1094:	31 05       	cpc	r19, r1
    1096:	39 f0       	breq	.+14     	; 0x10a6 <_ZN7max721917MAX7219_writeDataEcc+0x28>
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 0:
		MAX7219_LOAD_ON_1(0);
    109a:	e8 e0       	ldi	r30, 0x08	; 8
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	80 81       	ld	r24, Z
    10a0:	8f 77       	andi	r24, 0x7F	; 127
    10a2:	80 83       	st	Z, r24
		break;
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 1:
		MAX7219_LOAD_ON_2(1);
    10a6:	e8 e0       	ldi	r30, 0x08	; 8
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	80 83       	st	Z, r24
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
    10b0:	86 2f       	mov	r24, r22
    10b2:	d8 df       	rcall	.-80     	; 0x1064 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
    10b4:	81 2f       	mov	r24, r17
    10b6:	d6 df       	rcall	.-84     	; 0x1064 <_Z11spiSendBytec>
	
	switch(max7219::num){
    10b8:	88 81       	ld	r24, Y
    10ba:	99 81       	ldd	r25, Y+1	; 0x01
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	19 f0       	breq	.+6      	; 0x10c6 <_ZN7max721917MAX7219_writeDataEcc+0x48>
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <_ZN7max721917MAX7219_writeDataEcc+0x54>
    10c4:	0b c0       	rjmp	.+22     	; 0x10dc <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
    10c6:	e8 e0       	ldi	r30, 0x08	; 8
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	80 83       	st	Z, r24
		break;
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
    10d2:	e8 e0       	ldi	r30, 0x08	; 8
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	80 81       	ld	r24, Z
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	80 83       	st	Z, r24
		break;
	}
	
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	08 95       	ret

000010e4 <_ZN7max721912MAX7219_initEc>:
void max7219::MAX7219_set(int numm, int ii, int jj) {
	num = numm;
	digits1 = ii;
	digits2 = jj;
}
void max7219::MAX7219_init(char a) {
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
	if(a == REINITIALIZE){
    10ea:	61 30       	cpi	r22, 0x01	; 1
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <_ZN7max721912MAX7219_initEc+0xe>
		spi_init();
    10ee:	a1 df       	rcall	.-190    	; 0x1032 <_Z8spi_initv>
    10f0:	15 c0       	rjmp	.+42     	; 0x111c <_ZN7max721912MAX7219_initEc+0x38>
	}
	else{
		spi_init();
    10f2:	9f df       	rcall	.-194    	; 0x1032 <_Z8spi_initv>
    10f4:	4f ef       	ldi	r20, 0xFF	; 255
		// Decode mode to "Font Code-B"
		max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    10f6:	69 e0       	ldi	r22, 0x09	; 9
    10f8:	ce 01       	movw	r24, r28
    10fa:	c1 df       	rcall	.-126    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
    10fc:	40 e0       	ldi	r20, 0x00	; 0
		max7219::MAX7219_writeData(MAX7219_MODE_TEST, 0);
    10fe:	6f e0       	ldi	r22, 0x0F	; 15
    1100:	ce 01       	movw	r24, r28
    1102:	bd df       	rcall	.-134    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
    1104:	47 e0       	ldi	r20, 0x07	; 7

		// Scan limit runs from 0.
		max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
    1106:	6b e0       	ldi	r22, 0x0B	; 11
    1108:	ce 01       	movw	r24, r28
    110a:	b9 df       	rcall	.-142    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
    110c:	4f ef       	ldi	r20, 0xFF	; 255
		max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0xff);
    110e:	6a e0       	ldi	r22, 0x0A	; 10
    1110:	ce 01       	movw	r24, r28
    1112:	b5 df       	rcall	.-150    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
    1114:	41 e0       	ldi	r20, 0x01	; 1
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
    1116:	6c e0       	ldi	r22, 0x0C	; 12
    1118:	ce 01       	movw	r24, r28
    111a:	b1 df       	rcall	.-158    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
	}
}
    1120:	08 95       	ret

00001122 <_ZN7max721920MAX7219_clearDisplayEv>:
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
	}
	
}

void max7219::MAX7219_clearDisplay()
{
    1126:	cf 93       	push	r28
    1128:	8c 01       	movw	r16, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
    112a:	fc 01       	movw	r30, r24
    112c:	c2 81       	ldd	r28, Z+2	; 0x02
    112e:	84 81       	ldd	r24, Z+4	; 0x04
    1130:	c8 0f       	add	r28, r24
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1132:	4f e0       	ldi	r20, 0x0F	; 15
    1134:	6c 2f       	mov	r22, r28
    1136:	c8 01       	movw	r24, r16
    1138:	a2 df       	rcall	.-188    	; 0x107e <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
    113a:	c1 50       	subi	r28, 0x01	; 1
    113c:	d1 f7       	brne	.-12     	; 0x1132 <_ZN7max721920MAX7219_clearDisplayEv+0x10>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDR(SS_PORT) |= (1 << SS_PIN);
    1146:	20 9a       	sbi	0x04, 0	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1148:	8c b5       	in	r24, 0x2c	; 44
    114a:	80 61       	ori	r24, 0x10	; 16
    114c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    114e:	8c b5       	in	r24, 0x2c	; 44
    1150:	80 64       	ori	r24, 0x40	; 64
    1152:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
    1154:	8c b5       	in	r24, 0x2c	; 44
    1156:	8c 7f       	andi	r24, 0xFC	; 252
    1158:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDR(SCK_PORT) |= (1 << SCK_PIN);
    115a:	21 9a       	sbi	0x04, 1	; 4
    //pinMode(MOSI, OUTPUT);
	DDR(MOSI_PORT) |= (1 << MOSI_PIN);
    115c:	22 9a       	sbi	0x04, 2	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    115e:	ea e0       	ldi	r30, 0x0A	; 10
    1160:	f1 e0       	ldi	r31, 0x01	; 1
    1162:	80 81       	ld	r24, Z
    1164:	85 60       	ori	r24, 0x05	; 5
    1166:	80 83       	st	Z, r24
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    1168:	eb e0       	ldi	r30, 0x0B	; 11
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	80 81       	ld	r24, Z
    116e:	85 60       	ori	r24, 0x05	; 5
    1170:	80 83       	st	Z, r24
    1172:	08 95       	ret

00001174 <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
    1174:	fc 01       	movw	r30, r24
    1176:	71 83       	std	Z+1, r23	; 0x01
    1178:	60 83       	st	Z, r22
    117a:	08 95       	ret

0000117c <_ZN6Timerr19setCompareInterruptEv>:
    117c:	ef e6       	ldi	r30, 0x6F	; 111
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24
    1186:	08 95       	ret

00001188 <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
		OCR1A = ocr;
    1188:	07 2e       	mov	r0, r23
    118a:	00 0c       	add	r0, r0
    118c:	88 0b       	sbc	r24, r24
    118e:	99 0b       	sbc	r25, r25
    1190:	46 d1       	rcall	.+652    	; 0x141e <__floatsisf>
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a e7       	ldi	r20, 0x7A	; 122
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	f5 d1       	rcall	.+1002   	; 0x1586 <__mulsf3>
    119c:	0d d1       	rcall	.+538    	; 0x13b8 <__fixsfsi>
    119e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    11a2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
    11a6:	e1 e8       	ldi	r30, 0x81	; 129
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	85 60       	ori	r24, 0x05	; 5
    11ae:	80 83       	st	Z, r24
    11b0:	08 95       	ret

000011b2 <_Z9initUART0v>:
	char *i=0;
	itoa(data,buffer,10);
	i=buffer;
	while(*i)
	UART0Transmit(*i++);
}
    11b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    11b6:	87 e6       	ldi	r24, 0x67	; 103
    11b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    11bc:	88 e9       	ldi	r24, 0x98	; 152
    11be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    11c2:	86 e0       	ldi	r24, 0x06	; 6
    11c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    11c8:	08 95       	ret

000011ca <_Z13UART0Transmith>:
    11ca:	e0 ec       	ldi	r30, 0xC0	; 192
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	90 81       	ld	r25, Z
    11d0:	95 ff       	sbrs	r25, 5
    11d2:	fd cf       	rjmp	.-6      	; 0x11ce <_Z13UART0Transmith+0x4>
    11d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    11d8:	08 95       	ret

000011da <_Z19UART0TransmitStringPKc>:

void UART0TransmitString(const char *s)
{
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
	while(*s)
    11e0:	88 81       	ld	r24, Y
    11e2:	88 23       	and	r24, r24
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <_Z19UART0TransmitStringPKc+0x16>
    11e6:	21 96       	adiw	r28, 0x01	; 1
	UART0Transmit(*s++);
    11e8:	f0 df       	rcall	.-32     	; 0x11ca <_Z13UART0Transmith>
	UART0Transmit(*i++);
}

void UART0TransmitString(const char *s)
{
	while(*s)
    11ea:	89 91       	ld	r24, Y+
    11ec:	81 11       	cpse	r24, r1
    11ee:	fc cf       	rjmp	.-8      	; 0x11e8 <_Z19UART0TransmitStringPKc+0xe>
	UART0Transmit(*s++);
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <__vector_25>:

ISR(USART0_RX_vect)
{
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	8f 93       	push	r24
	buffer=UDR0;
    1202:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1206:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <buffer>
	
}
    120a:	8f 91       	pop	r24
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__subsf3>:
    1216:	50 58       	subi	r21, 0x80	; 128

00001218 <__addsf3>:
    1218:	bb 27       	eor	r27, r27
    121a:	aa 27       	eor	r26, r26
    121c:	0e d0       	rcall	.+28     	; 0x123a <__addsf3x>
    121e:	75 c1       	rjmp	.+746    	; 0x150a <__fp_round>
    1220:	66 d1       	rcall	.+716    	; 0x14ee <__fp_pscA>
    1222:	30 f0       	brcs	.+12     	; 0x1230 <__addsf3+0x18>
    1224:	6b d1       	rcall	.+726    	; 0x14fc <__fp_pscB>
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__addsf3+0x18>
    1228:	31 f4       	brne	.+12     	; 0x1236 <__addsf3+0x1e>
    122a:	9f 3f       	cpi	r25, 0xFF	; 255
    122c:	11 f4       	brne	.+4      	; 0x1232 <__addsf3+0x1a>
    122e:	1e f4       	brtc	.+6      	; 0x1236 <__addsf3+0x1e>
    1230:	5b c1       	rjmp	.+694    	; 0x14e8 <__fp_nan>
    1232:	0e f4       	brtc	.+2      	; 0x1236 <__addsf3+0x1e>
    1234:	e0 95       	com	r30
    1236:	e7 fb       	bst	r30, 7
    1238:	51 c1       	rjmp	.+674    	; 0x14dc <__fp_inf>

0000123a <__addsf3x>:
    123a:	e9 2f       	mov	r30, r25
    123c:	77 d1       	rcall	.+750    	; 0x152c <__fp_split3>
    123e:	80 f3       	brcs	.-32     	; 0x1220 <__addsf3+0x8>
    1240:	ba 17       	cp	r27, r26
    1242:	62 07       	cpc	r22, r18
    1244:	73 07       	cpc	r23, r19
    1246:	84 07       	cpc	r24, r20
    1248:	95 07       	cpc	r25, r21
    124a:	18 f0       	brcs	.+6      	; 0x1252 <__addsf3x+0x18>
    124c:	71 f4       	brne	.+28     	; 0x126a <__addsf3x+0x30>
    124e:	9e f5       	brtc	.+102    	; 0x12b6 <__addsf3x+0x7c>
    1250:	8f c1       	rjmp	.+798    	; 0x1570 <__fp_zero>
    1252:	0e f4       	brtc	.+2      	; 0x1256 <__addsf3x+0x1c>
    1254:	e0 95       	com	r30
    1256:	0b 2e       	mov	r0, r27
    1258:	ba 2f       	mov	r27, r26
    125a:	a0 2d       	mov	r26, r0
    125c:	0b 01       	movw	r0, r22
    125e:	b9 01       	movw	r22, r18
    1260:	90 01       	movw	r18, r0
    1262:	0c 01       	movw	r0, r24
    1264:	ca 01       	movw	r24, r20
    1266:	a0 01       	movw	r20, r0
    1268:	11 24       	eor	r1, r1
    126a:	ff 27       	eor	r31, r31
    126c:	59 1b       	sub	r21, r25
    126e:	99 f0       	breq	.+38     	; 0x1296 <__addsf3x+0x5c>
    1270:	59 3f       	cpi	r21, 0xF9	; 249
    1272:	50 f4       	brcc	.+20     	; 0x1288 <__addsf3x+0x4e>
    1274:	50 3e       	cpi	r21, 0xE0	; 224
    1276:	68 f1       	brcs	.+90     	; 0x12d2 <__addsf3x+0x98>
    1278:	1a 16       	cp	r1, r26
    127a:	f0 40       	sbci	r31, 0x00	; 0
    127c:	a2 2f       	mov	r26, r18
    127e:	23 2f       	mov	r18, r19
    1280:	34 2f       	mov	r19, r20
    1282:	44 27       	eor	r20, r20
    1284:	58 5f       	subi	r21, 0xF8	; 248
    1286:	f3 cf       	rjmp	.-26     	; 0x126e <__addsf3x+0x34>
    1288:	46 95       	lsr	r20
    128a:	37 95       	ror	r19
    128c:	27 95       	ror	r18
    128e:	a7 95       	ror	r26
    1290:	f0 40       	sbci	r31, 0x00	; 0
    1292:	53 95       	inc	r21
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__addsf3x+0x4e>
    1296:	7e f4       	brtc	.+30     	; 0x12b6 <__addsf3x+0x7c>
    1298:	1f 16       	cp	r1, r31
    129a:	ba 0b       	sbc	r27, r26
    129c:	62 0b       	sbc	r22, r18
    129e:	73 0b       	sbc	r23, r19
    12a0:	84 0b       	sbc	r24, r20
    12a2:	ba f0       	brmi	.+46     	; 0x12d2 <__addsf3x+0x98>
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	a1 f0       	breq	.+40     	; 0x12d0 <__addsf3x+0x96>
    12a8:	ff 0f       	add	r31, r31
    12aa:	bb 1f       	adc	r27, r27
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	c2 f7       	brpl	.-16     	; 0x12a4 <__addsf3x+0x6a>
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <__addsf3x+0x98>
    12b6:	ba 0f       	add	r27, r26
    12b8:	62 1f       	adc	r22, r18
    12ba:	73 1f       	adc	r23, r19
    12bc:	84 1f       	adc	r24, r20
    12be:	48 f4       	brcc	.+18     	; 0x12d2 <__addsf3x+0x98>
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__addsf3x+0x96>
    12ce:	b3 cf       	rjmp	.-154    	; 0x1236 <__addsf3+0x1e>
    12d0:	93 95       	inc	r25
    12d2:	88 0f       	add	r24, r24
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__addsf3x+0x9e>
    12d6:	99 27       	eor	r25, r25
    12d8:	ee 0f       	add	r30, r30
    12da:	97 95       	ror	r25
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret

000012e0 <__cmpsf2>:
    12e0:	d9 d0       	rcall	.+434    	; 0x1494 <__fp_cmp>
    12e2:	08 f4       	brcc	.+2      	; 0x12e6 <__cmpsf2+0x6>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	08 95       	ret

000012e8 <__divsf3>:
    12e8:	0c d0       	rcall	.+24     	; 0x1302 <__divsf3x>
    12ea:	0f c1       	rjmp	.+542    	; 0x150a <__fp_round>
    12ec:	07 d1       	rcall	.+526    	; 0x14fc <__fp_pscB>
    12ee:	40 f0       	brcs	.+16     	; 0x1300 <__divsf3+0x18>
    12f0:	fe d0       	rcall	.+508    	; 0x14ee <__fp_pscA>
    12f2:	30 f0       	brcs	.+12     	; 0x1300 <__divsf3+0x18>
    12f4:	21 f4       	brne	.+8      	; 0x12fe <__divsf3+0x16>
    12f6:	5f 3f       	cpi	r21, 0xFF	; 255
    12f8:	19 f0       	breq	.+6      	; 0x1300 <__divsf3+0x18>
    12fa:	f0 c0       	rjmp	.+480    	; 0x14dc <__fp_inf>
    12fc:	51 11       	cpse	r21, r1
    12fe:	39 c1       	rjmp	.+626    	; 0x1572 <__fp_szero>
    1300:	f3 c0       	rjmp	.+486    	; 0x14e8 <__fp_nan>

00001302 <__divsf3x>:
    1302:	14 d1       	rcall	.+552    	; 0x152c <__fp_split3>
    1304:	98 f3       	brcs	.-26     	; 0x12ec <__divsf3+0x4>

00001306 <__divsf3_pse>:
    1306:	99 23       	and	r25, r25
    1308:	c9 f3       	breq	.-14     	; 0x12fc <__divsf3+0x14>
    130a:	55 23       	and	r21, r21
    130c:	b1 f3       	breq	.-20     	; 0x12fa <__divsf3+0x12>
    130e:	95 1b       	sub	r25, r21
    1310:	55 0b       	sbc	r21, r21
    1312:	bb 27       	eor	r27, r27
    1314:	aa 27       	eor	r26, r26
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	84 07       	cpc	r24, r20
    131c:	38 f0       	brcs	.+14     	; 0x132c <__divsf3_pse+0x26>
    131e:	9f 5f       	subi	r25, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	44 1f       	adc	r20, r20
    1328:	aa 1f       	adc	r26, r26
    132a:	a9 f3       	breq	.-22     	; 0x1316 <__divsf3_pse+0x10>
    132c:	33 d0       	rcall	.+102    	; 0x1394 <__divsf3_pse+0x8e>
    132e:	0e 2e       	mov	r0, r30
    1330:	3a f0       	brmi	.+14     	; 0x1340 <__divsf3_pse+0x3a>
    1332:	e0 e8       	ldi	r30, 0x80	; 128
    1334:	30 d0       	rcall	.+96     	; 0x1396 <__divsf3_pse+0x90>
    1336:	91 50       	subi	r25, 0x01	; 1
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	e6 95       	lsr	r30
    133c:	00 1c       	adc	r0, r0
    133e:	ca f7       	brpl	.-14     	; 0x1332 <__divsf3_pse+0x2c>
    1340:	29 d0       	rcall	.+82     	; 0x1394 <__divsf3_pse+0x8e>
    1342:	fe 2f       	mov	r31, r30
    1344:	27 d0       	rcall	.+78     	; 0x1394 <__divsf3_pse+0x8e>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	bb 1f       	adc	r27, r27
    134e:	26 17       	cp	r18, r22
    1350:	37 07       	cpc	r19, r23
    1352:	48 07       	cpc	r20, r24
    1354:	ab 07       	cpc	r26, r27
    1356:	b0 e8       	ldi	r27, 0x80	; 128
    1358:	09 f0       	breq	.+2      	; 0x135c <__divsf3_pse+0x56>
    135a:	bb 0b       	sbc	r27, r27
    135c:	80 2d       	mov	r24, r0
    135e:	bf 01       	movw	r22, r30
    1360:	ff 27       	eor	r31, r31
    1362:	93 58       	subi	r25, 0x83	; 131
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	2a f0       	brmi	.+10     	; 0x1372 <__divsf3_pse+0x6c>
    1368:	9e 3f       	cpi	r25, 0xFE	; 254
    136a:	51 05       	cpc	r21, r1
    136c:	68 f0       	brcs	.+26     	; 0x1388 <__divsf3_pse+0x82>
    136e:	b6 c0       	rjmp	.+364    	; 0x14dc <__fp_inf>
    1370:	00 c1       	rjmp	.+512    	; 0x1572 <__fp_szero>
    1372:	5f 3f       	cpi	r21, 0xFF	; 255
    1374:	ec f3       	brlt	.-6      	; 0x1370 <__divsf3_pse+0x6a>
    1376:	98 3e       	cpi	r25, 0xE8	; 232
    1378:	dc f3       	brlt	.-10     	; 0x1370 <__divsf3_pse+0x6a>
    137a:	86 95       	lsr	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b7 95       	ror	r27
    1382:	f7 95       	ror	r31
    1384:	9f 5f       	subi	r25, 0xFF	; 255
    1386:	c9 f7       	brne	.-14     	; 0x137a <__divsf3_pse+0x74>
    1388:	88 0f       	add	r24, r24
    138a:	91 1d       	adc	r25, r1
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	97 f9       	bld	r25, 7
    1392:	08 95       	ret
    1394:	e1 e0       	ldi	r30, 0x01	; 1
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	bb 1f       	adc	r27, r27
    139e:	62 17       	cp	r22, r18
    13a0:	73 07       	cpc	r23, r19
    13a2:	84 07       	cpc	r24, r20
    13a4:	ba 07       	cpc	r27, r26
    13a6:	20 f0       	brcs	.+8      	; 0x13b0 <__divsf3_pse+0xaa>
    13a8:	62 1b       	sub	r22, r18
    13aa:	73 0b       	sbc	r23, r19
    13ac:	84 0b       	sbc	r24, r20
    13ae:	ba 0b       	sbc	r27, r26
    13b0:	ee 1f       	adc	r30, r30
    13b2:	88 f7       	brcc	.-30     	; 0x1396 <__divsf3_pse+0x90>
    13b4:	e0 95       	com	r30
    13b6:	08 95       	ret

000013b8 <__fixsfsi>:
    13b8:	04 d0       	rcall	.+8      	; 0x13c2 <__fixunssfsi>
    13ba:	68 94       	set
    13bc:	b1 11       	cpse	r27, r1
    13be:	d9 c0       	rjmp	.+434    	; 0x1572 <__fp_szero>
    13c0:	08 95       	ret

000013c2 <__fixunssfsi>:
    13c2:	bc d0       	rcall	.+376    	; 0x153c <__fp_splitA>
    13c4:	88 f0       	brcs	.+34     	; 0x13e8 <__fixunssfsi+0x26>
    13c6:	9f 57       	subi	r25, 0x7F	; 127
    13c8:	90 f0       	brcs	.+36     	; 0x13ee <__fixunssfsi+0x2c>
    13ca:	b9 2f       	mov	r27, r25
    13cc:	99 27       	eor	r25, r25
    13ce:	b7 51       	subi	r27, 0x17	; 23
    13d0:	a0 f0       	brcs	.+40     	; 0x13fa <__fixunssfsi+0x38>
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <__fixunssfsi+0x46>
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	88 1f       	adc	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	1a f0       	brmi	.+6      	; 0x13e4 <__fixunssfsi+0x22>
    13de:	ba 95       	dec	r27
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <__fixunssfsi+0x12>
    13e2:	12 c0       	rjmp	.+36     	; 0x1408 <__fixunssfsi+0x46>
    13e4:	b1 30       	cpi	r27, 0x01	; 1
    13e6:	81 f0       	breq	.+32     	; 0x1408 <__fixunssfsi+0x46>
    13e8:	c3 d0       	rcall	.+390    	; 0x1570 <__fp_zero>
    13ea:	b1 e0       	ldi	r27, 0x01	; 1
    13ec:	08 95       	ret
    13ee:	c0 c0       	rjmp	.+384    	; 0x1570 <__fp_zero>
    13f0:	67 2f       	mov	r22, r23
    13f2:	78 2f       	mov	r23, r24
    13f4:	88 27       	eor	r24, r24
    13f6:	b8 5f       	subi	r27, 0xF8	; 248
    13f8:	39 f0       	breq	.+14     	; 0x1408 <__fixunssfsi+0x46>
    13fa:	b9 3f       	cpi	r27, 0xF9	; 249
    13fc:	cc f3       	brlt	.-14     	; 0x13f0 <__fixunssfsi+0x2e>
    13fe:	86 95       	lsr	r24
    1400:	77 95       	ror	r23
    1402:	67 95       	ror	r22
    1404:	b3 95       	inc	r27
    1406:	d9 f7       	brne	.-10     	; 0x13fe <__fixunssfsi+0x3c>
    1408:	3e f4       	brtc	.+14     	; 0x1418 <__fixunssfsi+0x56>
    140a:	90 95       	com	r25
    140c:	80 95       	com	r24
    140e:	70 95       	com	r23
    1410:	61 95       	neg	r22
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	08 95       	ret

0000141a <__floatunsisf>:
    141a:	e8 94       	clt
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <__floatsisf+0x12>

0000141e <__floatsisf>:
    141e:	97 fb       	bst	r25, 7
    1420:	3e f4       	brtc	.+14     	; 0x1430 <__floatsisf+0x12>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	99 23       	and	r25, r25
    1432:	a9 f0       	breq	.+42     	; 0x145e <__floatsisf+0x40>
    1434:	f9 2f       	mov	r31, r25
    1436:	96 e9       	ldi	r25, 0x96	; 150
    1438:	bb 27       	eor	r27, r27
    143a:	93 95       	inc	r25
    143c:	f6 95       	lsr	r31
    143e:	87 95       	ror	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f1 11       	cpse	r31, r1
    1448:	f8 cf       	rjmp	.-16     	; 0x143a <__floatsisf+0x1c>
    144a:	fa f4       	brpl	.+62     	; 0x148a <__floatsisf+0x6c>
    144c:	bb 0f       	add	r27, r27
    144e:	11 f4       	brne	.+4      	; 0x1454 <__floatsisf+0x36>
    1450:	60 ff       	sbrs	r22, 0
    1452:	1b c0       	rjmp	.+54     	; 0x148a <__floatsisf+0x6c>
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	8f 4f       	sbci	r24, 0xFF	; 255
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	16 c0       	rjmp	.+44     	; 0x148a <__floatsisf+0x6c>
    145e:	88 23       	and	r24, r24
    1460:	11 f0       	breq	.+4      	; 0x1466 <__floatsisf+0x48>
    1462:	96 e9       	ldi	r25, 0x96	; 150
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <__floatsisf+0x6a>
    1466:	77 23       	and	r23, r23
    1468:	21 f0       	breq	.+8      	; 0x1472 <__floatsisf+0x54>
    146a:	9e e8       	ldi	r25, 0x8E	; 142
    146c:	87 2f       	mov	r24, r23
    146e:	76 2f       	mov	r23, r22
    1470:	05 c0       	rjmp	.+10     	; 0x147c <__floatsisf+0x5e>
    1472:	66 23       	and	r22, r22
    1474:	71 f0       	breq	.+28     	; 0x1492 <__floatsisf+0x74>
    1476:	96 e8       	ldi	r25, 0x86	; 134
    1478:	86 2f       	mov	r24, r22
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	2a f0       	brmi	.+10     	; 0x148a <__floatsisf+0x6c>
    1480:	9a 95       	dec	r25
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	da f7       	brpl	.-10     	; 0x1480 <__floatsisf+0x62>
    148a:	88 0f       	add	r24, r24
    148c:	96 95       	lsr	r25
    148e:	87 95       	ror	r24
    1490:	97 f9       	bld	r25, 7
    1492:	08 95       	ret

00001494 <__fp_cmp>:
    1494:	99 0f       	add	r25, r25
    1496:	00 08       	sbc	r0, r0
    1498:	55 0f       	add	r21, r21
    149a:	aa 0b       	sbc	r26, r26
    149c:	e0 e8       	ldi	r30, 0x80	; 128
    149e:	fe ef       	ldi	r31, 0xFE	; 254
    14a0:	16 16       	cp	r1, r22
    14a2:	17 06       	cpc	r1, r23
    14a4:	e8 07       	cpc	r30, r24
    14a6:	f9 07       	cpc	r31, r25
    14a8:	c0 f0       	brcs	.+48     	; 0x14da <__fp_cmp+0x46>
    14aa:	12 16       	cp	r1, r18
    14ac:	13 06       	cpc	r1, r19
    14ae:	e4 07       	cpc	r30, r20
    14b0:	f5 07       	cpc	r31, r21
    14b2:	98 f0       	brcs	.+38     	; 0x14da <__fp_cmp+0x46>
    14b4:	62 1b       	sub	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	95 0b       	sbc	r25, r21
    14bc:	39 f4       	brne	.+14     	; 0x14cc <__fp_cmp+0x38>
    14be:	0a 26       	eor	r0, r26
    14c0:	61 f0       	breq	.+24     	; 0x14da <__fp_cmp+0x46>
    14c2:	23 2b       	or	r18, r19
    14c4:	24 2b       	or	r18, r20
    14c6:	25 2b       	or	r18, r21
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <__fp_cmp+0x3e>
    14ca:	08 95       	ret
    14cc:	0a 26       	eor	r0, r26
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <__fp_cmp+0x3e>
    14d0:	a1 40       	sbci	r26, 0x01	; 1
    14d2:	a6 95       	lsr	r26
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	81 1d       	adc	r24, r1
    14d8:	81 1d       	adc	r24, r1
    14da:	08 95       	ret

000014dc <__fp_inf>:
    14dc:	97 f9       	bld	r25, 7
    14de:	9f 67       	ori	r25, 0x7F	; 127
    14e0:	80 e8       	ldi	r24, 0x80	; 128
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	08 95       	ret

000014e8 <__fp_nan>:
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	80 ec       	ldi	r24, 0xC0	; 192
    14ec:	08 95       	ret

000014ee <__fp_pscA>:
    14ee:	00 24       	eor	r0, r0
    14f0:	0a 94       	dec	r0
    14f2:	16 16       	cp	r1, r22
    14f4:	17 06       	cpc	r1, r23
    14f6:	18 06       	cpc	r1, r24
    14f8:	09 06       	cpc	r0, r25
    14fa:	08 95       	ret

000014fc <__fp_pscB>:
    14fc:	00 24       	eor	r0, r0
    14fe:	0a 94       	dec	r0
    1500:	12 16       	cp	r1, r18
    1502:	13 06       	cpc	r1, r19
    1504:	14 06       	cpc	r1, r20
    1506:	05 06       	cpc	r0, r21
    1508:	08 95       	ret

0000150a <__fp_round>:
    150a:	09 2e       	mov	r0, r25
    150c:	03 94       	inc	r0
    150e:	00 0c       	add	r0, r0
    1510:	11 f4       	brne	.+4      	; 0x1516 <__fp_round+0xc>
    1512:	88 23       	and	r24, r24
    1514:	52 f0       	brmi	.+20     	; 0x152a <__fp_round+0x20>
    1516:	bb 0f       	add	r27, r27
    1518:	40 f4       	brcc	.+16     	; 0x152a <__fp_round+0x20>
    151a:	bf 2b       	or	r27, r31
    151c:	11 f4       	brne	.+4      	; 0x1522 <__fp_round+0x18>
    151e:	60 ff       	sbrs	r22, 0
    1520:	04 c0       	rjmp	.+8      	; 0x152a <__fp_round+0x20>
    1522:	6f 5f       	subi	r22, 0xFF	; 255
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	08 95       	ret

0000152c <__fp_split3>:
    152c:	57 fd       	sbrc	r21, 7
    152e:	90 58       	subi	r25, 0x80	; 128
    1530:	44 0f       	add	r20, r20
    1532:	55 1f       	adc	r21, r21
    1534:	59 f0       	breq	.+22     	; 0x154c <__fp_splitA+0x10>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	71 f0       	breq	.+28     	; 0x1556 <__fp_splitA+0x1a>
    153a:	47 95       	ror	r20

0000153c <__fp_splitA>:
    153c:	88 0f       	add	r24, r24
    153e:	97 fb       	bst	r25, 7
    1540:	99 1f       	adc	r25, r25
    1542:	61 f0       	breq	.+24     	; 0x155c <__fp_splitA+0x20>
    1544:	9f 3f       	cpi	r25, 0xFF	; 255
    1546:	79 f0       	breq	.+30     	; 0x1566 <__fp_splitA+0x2a>
    1548:	87 95       	ror	r24
    154a:	08 95       	ret
    154c:	12 16       	cp	r1, r18
    154e:	13 06       	cpc	r1, r19
    1550:	14 06       	cpc	r1, r20
    1552:	55 1f       	adc	r21, r21
    1554:	f2 cf       	rjmp	.-28     	; 0x153a <__fp_split3+0xe>
    1556:	46 95       	lsr	r20
    1558:	f1 df       	rcall	.-30     	; 0x153c <__fp_splitA>
    155a:	08 c0       	rjmp	.+16     	; 0x156c <__fp_splitA+0x30>
    155c:	16 16       	cp	r1, r22
    155e:	17 06       	cpc	r1, r23
    1560:	18 06       	cpc	r1, r24
    1562:	99 1f       	adc	r25, r25
    1564:	f1 cf       	rjmp	.-30     	; 0x1548 <__fp_splitA+0xc>
    1566:	86 95       	lsr	r24
    1568:	71 05       	cpc	r23, r1
    156a:	61 05       	cpc	r22, r1
    156c:	08 94       	sec
    156e:	08 95       	ret

00001570 <__fp_zero>:
    1570:	e8 94       	clt

00001572 <__fp_szero>:
    1572:	bb 27       	eor	r27, r27
    1574:	66 27       	eor	r22, r22
    1576:	77 27       	eor	r23, r23
    1578:	cb 01       	movw	r24, r22
    157a:	97 f9       	bld	r25, 7
    157c:	08 95       	ret

0000157e <__gesf2>:
    157e:	8a df       	rcall	.-236    	; 0x1494 <__fp_cmp>
    1580:	08 f4       	brcc	.+2      	; 0x1584 <__gesf2+0x6>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__mulsf3>:
    1586:	0b d0       	rcall	.+22     	; 0x159e <__mulsf3x>
    1588:	c0 cf       	rjmp	.-128    	; 0x150a <__fp_round>
    158a:	b1 df       	rcall	.-158    	; 0x14ee <__fp_pscA>
    158c:	28 f0       	brcs	.+10     	; 0x1598 <__mulsf3+0x12>
    158e:	b6 df       	rcall	.-148    	; 0x14fc <__fp_pscB>
    1590:	18 f0       	brcs	.+6      	; 0x1598 <__mulsf3+0x12>
    1592:	95 23       	and	r25, r21
    1594:	09 f0       	breq	.+2      	; 0x1598 <__mulsf3+0x12>
    1596:	a2 cf       	rjmp	.-188    	; 0x14dc <__fp_inf>
    1598:	a7 cf       	rjmp	.-178    	; 0x14e8 <__fp_nan>
    159a:	11 24       	eor	r1, r1
    159c:	ea cf       	rjmp	.-44     	; 0x1572 <__fp_szero>

0000159e <__mulsf3x>:
    159e:	c6 df       	rcall	.-116    	; 0x152c <__fp_split3>
    15a0:	a0 f3       	brcs	.-24     	; 0x158a <__mulsf3+0x4>

000015a2 <__mulsf3_pse>:
    15a2:	95 9f       	mul	r25, r21
    15a4:	d1 f3       	breq	.-12     	; 0x159a <__mulsf3+0x14>
    15a6:	95 0f       	add	r25, r21
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	55 1f       	adc	r21, r21
    15ac:	62 9f       	mul	r22, r18
    15ae:	f0 01       	movw	r30, r0
    15b0:	72 9f       	mul	r23, r18
    15b2:	bb 27       	eor	r27, r27
    15b4:	f0 0d       	add	r31, r0
    15b6:	b1 1d       	adc	r27, r1
    15b8:	63 9f       	mul	r22, r19
    15ba:	aa 27       	eor	r26, r26
    15bc:	f0 0d       	add	r31, r0
    15be:	b1 1d       	adc	r27, r1
    15c0:	aa 1f       	adc	r26, r26
    15c2:	64 9f       	mul	r22, r20
    15c4:	66 27       	eor	r22, r22
    15c6:	b0 0d       	add	r27, r0
    15c8:	a1 1d       	adc	r26, r1
    15ca:	66 1f       	adc	r22, r22
    15cc:	82 9f       	mul	r24, r18
    15ce:	22 27       	eor	r18, r18
    15d0:	b0 0d       	add	r27, r0
    15d2:	a1 1d       	adc	r26, r1
    15d4:	62 1f       	adc	r22, r18
    15d6:	73 9f       	mul	r23, r19
    15d8:	b0 0d       	add	r27, r0
    15da:	a1 1d       	adc	r26, r1
    15dc:	62 1f       	adc	r22, r18
    15de:	83 9f       	mul	r24, r19
    15e0:	a0 0d       	add	r26, r0
    15e2:	61 1d       	adc	r22, r1
    15e4:	22 1f       	adc	r18, r18
    15e6:	74 9f       	mul	r23, r20
    15e8:	33 27       	eor	r19, r19
    15ea:	a0 0d       	add	r26, r0
    15ec:	61 1d       	adc	r22, r1
    15ee:	23 1f       	adc	r18, r19
    15f0:	84 9f       	mul	r24, r20
    15f2:	60 0d       	add	r22, r0
    15f4:	21 1d       	adc	r18, r1
    15f6:	82 2f       	mov	r24, r18
    15f8:	76 2f       	mov	r23, r22
    15fa:	6a 2f       	mov	r22, r26
    15fc:	11 24       	eor	r1, r1
    15fe:	9f 57       	subi	r25, 0x7F	; 127
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	8a f0       	brmi	.+34     	; 0x1626 <__mulsf3_pse+0x84>
    1604:	e1 f0       	breq	.+56     	; 0x163e <__mulsf3_pse+0x9c>
    1606:	88 23       	and	r24, r24
    1608:	4a f0       	brmi	.+18     	; 0x161c <__mulsf3_pse+0x7a>
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	bb 1f       	adc	r27, r27
    1610:	66 1f       	adc	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	91 50       	subi	r25, 0x01	; 1
    1618:	50 40       	sbci	r21, 0x00	; 0
    161a:	a9 f7       	brne	.-22     	; 0x1606 <__mulsf3_pse+0x64>
    161c:	9e 3f       	cpi	r25, 0xFE	; 254
    161e:	51 05       	cpc	r21, r1
    1620:	70 f0       	brcs	.+28     	; 0x163e <__mulsf3_pse+0x9c>
    1622:	5c cf       	rjmp	.-328    	; 0x14dc <__fp_inf>
    1624:	a6 cf       	rjmp	.-180    	; 0x1572 <__fp_szero>
    1626:	5f 3f       	cpi	r21, 0xFF	; 255
    1628:	ec f3       	brlt	.-6      	; 0x1624 <__mulsf3_pse+0x82>
    162a:	98 3e       	cpi	r25, 0xE8	; 232
    162c:	dc f3       	brlt	.-10     	; 0x1624 <__mulsf3_pse+0x82>
    162e:	86 95       	lsr	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	b7 95       	ror	r27
    1636:	f7 95       	ror	r31
    1638:	e7 95       	ror	r30
    163a:	9f 5f       	subi	r25, 0xFF	; 255
    163c:	c1 f7       	brne	.-16     	; 0x162e <__mulsf3_pse+0x8c>
    163e:	fe 2b       	or	r31, r30
    1640:	88 0f       	add	r24, r24
    1642:	91 1d       	adc	r25, r1
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	97 f9       	bld	r25, 7
    164a:	08 95       	ret
    164c:	11 f4       	brne	.+4      	; 0x1652 <__mulsf3_pse+0xb0>
    164e:	0e f4       	brtc	.+2      	; 0x1652 <__mulsf3_pse+0xb0>
    1650:	4b cf       	rjmp	.-362    	; 0x14e8 <__fp_nan>
    1652:	3e c0       	rjmp	.+124    	; 0x16d0 <__fp_mpack>

00001654 <sqrt>:
    1654:	73 df       	rcall	.-282    	; 0x153c <__fp_splitA>
    1656:	d0 f3       	brcs	.-12     	; 0x164c <__mulsf3_pse+0xaa>
    1658:	99 23       	and	r25, r25
    165a:	d9 f3       	breq	.-10     	; 0x1652 <__mulsf3_pse+0xb0>
    165c:	ce f3       	brts	.-14     	; 0x1650 <__mulsf3_pse+0xae>
    165e:	9f 57       	subi	r25, 0x7F	; 127
    1660:	55 0b       	sbc	r21, r21
    1662:	87 ff       	sbrs	r24, 7
    1664:	43 d0       	rcall	.+134    	; 0x16ec <__fp_norm2>
    1666:	00 24       	eor	r0, r0
    1668:	a0 e6       	ldi	r26, 0x60	; 96
    166a:	40 ea       	ldi	r20, 0xA0	; 160
    166c:	90 01       	movw	r18, r0
    166e:	80 58       	subi	r24, 0x80	; 128
    1670:	56 95       	lsr	r21
    1672:	97 95       	ror	r25
    1674:	28 f4       	brcc	.+10     	; 0x1680 <sqrt+0x2c>
    1676:	80 5c       	subi	r24, 0xC0	; 192
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	20 f0       	brcs	.+8      	; 0x1688 <sqrt+0x34>
    1680:	26 17       	cp	r18, r22
    1682:	37 07       	cpc	r19, r23
    1684:	48 07       	cpc	r20, r24
    1686:	30 f4       	brcc	.+12     	; 0x1694 <sqrt+0x40>
    1688:	62 1b       	sub	r22, r18
    168a:	73 0b       	sbc	r23, r19
    168c:	84 0b       	sbc	r24, r20
    168e:	20 29       	or	r18, r0
    1690:	31 29       	or	r19, r1
    1692:	4a 2b       	or	r20, r26
    1694:	a6 95       	lsr	r26
    1696:	17 94       	ror	r1
    1698:	07 94       	ror	r0
    169a:	20 25       	eor	r18, r0
    169c:	31 25       	eor	r19, r1
    169e:	4a 27       	eor	r20, r26
    16a0:	58 f7       	brcc	.-42     	; 0x1678 <sqrt+0x24>
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <sqrt+0x5e>
    16aa:	26 17       	cp	r18, r22
    16ac:	37 07       	cpc	r19, r23
    16ae:	48 07       	cpc	r20, r24
    16b0:	30 f4       	brcc	.+12     	; 0x16be <sqrt+0x6a>
    16b2:	62 0b       	sbc	r22, r18
    16b4:	73 0b       	sbc	r23, r19
    16b6:	84 0b       	sbc	r24, r20
    16b8:	20 0d       	add	r18, r0
    16ba:	31 1d       	adc	r19, r1
    16bc:	41 1d       	adc	r20, r1
    16be:	a0 95       	com	r26
    16c0:	81 f7       	brne	.-32     	; 0x16a2 <sqrt+0x4e>
    16c2:	b9 01       	movw	r22, r18
    16c4:	84 2f       	mov	r24, r20
    16c6:	91 58       	subi	r25, 0x81	; 129
    16c8:	88 0f       	add	r24, r24
    16ca:	96 95       	lsr	r25
    16cc:	87 95       	ror	r24
    16ce:	08 95       	ret

000016d0 <__fp_mpack>:
    16d0:	9f 3f       	cpi	r25, 0xFF	; 255
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <__fp_mpack_finite+0xc>

000016d4 <__fp_mpack_finite>:
    16d4:	91 50       	subi	r25, 0x01	; 1
    16d6:	20 f4       	brcc	.+8      	; 0x16e0 <__fp_mpack_finite+0xc>
    16d8:	87 95       	ror	r24
    16da:	77 95       	ror	r23
    16dc:	67 95       	ror	r22
    16de:	b7 95       	ror	r27
    16e0:	88 0f       	add	r24, r24
    16e2:	91 1d       	adc	r25, r1
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret

000016ec <__fp_norm2>:
    16ec:	91 50       	subi	r25, 0x01	; 1
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	66 0f       	add	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	d2 f7       	brpl	.-12     	; 0x16ec <__fp_norm2>
    16f8:	08 95       	ret

000016fa <__divmodhi4>:
    16fa:	97 fb       	bst	r25, 7
    16fc:	07 2e       	mov	r0, r23
    16fe:	16 f4       	brtc	.+4      	; 0x1704 <__divmodhi4+0xa>
    1700:	00 94       	com	r0
    1702:	06 d0       	rcall	.+12     	; 0x1710 <__divmodhi4_neg1>
    1704:	77 fd       	sbrc	r23, 7
    1706:	08 d0       	rcall	.+16     	; 0x1718 <__divmodhi4_neg2>
    1708:	0b d0       	rcall	.+22     	; 0x1720 <__udivmodhi4>
    170a:	07 fc       	sbrc	r0, 7
    170c:	05 d0       	rcall	.+10     	; 0x1718 <__divmodhi4_neg2>
    170e:	3e f4       	brtc	.+14     	; 0x171e <__divmodhi4_exit>

00001710 <__divmodhi4_neg1>:
    1710:	90 95       	com	r25
    1712:	81 95       	neg	r24
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__divmodhi4_neg2>:
    1718:	70 95       	com	r23
    171a:	61 95       	neg	r22
    171c:	7f 4f       	sbci	r23, 0xFF	; 255

0000171e <__divmodhi4_exit>:
    171e:	08 95       	ret

00001720 <__udivmodhi4>:
    1720:	aa 1b       	sub	r26, r26
    1722:	bb 1b       	sub	r27, r27
    1724:	51 e1       	ldi	r21, 0x11	; 17
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <__udivmodhi4_ep>

00001728 <__udivmodhi4_loop>:
    1728:	aa 1f       	adc	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	a6 17       	cp	r26, r22
    172e:	b7 07       	cpc	r27, r23
    1730:	10 f0       	brcs	.+4      	; 0x1736 <__udivmodhi4_ep>
    1732:	a6 1b       	sub	r26, r22
    1734:	b7 0b       	sbc	r27, r23

00001736 <__udivmodhi4_ep>:
    1736:	88 1f       	adc	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	5a 95       	dec	r21
    173c:	a9 f7       	brne	.-22     	; 0x1728 <__udivmodhi4_loop>
    173e:	80 95       	com	r24
    1740:	90 95       	com	r25
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	08 95       	ret

00001748 <__tablejump2__>:
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	88 1f       	adc	r24, r24
    174e:	8b bf       	out	0x3b, r24	; 59
    1750:	07 90       	elpm	r0, Z+
    1752:	f6 91       	elpm	r31, Z
    1754:	e0 2d       	mov	r30, r0
    1756:	19 94       	eijmp

00001758 <_exit>:
    1758:	f8 94       	cli

0000175a <__stop_program>:
    175a:	ff cf       	rjmp	.-2      	; 0x175a <__stop_program>
