
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00002190  00002224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080020a  0080020a  0000222e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005eef  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000191d  00000000  00000000  0000846f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c5c  00000000  00000000  00009d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  0000b9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001536  00000000  00000000  0000c138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000204b  00000000  00000000  0000d66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__vector_17>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	8d 0a       	sbc	r8, r29

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e0 e9       	ldi	r30, 0x90	; 144
      fe:	f1 e2       	ldi	r31, 0x21	; 33
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	aa 30       	cpi	r26, 0x0A	; 10
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	aa e0       	ldi	r26, 0x0A	; 10
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a8 34       	cpi	r26, 0x48	; 72
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 be 10 	call	0x217c	; 0x217c <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	40 d7       	rcall	.+3712   	; 0xfc2 <main>
     142:	0c 94 c6 10 	jmp	0x218c	; 0x218c <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z12init_devicesv>:
	
	max2.MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
	max2.MAX7219_writeData(1,das);
	max2.MAX7219_writeData(6,S);
	max2.MAX7219_writeData(8,E);
	max2.MAX7219_writeData(2,t);
     148:	78 94       	sei
     14a:	8c e3       	ldi	r24, 0x3C	; 60
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Controls12initControlsEv>
     152:	85 e1       	ldi	r24, 0x15	; 21
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN3led8led_initEv>
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	81 e4       	ldi	r24, 0x41	; 65
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Timerr11setTimerNumEi>
     166:	81 e4       	ldi	r24, 0x41	; 65
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN6Timerr19setCompareInterruptEv>
     16e:	68 ec       	ldi	r22, 0xC8	; 200
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	81 e4       	ldi	r24, 0x41	; 65
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN6Timerr16startCustomTimerEi>
     17a:	24 e0       	ldi	r18, 0x04	; 4
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	44 e0       	ldi	r20, 0x04	; 4
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	8c e1       	ldi	r24, 0x1C	; 28
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7max721911MAX7219_setEiii>
     18e:	8f e3       	ldi	r24, 0x3F	; 63
     190:	9c e9       	ldi	r25, 0x9C	; 156
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <_Z12init_devicesv+0x4a>
     196:	00 c0       	rjmp	.+0      	; 0x198 <_Z12init_devicesv+0x50>
     198:	00 00       	nop
     19a:	24 e0       	ldi	r18, 0x04	; 4
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	44 e0       	ldi	r20, 0x04	; 4
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	86 e1       	ldi	r24, 0x16	; 22
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7max721911MAX7219_setEiii>
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9c e9       	ldi	r25, 0x9C	; 156
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_Z12init_devicesv+0x6a>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z12init_devicesv+0x70>
     1b8:	00 00       	nop
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8c e1       	ldi	r24, 0x1C	; 28
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7max721912MAX7219_initEc>
     1c4:	8f e3       	ldi	r24, 0x3F	; 63
     1c6:	9c e9       	ldi	r25, 0x9C	; 156
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z12init_devicesv+0x80>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z12init_devicesv+0x86>
     1ce:	00 00       	nop
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	86 e1       	ldi	r24, 0x16	; 22
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7max721912MAX7219_initEc>
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	9c e9       	ldi	r25, 0x9C	; 156
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <_Z12init_devicesv+0x96>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_Z12init_devicesv+0x9c>
     1e4:	00 00       	nop
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	8c e1       	ldi	r24, 0x1C	; 28
     1ea:	92 e0       	ldi	r25, 0x02	; 2
     1ec:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7max721912MAX7219_initEc>
     1f0:	8f e3       	ldi	r24, 0x3F	; 63
     1f2:	9c e9       	ldi	r25, 0x9C	; 156
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z12init_devicesv+0xac>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z12init_devicesv+0xb2>
     1fa:	00 00       	nop
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	86 e1       	ldi	r24, 0x16	; 22
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7max721912MAX7219_initEc>
     206:	8f e3       	ldi	r24, 0x3F	; 63
     208:	9c e9       	ldi	r25, 0x9C	; 156
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_Z12init_devicesv+0xc2>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z12init_devicesv+0xc8>
     210:	00 00       	nop
     212:	8c e1       	ldi	r24, 0x1C	; 28
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
     21a:	9f ef       	ldi	r25, 0xFF	; 255
     21c:	26 e7       	ldi	r18, 0x76	; 118
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	91 50       	subi	r25, 0x01	; 1
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	e1 f7       	brne	.-8      	; 0x220 <_Z12init_devicesv+0xd8>
     228:	00 c0       	rjmp	.+0      	; 0x22a <_Z12init_devicesv+0xe2>
     22a:	00 00       	nop
     22c:	86 e1       	ldi	r24, 0x16	; 22
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	26 e7       	ldi	r18, 0x76	; 118
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	91 50       	subi	r25, 0x01	; 1
     23c:	20 40       	sbci	r18, 0x00	; 0
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	e1 f7       	brne	.-8      	; 0x23a <_Z12init_devicesv+0xf2>
     242:	00 c0       	rjmp	.+0      	; 0x244 <_Z12init_devicesv+0xfc>
     244:	00 00       	nop
     246:	08 95       	ret

00000248 <__vector_17>:
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	2f 93       	push	r18
     254:	3f 93       	push	r19
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     25e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     262:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <spiTimerCheck>
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <spiTimerCheck>
     26c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <startMonitor>
     270:	88 23       	and	r24, r24
     272:	49 f0       	breq	.+18     	; 0x286 <__vector_17+0x3e>
     274:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <second>
     278:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <second+0x1>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <second+0x1>
     282:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <second>
     286:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <display_count>
     28a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <display_count+0x1>
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <display_count+0x1>
     294:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <display_count>
     298:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <display_count>
     29c:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <display_count+0x1>
     2a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     2a4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	3c f0       	brlt	.+14     	; 0x2bc <__vector_17+0x74>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <displayUpdate>
     2b4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <display_count+0x1>
     2b8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <display_count>
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <_Z13sendToDisplayfff>:
     2ce:	4f 92       	push	r4
     2d0:	5f 92       	push	r5
     2d2:	6f 92       	push	r6
     2d4:	7f 92       	push	r7
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	2b 01       	movw	r4, r22
     2f0:	3c 01       	movw	r6, r24
     2f2:	49 01       	movw	r8, r18
     2f4:	5a 01       	movw	r10, r20
     2f6:	67 01       	movw	r12, r14
     2f8:	78 01       	movw	r14, r16
     2fa:	43 ef       	ldi	r20, 0xF3	; 243
     2fc:	69 e0       	ldi	r22, 0x09	; 9
     2fe:	8c e1       	ldi	r24, 0x1C	; 28
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	63 e0       	ldi	r22, 0x03	; 3
     30a:	8c e1       	ldi	r24, 0x1C	; 28
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	c3 01       	movw	r24, r6
     31c:	b2 01       	movw	r22, r4
     31e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     322:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     326:	46 2f       	mov	r20, r22
     328:	68 e0       	ldi	r22, 0x08	; 8
     32a:	8c e1       	ldi	r24, 0x1C	; 28
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     332:	c3 01       	movw	r24, r6
     334:	b2 01       	movw	r22, r4
     336:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     33a:	ca e0       	ldi	r28, 0x0A	; 10
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
     340:	be 01       	movw	r22, r28
     342:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     346:	48 2f       	mov	r20, r24
     348:	40 68       	ori	r20, 0x80	; 128
     34a:	66 e0       	ldi	r22, 0x06	; 6
     34c:	8c e1       	ldi	r24, 0x1C	; 28
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 e2       	ldi	r20, 0x20	; 32
     35a:	51 e4       	ldi	r21, 0x41	; 65
     35c:	c3 01       	movw	r24, r6
     35e:	b2 01       	movw	r22, r4
     360:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__mulsf3>
     364:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     368:	cb 01       	movw	r24, r22
     36a:	be 01       	movw	r22, r28
     36c:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     370:	48 2f       	mov	r20, r24
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	8c e1       	ldi	r24, 0x1C	; 28
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	64 e0       	ldi	r22, 0x04	; 4
     380:	8c e1       	ldi	r24, 0x1C	; 28
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e2       	ldi	r20, 0x20	; 32
     38e:	51 e4       	ldi	r21, 0x41	; 65
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     398:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     39c:	46 2f       	mov	r20, r22
     39e:	67 e0       	ldi	r22, 0x07	; 7
     3a0:	8c e1       	ldi	r24, 0x1C	; 28
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     3b0:	cb 01       	movw	r24, r22
     3b2:	be 01       	movw	r22, r28
     3b4:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     3b8:	48 2f       	mov	r20, r24
     3ba:	40 68       	ori	r20, 0x80	; 128
     3bc:	65 e0       	ldi	r22, 0x05	; 5
     3be:	8c e1       	ldi	r24, 0x1C	; 28
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e2       	ldi	r20, 0x20	; 32
     3cc:	51 e4       	ldi	r21, 0x41	; 65
     3ce:	c5 01       	movw	r24, r10
     3d0:	b4 01       	movw	r22, r8
     3d2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__mulsf3>
     3d6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     3da:	cb 01       	movw	r24, r22
     3dc:	be 01       	movw	r22, r28
     3de:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     3e2:	48 2f       	mov	r20, r24
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	8c e1       	ldi	r24, 0x1C	; 28
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     3ee:	42 ea       	ldi	r20, 0xA2	; 162
     3f0:	69 e0       	ldi	r22, 0x09	; 9
     3f2:	86 e1       	ldi	r24, 0x16	; 22
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	86 e1       	ldi	r24, 0x16	; 22
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e2       	ldi	r20, 0x20	; 32
     40c:	51 e4       	ldi	r21, 0x41	; 65
     40e:	c7 01       	movw	r24, r14
     410:	b6 01       	movw	r22, r12
     412:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     416:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     41a:	46 2f       	mov	r20, r22
     41c:	66 e0       	ldi	r22, 0x06	; 6
     41e:	86 e1       	ldi	r24, 0x16	; 22
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     42e:	cb 01       	movw	r24, r22
     430:	be 01       	movw	r22, r28
     432:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     436:	48 2f       	mov	r20, r24
     438:	40 68       	ori	r20, 0x80	; 128
     43a:	68 e0       	ldi	r22, 0x08	; 8
     43c:	86 e1       	ldi	r24, 0x16	; 22
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e2       	ldi	r20, 0x20	; 32
     44a:	51 e4       	ldi	r21, 0x41	; 65
     44c:	c7 01       	movw	r24, r14
     44e:	b6 01       	movw	r22, r12
     450:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__mulsf3>
     454:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     458:	cb 01       	movw	r24, r22
     45a:	be 01       	movw	r22, r28
     45c:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     460:	48 2f       	mov	r20, r24
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	86 e1       	ldi	r24, 0x16	; 22
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	9f 90       	pop	r9
     482:	8f 90       	pop	r8
     484:	7f 90       	pop	r7
     486:	6f 90       	pop	r6
     488:	5f 90       	pop	r5
     48a:	4f 90       	pop	r4
     48c:	08 95       	ret

0000048e <_Z16checkTemperaturev>:
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     49a:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     49e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     4a2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     4a6:	26 e6       	ldi	r18, 0x66	; 102
     4a8:	36 e6       	ldi	r19, 0x66	; 102
     4aa:	45 e1       	ldi	r20, 0x15	; 21
     4ac:	52 e4       	ldi	r21, 0x42	; 66
     4ae:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	74 f4       	brge	.+28     	; 0x4d2 <_Z16checkTemperaturev+0x44>
     4b6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <high_temperature>
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	85 e1       	ldi	r24, 0x15	; 21
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3led6led_doEii>
     4d0:	58 c0       	rjmp	.+176    	; 0x582 <_Z16checkTemperaturev+0xf4>
     4d2:	c0 90 2c 02 	lds	r12, 0x022C	; 0x80022c <skin_temperature>
     4d6:	d0 90 2d 02 	lds	r13, 0x022D	; 0x80022d <skin_temperature+0x1>
     4da:	e0 90 2e 02 	lds	r14, 0x022E	; 0x80022e <skin_temperature+0x2>
     4de:	f0 90 2f 02 	lds	r15, 0x022F	; 0x80022f <skin_temperature+0x3>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5f e3       	ldi	r21, 0x3F	; 63
     4ea:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <set_temperature>
     4ee:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <set_temperature+0x1>
     4f2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <set_temperature+0x2>
     4f6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <set_temperature+0x3>
     4fa:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__subsf3>
     4fe:	a7 01       	movw	r20, r14
     500:	96 01       	movw	r18, r12
     502:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     506:	18 16       	cp	r1, r24
     508:	34 f4       	brge	.+12     	; 0x516 <_Z16checkTemperaturev+0x88>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <low_temperature>
     510:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     514:	36 c0       	rjmp	.+108    	; 0x582 <_Z16checkTemperaturev+0xf4>
     516:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     51a:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     51e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     522:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4c e1       	ldi	r20, 0x1C	; 28
     52c:	52 e4       	ldi	r21, 0x42	; 66
     52e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     532:	18 16       	cp	r1, r24
     534:	84 f4       	brge	.+32     	; 0x556 <_Z16checkTemperaturev+0xc8>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <air_high_temperature>
     53c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     540:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	85 e1       	ldi	r24, 0x15	; 21
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3led6led_doEii>
     554:	16 c0       	rjmp	.+44     	; 0x582 <_Z16checkTemperaturev+0xf4>
     556:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <air_high_temperature>
     55a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <high_temperature>
     55e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <low_temperature>
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	85 e1       	ldi	r24, 0x15	; 21
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3led6led_doEii>
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	85 e1       	ldi	r24, 0x15	; 21
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN3led6led_doEii>
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	08 95       	ret

0000058c <_Z18sendToDisplayBelowf>:
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	6b 01       	movw	r12, r22
     59a:	7c 01       	movw	r14, r24
     59c:	42 ea       	ldi	r20, 0xA2	; 162
     59e:	69 e0       	ldi	r22, 0x09	; 9
     5a0:	86 e1       	ldi	r24, 0x16	; 22
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	64 e0       	ldi	r22, 0x04	; 4
     5ac:	86 e1       	ldi	r24, 0x16	; 22
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e2       	ldi	r20, 0x20	; 32
     5ba:	51 e4       	ldi	r21, 0x41	; 65
     5bc:	c7 01       	movw	r24, r14
     5be:	b6 01       	movw	r22, r12
     5c0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     5c4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     5c8:	46 2f       	mov	r20, r22
     5ca:	66 e0       	ldi	r22, 0x06	; 6
     5cc:	86 e1       	ldi	r24, 0x16	; 22
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     5dc:	ca e0       	ldi	r28, 0x0A	; 10
     5de:	d0 e0       	ldi	r29, 0x00	; 0
     5e0:	cb 01       	movw	r24, r22
     5e2:	be 01       	movw	r22, r28
     5e4:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     5e8:	48 2f       	mov	r20, r24
     5ea:	40 68       	ori	r20, 0x80	; 128
     5ec:	68 e0       	ldi	r22, 0x08	; 8
     5ee:	86 e1       	ldi	r24, 0x16	; 22
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e2       	ldi	r20, 0x20	; 32
     5fc:	51 e4       	ldi	r21, 0x41	; 65
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__mulsf3>
     606:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fixsfsi>
     60a:	cb 01       	movw	r24, r22
     60c:	be 01       	movw	r22, r28
     60e:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     612:	48 2f       	mov	r20, r24
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	08 95       	ret

0000062c <_Z15displaySensFailv>:
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	69 e0       	ldi	r22, 0x09	; 9
     630:	8c e1       	ldi	r24, 0x1C	; 28
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     638:	4b e5       	ldi	r20, 0x5B	; 91
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	8c e1       	ldi	r24, 0x1C	; 28
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     644:	4f e4       	ldi	r20, 0x4F	; 79
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	8c e1       	ldi	r24, 0x1C	; 28
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     650:	45 e1       	ldi	r20, 0x15	; 21
     652:	65 e0       	ldi	r22, 0x05	; 5
     654:	8c e1       	ldi	r24, 0x1C	; 28
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     65c:	4b e5       	ldi	r20, 0x5B	; 91
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	8c e1       	ldi	r24, 0x1C	; 28
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     668:	47 e4       	ldi	r20, 0x47	; 71
     66a:	64 e0       	ldi	r22, 0x04	; 4
     66c:	8c e1       	ldi	r24, 0x1C	; 28
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     674:	47 e7       	ldi	r20, 0x77	; 119
     676:	68 e0       	ldi	r22, 0x08	; 8
     678:	8c e1       	ldi	r24, 0x1C	; 28
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     680:	46 e0       	ldi	r20, 0x06	; 6
     682:	66 e0       	ldi	r22, 0x06	; 6
     684:	8c e1       	ldi	r24, 0x1C	; 28
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     68c:	4e e0       	ldi	r20, 0x0E	; 14
     68e:	62 e0       	ldi	r22, 0x02	; 2
     690:	8c e1       	ldi	r24, 0x1C	; 28
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	65 e0       	ldi	r22, 0x05	; 5
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	85 e1       	ldi	r24, 0x15	; 21
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	7f c7       	rjmp	.+3838   	; 0x15a4 <_ZN3led6led_doEii>
     6a6:	08 95       	ret

000006a8 <_Z21displaySetTemperaturev>:
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	69 e0       	ldi	r22, 0x09	; 9
     6ac:	8c e1       	ldi	r24, 0x1C	; 28
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	63 e0       	ldi	r22, 0x03	; 3
     6b8:	8c e1       	ldi	r24, 0x1C	; 28
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6c0:	4b e5       	ldi	r20, 0x5B	; 91
     6c2:	67 e0       	ldi	r22, 0x07	; 7
     6c4:	8c e1       	ldi	r24, 0x1C	; 28
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6cc:	4f e4       	ldi	r20, 0x4F	; 79
     6ce:	65 e0       	ldi	r22, 0x05	; 5
     6d0:	8c e1       	ldi	r24, 0x1C	; 28
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6d8:	4f e0       	ldi	r20, 0x0F	; 15
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	8c e1       	ldi	r24, 0x1C	; 28
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6e4:	4f e0       	ldi	r20, 0x0F	; 15
     6e6:	64 e0       	ldi	r22, 0x04	; 4
     6e8:	8c e1       	ldi	r24, 0x1C	; 28
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6f0:	47 e6       	ldi	r20, 0x67	; 103
     6f2:	68 e0       	ldi	r22, 0x08	; 8
     6f4:	8c e1       	ldi	r24, 0x1C	; 28
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	66 e0       	ldi	r22, 0x06	; 6
     700:	8c e1       	ldi	r24, 0x1C	; 28
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	8c e1       	ldi	r24, 0x1C	; 28
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     714:	08 95       	ret

00000716 <_Z14displayPreHeatv>:
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	69 e0       	ldi	r22, 0x09	; 9
     71a:	8c e1       	ldi	r24, 0x1C	; 28
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	63 e0       	ldi	r22, 0x03	; 3
     726:	8c e1       	ldi	r24, 0x1C	; 28
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     72e:	47 e6       	ldi	r20, 0x67	; 103
     730:	67 e0       	ldi	r22, 0x07	; 7
     732:	8c e1       	ldi	r24, 0x1C	; 28
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     73a:	46 e4       	ldi	r20, 0x46	; 70
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	8c e1       	ldi	r24, 0x1C	; 28
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     746:	4f e6       	ldi	r20, 0x6F	; 111
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	8c e1       	ldi	r24, 0x1C	; 28
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     752:	47 e3       	ldi	r20, 0x37	; 55
     754:	64 e0       	ldi	r22, 0x04	; 4
     756:	8c e1       	ldi	r24, 0x1C	; 28
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     75e:	4f e6       	ldi	r20, 0x6F	; 111
     760:	68 e0       	ldi	r22, 0x08	; 8
     762:	8c e1       	ldi	r24, 0x1C	; 28
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     76a:	4d e7       	ldi	r20, 0x7D	; 125
     76c:	66 e0       	ldi	r22, 0x06	; 6
     76e:	8c e1       	ldi	r24, 0x1C	; 28
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     776:	4f e0       	ldi	r20, 0x0F	; 15
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	8c e1       	ldi	r24, 0x1C	; 28
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	85 e1       	ldi	r24, 0x15	; 21
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0a c7       	rjmp	.+3604   	; 0x15a4 <_ZN3led6led_doEii>
     790:	08 95       	ret

00000792 <_Z15displayHighTempv>:
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	69 e0       	ldi	r22, 0x09	; 9
     796:	8c e1       	ldi	r24, 0x1C	; 28
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     79e:	47 e3       	ldi	r20, 0x37	; 55
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	8c e1       	ldi	r24, 0x1C	; 28
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7aa:	46 e0       	ldi	r20, 0x06	; 6
     7ac:	67 e0       	ldi	r22, 0x07	; 7
     7ae:	8c e1       	ldi	r24, 0x1C	; 28
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7b6:	4f e5       	ldi	r20, 0x5F	; 95
     7b8:	65 e0       	ldi	r22, 0x05	; 5
     7ba:	8c e1       	ldi	r24, 0x1C	; 28
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7c2:	47 e3       	ldi	r20, 0x37	; 55
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	8c e1       	ldi	r24, 0x1C	; 28
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7ce:	4f e0       	ldi	r20, 0x0F	; 15
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	8c e1       	ldi	r24, 0x1C	; 28
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7da:	47 e6       	ldi	r20, 0x67	; 103
     7dc:	68 e0       	ldi	r22, 0x08	; 8
     7de:	8c e1       	ldi	r24, 0x1C	; 28
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	66 e0       	ldi	r22, 0x06	; 6
     7ea:	8c e1       	ldi	r24, 0x1C	; 28
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	8c e1       	ldi	r24, 0x1C	; 28
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     7fe:	08 95       	ret

00000800 <_Z14displayLowTempv>:
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	69 e0       	ldi	r22, 0x09	; 9
     804:	8c e1       	ldi	r24, 0x1C	; 28
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	63 e0       	ldi	r22, 0x03	; 3
     810:	8c e1       	ldi	r24, 0x1C	; 28
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	67 e0       	ldi	r22, 0x07	; 7
     81c:	8c e1       	ldi	r24, 0x1C	; 28
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     824:	4e e0       	ldi	r20, 0x0E	; 14
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	8c e1       	ldi	r24, 0x1C	; 28
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     830:	4e ef       	ldi	r20, 0xFE	; 254
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	8c e1       	ldi	r24, 0x1C	; 28
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     83c:	4f e0       	ldi	r20, 0x0F	; 15
     83e:	64 e0       	ldi	r22, 0x04	; 4
     840:	8c e1       	ldi	r24, 0x1C	; 28
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     848:	47 e6       	ldi	r20, 0x67	; 103
     84a:	68 e0       	ldi	r22, 0x08	; 8
     84c:	8c e1       	ldi	r24, 0x1C	; 28
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	66 e0       	ldi	r22, 0x06	; 6
     858:	8c e1       	ldi	r24, 0x1C	; 28
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	8c e1       	ldi	r24, 0x1C	; 28
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     86c:	08 95       	ret

0000086e <_Z14displayHighAirv>:
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	69 e0       	ldi	r22, 0x09	; 9
     872:	8c e1       	ldi	r24, 0x1C	; 28
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     87a:	47 e3       	ldi	r20, 0x37	; 55
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	8c e1       	ldi	r24, 0x1C	; 28
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     886:	46 e0       	ldi	r20, 0x06	; 6
     888:	67 e0       	ldi	r22, 0x07	; 7
     88a:	8c e1       	ldi	r24, 0x1C	; 28
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     892:	4f e5       	ldi	r20, 0x5F	; 95
     894:	65 e0       	ldi	r22, 0x05	; 5
     896:	8c e1       	ldi	r24, 0x1C	; 28
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     89e:	47 e3       	ldi	r20, 0x37	; 55
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	8c e1       	ldi	r24, 0x1C	; 28
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     8aa:	47 e7       	ldi	r20, 0x77	; 119
     8ac:	64 e0       	ldi	r22, 0x04	; 4
     8ae:	8c e1       	ldi	r24, 0x1C	; 28
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     8b6:	46 e0       	ldi	r20, 0x06	; 6
     8b8:	68 e0       	ldi	r22, 0x08	; 8
     8ba:	8c e1       	ldi	r24, 0x1C	; 28
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     8c2:	46 e4       	ldi	r20, 0x46	; 70
     8c4:	66 e0       	ldi	r22, 0x06	; 6
     8c6:	8c e1       	ldi	r24, 0x1C	; 28
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	62 e0       	ldi	r22, 0x02	; 2
     8d2:	8c e1       	ldi	r24, 0x1C	; 28
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     8da:	08 95       	ret

000008dc <_Z23displayOnTempOutOfRangefff>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <high_temperature>
     8e8:	ee 23       	and	r30, r30
     8ea:	41 f0       	breq	.+16     	; 0x8fc <_Z23displayOnTempOutOfRangefff+0x20>
     8ec:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <displayOnTempOutOfRangeFlag>
     8f0:	ee 23       	and	r30, r30
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <_Z23displayOnTempOutOfRangefff+0x1c>
     8f4:	4e df       	rcall	.-356    	; 0x792 <_Z15displayHighTempv>
     8f6:	19 c0       	rjmp	.+50     	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     8f8:	ea dc       	rcall	.-1580   	; 0x2ce <_Z13sendToDisplayfff>
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     8fc:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <low_temperature>
     900:	ee 23       	and	r30, r30
     902:	41 f0       	breq	.+16     	; 0x914 <_Z23displayOnTempOutOfRangefff+0x38>
     904:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <displayOnTempOutOfRangeFlag>
     908:	ee 23       	and	r30, r30
     90a:	11 f0       	breq	.+4      	; 0x910 <_Z23displayOnTempOutOfRangefff+0x34>
     90c:	79 df       	rcall	.-270    	; 0x800 <_Z14displayLowTempv>
     90e:	0d c0       	rjmp	.+26     	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     910:	de dc       	rcall	.-1604   	; 0x2ce <_Z13sendToDisplayfff>
     912:	0b c0       	rjmp	.+22     	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     914:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <air_high_temperature>
     918:	ee 23       	and	r30, r30
     91a:	39 f0       	breq	.+14     	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     91c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <displayOnTempOutOfRangeFlag>
     920:	ee 23       	and	r30, r30
     922:	11 f0       	breq	.+4      	; 0x928 <_Z23displayOnTempOutOfRangefff+0x4c>
     924:	a4 df       	rcall	.-184    	; 0x86e <_Z14displayHighAirv>
     926:	01 c0       	rjmp	.+2      	; 0x92a <_Z23displayOnTempOutOfRangefff+0x4e>
     928:	d2 dc       	rcall	.-1628   	; 0x2ce <_Z13sendToDisplayfff>
     92a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <displayOnTempOutOfRangeFlag>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	89 27       	eor	r24, r25
     932:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <displayOnTempOutOfRangeFlag>
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	08 95       	ret

00000940 <_Z11displayBABYv>:
     940:	4f e7       	ldi	r20, 0x7F	; 127
     942:	63 e0       	ldi	r22, 0x03	; 3
     944:	8c e1       	ldi	r24, 0x1C	; 28
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     94c:	47 e7       	ldi	r20, 0x77	; 119
     94e:	67 e0       	ldi	r22, 0x07	; 7
     950:	8c e1       	ldi	r24, 0x1C	; 28
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     958:	4f e7       	ldi	r20, 0x7F	; 127
     95a:	65 e0       	ldi	r22, 0x05	; 5
     95c:	8c e1       	ldi	r24, 0x1C	; 28
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     964:	4b e3       	ldi	r20, 0x3B	; 59
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	8c e1       	ldi	r24, 0x1C	; 28
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     970:	4f e7       	ldi	r20, 0x7F	; 127
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	8c e1       	ldi	r24, 0x1C	; 28
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     97c:	47 e7       	ldi	r20, 0x77	; 119
     97e:	68 e0       	ldi	r22, 0x08	; 8
     980:	8c e1       	ldi	r24, 0x1C	; 28
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     988:	4f e7       	ldi	r20, 0x7F	; 127
     98a:	66 e0       	ldi	r22, 0x06	; 6
     98c:	8c e1       	ldi	r24, 0x1C	; 28
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     994:	4b e3       	ldi	r20, 0x3B	; 59
     996:	62 e0       	ldi	r22, 0x02	; 2
     998:	8c e1       	ldi	r24, 0x1C	; 28
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9a0:	08 95       	ret

000009a2 <_Z15displayNANONANIv>:
     9a2:	45 e1       	ldi	r20, 0x15	; 21
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	8c e1       	ldi	r24, 0x1C	; 28
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9ae:	47 e7       	ldi	r20, 0x77	; 119
     9b0:	67 e0       	ldi	r22, 0x07	; 7
     9b2:	8c e1       	ldi	r24, 0x1C	; 28
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9ba:	45 e1       	ldi	r20, 0x15	; 21
     9bc:	65 e0       	ldi	r22, 0x05	; 5
     9be:	8c e1       	ldi	r24, 0x1C	; 28
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9c6:	4e e7       	ldi	r20, 0x7E	; 126
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8c e1       	ldi	r24, 0x1C	; 28
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9d2:	45 e1       	ldi	r20, 0x15	; 21
     9d4:	64 e0       	ldi	r22, 0x04	; 4
     9d6:	8c e1       	ldi	r24, 0x1C	; 28
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9de:	47 e7       	ldi	r20, 0x77	; 119
     9e0:	68 e0       	ldi	r22, 0x08	; 8
     9e2:	8c e1       	ldi	r24, 0x1C	; 28
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9ea:	45 e1       	ldi	r20, 0x15	; 21
     9ec:	66 e0       	ldi	r22, 0x06	; 6
     9ee:	8c e1       	ldi	r24, 0x1C	; 28
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     9f6:	46 e0       	ldi	r20, 0x06	; 6
     9f8:	62 e0       	ldi	r22, 0x02	; 2
     9fa:	8c e1       	ldi	r24, 0x1C	; 28
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a02:	08 95       	ret

00000a04 <_Z14displayPwrFailv>:
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	69 e0       	ldi	r22, 0x09	; 9
     a08:	8c e1       	ldi	r24, 0x1C	; 28
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	63 e0       	ldi	r22, 0x03	; 3
     a14:	8c e1       	ldi	r24, 0x1C	; 28
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	67 e0       	ldi	r22, 0x07	; 7
     a20:	8c e1       	ldi	r24, 0x1C	; 28
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a28:	47 e6       	ldi	r20, 0x67	; 103
     a2a:	65 e0       	ldi	r22, 0x05	; 5
     a2c:	8c e1       	ldi	r24, 0x1C	; 28
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a34:	46 e4       	ldi	r20, 0x46	; 70
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	8c e1       	ldi	r24, 0x1C	; 28
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a40:	47 e4       	ldi	r20, 0x47	; 71
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	8c e1       	ldi	r24, 0x1C	; 28
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a4c:	47 e7       	ldi	r20, 0x77	; 119
     a4e:	68 e0       	ldi	r22, 0x08	; 8
     a50:	8c e1       	ldi	r24, 0x1C	; 28
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a58:	46 e0       	ldi	r20, 0x06	; 6
     a5a:	66 e0       	ldi	r22, 0x06	; 6
     a5c:	8c e1       	ldi	r24, 0x1C	; 28
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a64:	4e e0       	ldi	r20, 0x0E	; 14
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	8c e1       	ldi	r24, 0x1C	; 28
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	85 e1       	ldi	r24, 0x15	; 21
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	93 d5       	rcall	.+2854   	; 0x15a4 <_ZN3led6led_doEii>
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	65 e0       	ldi	r22, 0x05	; 5
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	85 e1       	ldi	r24, 0x15	; 21
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	8c d5       	rcall	.+2840   	; 0x15a4 <_ZN3led6led_doEii>
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	85 e1       	ldi	r24, 0x15	; 21
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	85 c5       	rjmp	.+2826   	; 0x15a4 <_ZN3led6led_doEii>
     a9a:	08 95       	ret

00000a9c <_Z8titititiv>:
}

void titititi(){
	controls.startBuzzer();
     a9c:	8c e3       	ldi	r24, 0x3C	; 60
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	62 d5       	rcall	.+2756   	; 0x1566 <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	81 ee       	ldi	r24, 0xE1	; 225
     aa6:	94 e0       	ldi	r25, 0x04	; 4
     aa8:	21 50       	subi	r18, 0x01	; 1
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <_Z8titititiv+0xc>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <_Z8titititiv+0x16>
     ab2:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     ab4:	8c e3       	ldi	r24, 0x3C	; 60
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	5c d5       	rcall	.+2744   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     aba:	2f ef       	ldi	r18, 0xFF	; 255
     abc:	81 ee       	ldi	r24, 0xE1	; 225
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <_Z8titititiv+0x24>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <_Z8titititiv+0x2e>
     aca:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     acc:	8c e3       	ldi	r24, 0x3C	; 60
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	4a d5       	rcall	.+2708   	; 0x1566 <_ZN8Controls11startBuzzerEv>
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	81 ee       	ldi	r24, 0xE1	; 225
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	90 40       	sbci	r25, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <_Z8titititiv+0x3c>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <_Z8titititiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     ae2:	00 00       	nop
     ae4:	8c e3       	ldi	r24, 0x3C	; 60
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	44 d5       	rcall	.+2696   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	85 ea       	ldi	r24, 0xA5	; 165
     aee:	9e e0       	ldi	r25, 0x0E	; 14
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	80 40       	sbci	r24, 0x00	; 0
     af4:	90 40       	sbci	r25, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <_Z8titititiv+0x54>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <_Z8titititiv+0x5e>
	_delay_ms(300);
	controls.startBuzzer();
     afa:	00 00       	nop
     afc:	8c e3       	ldi	r24, 0x3C	; 60
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	32 d5       	rcall	.+2660   	; 0x1566 <_ZN8Controls11startBuzzerEv>
     b02:	2f ef       	ldi	r18, 0xFF	; 255
     b04:	81 ee       	ldi	r24, 0xE1	; 225
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	21 50       	subi	r18, 0x01	; 1
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	90 40       	sbci	r25, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <_Z8titititiv+0x6c>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <_Z8titititiv+0x76>
	_delay_ms(100);
	controls.stopBuzzer();
     b12:	00 00       	nop
     b14:	8c e3       	ldi	r24, 0x3C	; 60
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	2c d5       	rcall	.+2648   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	81 ee       	ldi	r24, 0xE1	; 225
     b1e:	94 e0       	ldi	r25, 0x04	; 4
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <_Z8titititiv+0x84>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <_Z8titititiv+0x8e>
	_delay_ms(100);
	controls.startBuzzer();
     b2a:	00 00       	nop
     b2c:	8c e3       	ldi	r24, 0x3C	; 60
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	1a d5       	rcall	.+2612   	; 0x1566 <_ZN8Controls11startBuzzerEv>
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	81 ee       	ldi	r24, 0xE1	; 225
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	80 40       	sbci	r24, 0x00	; 0
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <_Z8titititiv+0x9c>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <_Z8titititiv+0xa6>
	_delay_ms(100);
	controls.stopBuzzer();
     b42:	00 00       	nop
     b44:	8c e3       	ldi	r24, 0x3C	; 60
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	14 c5       	rjmp	.+2600   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     b4a:	08 95       	ret

00000b4c <_Z4titiv>:
}

void titi(){
	controls.startBuzzer();
     b4c:	8c e3       	ldi	r24, 0x3C	; 60
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	0a d5       	rcall	.+2580   	; 0x1566 <_ZN8Controls11startBuzzerEv>
     b52:	2f ef       	ldi	r18, 0xFF	; 255
     b54:	81 ee       	ldi	r24, 0xE1	; 225
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	21 50       	subi	r18, 0x01	; 1
     b5a:	80 40       	sbci	r24, 0x00	; 0
     b5c:	90 40       	sbci	r25, 0x00	; 0
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <_Z4titiv+0xc>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <_Z4titiv+0x16>
     b62:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     b64:	8c e3       	ldi	r24, 0x3C	; 60
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	04 d5       	rcall	.+2568   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     b6a:	2f ef       	ldi	r18, 0xFF	; 255
     b6c:	81 ee       	ldi	r24, 0xE1	; 225
     b6e:	94 e0       	ldi	r25, 0x04	; 4
     b70:	21 50       	subi	r18, 0x01	; 1
     b72:	80 40       	sbci	r24, 0x00	; 0
     b74:	90 40       	sbci	r25, 0x00	; 0
     b76:	e1 f7       	brne	.-8      	; 0xb70 <_Z4titiv+0x24>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <_Z4titiv+0x2e>
     b7a:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     b7c:	8c e3       	ldi	r24, 0x3C	; 60
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	f2 d4       	rcall	.+2532   	; 0x1566 <_ZN8Controls11startBuzzerEv>
     b82:	2f ef       	ldi	r18, 0xFF	; 255
     b84:	81 ee       	ldi	r24, 0xE1	; 225
     b86:	94 e0       	ldi	r25, 0x04	; 4
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	80 40       	sbci	r24, 0x00	; 0
     b8c:	90 40       	sbci	r25, 0x00	; 0
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <_Z4titiv+0x3c>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <_Z4titiv+0x46>
	_delay_ms(100);
	controls.stopBuzzer();
     b92:	00 00       	nop
     b94:	8c e3       	ldi	r24, 0x3C	; 60
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	ec d4       	rcall	.+2520   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	81 ee       	ldi	r24, 0xE1	; 225
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	80 40       	sbci	r24, 0x00	; 0
     ba4:	90 40       	sbci	r25, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <_Z4titiv+0x54>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <_Z4titiv+0x5e>
     baa:	00 00       	nop
     bac:	08 95       	ret

00000bae <_Z5checkv>:
		displayUpdate = true;
		display_count = 0;
	}
}

void check() {
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
	
	
	if((skin_temperature > 37.2) || (skin_temperature < (set_temperature - 1.0f)) || (air_temperature>39.00) ) {
     bba:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     bbe:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     bc2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     bc6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     bca:	2d ec       	ldi	r18, 0xCD	; 205
     bcc:	3c ec       	ldi	r19, 0xCC	; 204
     bce:	44 e1       	ldi	r20, 0x14	; 20
     bd0:	52 e4       	ldi	r21, 0x42	; 66
     bd2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	64 f1       	brlt	.+88     	; 0xc32 <_Z5checkv+0x84>
     bda:	c0 90 2c 02 	lds	r12, 0x022C	; 0x80022c <skin_temperature>
     bde:	d0 90 2d 02 	lds	r13, 0x022D	; 0x80022d <skin_temperature+0x1>
     be2:	e0 90 2e 02 	lds	r14, 0x022E	; 0x80022e <skin_temperature+0x2>
     be6:	f0 90 2f 02 	lds	r15, 0x022F	; 0x80022f <skin_temperature+0x3>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <set_temperature>
     bf6:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <set_temperature+0x1>
     bfa:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <set_temperature+0x2>
     bfe:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <set_temperature+0x3>
     c02:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__subsf3>
     c06:	a7 01       	movw	r20, r14
     c08:	96 01       	movw	r18, r12
     c0a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     c0e:	18 16       	cp	r1, r24
     c10:	84 f0       	brlt	.+32     	; 0xc32 <_Z5checkv+0x84>
     c12:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     c16:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     c1a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     c1e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	4c e1       	ldi	r20, 0x1C	; 28
     c28:	52 e4       	ldi	r21, 0x42	; 66
     c2a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     c2e:	18 16       	cp	r1, r24
     c30:	c4 f4       	brge	.+48     	; 0xc62 <_Z5checkv+0xb4>
		checkTemperature();
     c32:	2d dc       	rcall	.-1958   	; 0x48e <_Z16checkTemperaturev>
		if(!startMonitor) {
     c34:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <startMonitor>
     c38:	81 11       	cpse	r24, r1
     c3a:	25 c0       	rjmp	.+74     	; 0xc86 <_Z5checkv+0xd8>
			start_buzzer = true;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <start_buzzer>
		}
		
		if(stop_buzzer && !startMonitor) {
     c42:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <stop_buzzer>
     c46:	88 23       	and	r24, r24
     c48:	f1 f0       	breq	.+60     	; 0xc86 <_Z5checkv+0xd8>
			startMonitor = true;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <startMonitor>
			second = 0;
     c50:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <second+0x1>
     c54:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <second>
			stop_buzzer = false;
     c58:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <stop_buzzer>
			start_buzzer = false;
     c5c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <start_buzzer>
     c60:	12 c0       	rjmp	.+36     	; 0xc86 <_Z5checkv+0xd8>
		}
	}
	else {
		controls.stopBuzzer();
     c62:	8c e3       	ldi	r24, 0x3C	; 60
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	85 d4       	rcall	.+2314   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     c68:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <start_buzzer>
		Led.led_do(TS_HIGH_LED, 0);
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	85 e1       	ldi	r24, 0x15	; 21
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	95 d4       	rcall	.+2346   	; 0x15a4 <_ZN3led6led_doEii>
		startMonitor = false;
     c7a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <startMonitor>
		second = 0;
     c7e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <second+0x1>
     c82:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <second>
	}
	
	//***************************************************************************************************************//
	//******************************************************Check for skin sensor failure****************************//
	if(skin_temperature <= 0.0 || skin_temperature >= 50 )
     c86:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     c8a:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     c8e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     c92:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	a9 01       	movw	r20, r18
     c9c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__cmpsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	84 f4       	brge	.+32     	; 0xcc4 <_Z5checkv+0x116>
     ca4:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     ca8:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
     cac:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     cb0:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	48 e4       	ldi	r20, 0x48	; 72
     cba:	52 e4       	ldi	r21, 0x42	; 66
     cbc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     cc0:	88 23       	and	r24, r24
     cc2:	64 f1       	brlt	.+88     	; 0xd1c <_Z5checkv+0x16e>
	{
		if(displayUpdate)
     cc4:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
     cc8:	88 23       	and	r24, r24
     cca:	31 f1       	breq	.+76     	; 0xd18 <_Z5checkv+0x16a>
		{
			displayUpdate = false;
     ccc:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
			max1.MAX7219_init(REINITIALIZE);
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	8c e1       	ldi	r24, 0x1C	; 28
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	1f d7       	rcall	.+3646   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
			max2.MAX7219_init(REINITIALIZE);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	86 e1       	ldi	r24, 0x16	; 22
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	1b d7       	rcall	.+3638   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
			displaySensFail();
     ce0:	a5 dc       	rcall	.-1718   	; 0x62c <_Z15displaySensFailv>
     ce2:	61 e0       	ldi	r22, 0x01	; 1
			maxSkin.begin(SKIN_SENSOR);
     ce4:	80 e3       	ldi	r24, 0x30	; 48
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	b5 d5       	rcall	.+2922   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	10 e0       	ldi	r17, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0,430.0);
     cee:	27 ed       	ldi	r18, 0xD7	; 215
     cf0:	33 e4       	ldi	r19, 0x43	; 67
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	68 ec       	ldi	r22, 0xC8	; 200
     cf8:	72 e4       	ldi	r23, 0x42	; 66
     cfa:	80 e3       	ldi	r24, 0x30	; 48
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	eb d5       	rcall	.+3030   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
     d00:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
     d04:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
     d08:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
     d0c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Skin_Sensor_failure_FLAG>
			
			Skin_Sensor_failure_FLAG = true;
     d16:	04 c0       	rjmp	.+8      	; 0xd20 <_Z5checkv+0x172>
     d18:	00 00       	nop
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <_Z5checkv+0x172>
		}
		else
		{
			asm volatile ("nop");
     d1c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <Skin_Sensor_failure_FLAG>
		}
	}
	else
	{
		Skin_Sensor_failure_FLAG = false;
     d20:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
	}
	
	//************************************************************************************************************************//
	//************************************************* Check for Air Sensor failure******************************************//
	if(air_temperature <= 0.0 || air_temperature >= 50 )
     d24:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     d28:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     d2c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	a9 01       	movw	r20, r18
     d36:	ee d7       	rcall	.+4060   	; 0x1d14 <__cmpsf2>
     d38:	18 16       	cp	r1, r24
     d3a:	84 f4       	brge	.+32     	; 0xd5c <_Z5checkv+0x1ae>
     d3c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
     d40:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
     d44:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
     d48:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	48 e4       	ldi	r20, 0x48	; 72
     d52:	52 e4       	ldi	r21, 0x42	; 66
     d54:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     d58:	88 23       	and	r24, r24
     d5a:	64 f1       	brlt	.+88     	; 0xdb4 <_Z5checkv+0x206>
     d5c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
	{
		if(displayUpdate)
     d60:	88 23       	and	r24, r24
     d62:	31 f1       	breq	.+76     	; 0xdb0 <_Z5checkv+0x202>
     d64:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
		{
			displayUpdate = false;
			max1.MAX7219_init(REINITIALIZE);
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	8c e1       	ldi	r24, 0x1C	; 28
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	d3 d6       	rcall	.+3494   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
			max2.MAX7219_init(REINITIALIZE);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	86 e1       	ldi	r24, 0x16	; 22
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	cf d6       	rcall	.+3486   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
     d78:	59 dc       	rcall	.-1870   	; 0x62c <_Z15displaySensFailv>
			displaySensFail();
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	80 e3       	ldi	r24, 0x30	; 48
			maxSkin.begin(AIR_SENSOR);
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	69 d5       	rcall	.+2770   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
     d82:	00 e0       	ldi	r16, 0x00	; 0
     d84:	10 e0       	ldi	r17, 0x00	; 0
			air_temperature = maxAir.temperature(100.0,430.0);
     d86:	27 ed       	ldi	r18, 0xD7	; 215
     d88:	33 e4       	ldi	r19, 0x43	; 67
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	68 ec       	ldi	r22, 0xC8	; 200
     d90:	72 e4       	ldi	r23, 0x42	; 66
     d92:	85 e3       	ldi	r24, 0x35	; 53
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	9f d5       	rcall	.+2878   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
     d98:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
     d9c:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
     da0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
     da4:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <Air_Sensor_failure_FLAG>
			
			Air_Sensor_failure_FLAG = true;
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <_Z5checkv+0x20a>
     db0:	00 00       	nop
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <_Z5checkv+0x20a>
     db4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Air_Sensor_failure_FLAG>
		}
		else
		{
			asm volatile ("nop");
     db8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <baby_placed_and_setpoint_once_reached>
		}
	}
	else
	{
		Air_Sensor_failure_FLAG = false;
     dbc:	88 23       	and	r24, r24
	}
	
//*************************************************************************************************************************//
	//At first when the baby is just placed, alarm is continued every 5 minutes, but once baby set point temperature is reached, alarm is continued every 2 minutes
	if(baby_placed_and_setpoint_once_reached){
     dbe:	71 f0       	breq	.+28     	; 0xddc <_Z5checkv+0x22e>
     dc0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <second>
     dc4:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <second+0x1>
		if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
     dc8:	88 35       	cpi	r24, 0x58	; 88
     dca:	92 40       	sbci	r25, 0x02	; 2
     dcc:	5c f1       	brlt	.+86     	; 0xe24 <_Z5checkv+0x276>
     dce:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <startMonitor>
     dd2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <second+0x1>
			//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
			//controls.startBuzzer();
			startMonitor = false;
     dd6:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <second>
			second = 0;
     dda:	24 c0       	rjmp	.+72     	; 0xe24 <_Z5checkv+0x276>
     ddc:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <second>
     de0:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <second+0x1>
		}
	}
	else{
		if(second >= 1500) {	//timer prescaled to 200ms so 1500 means 5 minutes.
     de4:	8c 3d       	cpi	r24, 0xDC	; 220
     de6:	95 40       	sbci	r25, 0x05	; 5
     de8:	34 f0       	brlt	.+12     	; 0xdf6 <_Z5checkv+0x248>
     dea:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <startMonitor>
     dee:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <second+0x1>
			//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2
			//controls.startBuzzer();
			startMonitor = false;
     df2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <second>
			second = 0;
     df6:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
     dfa:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
		}
		if(skin_temperature >= set_temperature){
     dfe:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
     e02:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
     e06:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <set_temperature>
     e0a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <set_temperature+0x1>
     e0e:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <set_temperature+0x2>
     e12:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <set_temperature+0x3>
     e16:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     e1a:	88 23       	and	r24, r24
     e1c:	1c f0       	brlt	.+6      	; 0xe24 <_Z5checkv+0x276>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <baby_placed_and_setpoint_once_reached>
			baby_placed_and_setpoint_once_reached = true;
     e24:	65 99       	sbic	0x0c, 5	; 12
     e26:	a4 c0       	rjmp	.+328    	; 0xf70 <_Z5checkv+0x3c2>
     e28:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <buzzer_stop_pressed>
		}
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     e2c:	81 11       	cpse	r24, r1
     e2e:	a0 c0       	rjmp	.+320    	; 0xf70 <_Z5checkv+0x3c2>
     e30:	96 c0       	rjmp	.+300    	; 0xf5e <_Z5checkv+0x3b0>
     e32:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <buzzer_stop_pressed>
     e36:	1c 99       	sbic	0x03, 4	; 3
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     e38:	a3 c0       	rjmp	.+326    	; 0xf80 <_Z5checkv+0x3d2>
     e3a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <set_up_pressed>
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     e3e:	81 11       	cpse	r24, r1
     e40:	9f c0       	rjmp	.+318    	; 0xf80 <_Z5checkv+0x3d2>
     e42:	99 c0       	rjmp	.+306    	; 0xf76 <_Z5checkv+0x3c8>
     e44:	2d ec       	ldi	r18, 0xCD	; 205
     e46:	3c ec       	ldi	r19, 0xCC	; 204
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     e48:	4c ec       	ldi	r20, 0xCC	; 204
     e4a:	5d e3       	ldi	r21, 0x3D	; 61
     e4c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
     e50:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
     e54:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     e58:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     e5c:	f7 d6       	rcall	.+3566   	; 0x1c4c <__addsf3>
     e5e:	6b 01       	movw	r12, r22
     e60:	7c 01       	movw	r14, r24
     e62:	2d ec       	ldi	r18, 0xCD	; 205
     e64:	3c ec       	ldi	r19, 0xCC	; 204
     e66:	44 e1       	ldi	r20, 0x14	; 20
			if(set_temperature_copy >= 37.2){
     e68:	52 e4       	ldi	r21, 0x42	; 66
     e6a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__gesf2>
     e6e:	88 23       	and	r24, r24
     e70:	4c f4       	brge	.+18     	; 0xe84 <_Z5checkv+0x2d6>
     e72:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <set_temperature_copy>
     e76:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <set_temperature_copy+0x1>
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
			set_temperature_copy += 0.1f;
     e7a:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <set_temperature_copy+0x2>
     e7e:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <set_temperature_copy+0x3>
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <_Z5checkv+0x2ee>
     e84:	8d ec       	ldi	r24, 0xCD	; 205
     e86:	9c ec       	ldi	r25, 0xCC	; 204
     e88:	a4 e1       	ldi	r26, 0x14	; 20
			if(set_temperature_copy >= 37.2){
				set_temperature_copy = 37.2;
     e8a:	b2 e4       	ldi	r27, 0x42	; 66
     e8c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
     e90:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
     e94:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
     e98:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <set_up_pressed>
			}
		}
		set_up_pressed = true;
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <_Z5checkv+0x2fa>
     ea4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <set_up_pressed>
     ea8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     eac:	85 fd       	sbrc	r24, 5
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     eae:	6b c0       	rjmp	.+214    	; 0xf86 <_Z5checkv+0x3d8>
     eb0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <set_down_pressed>
     eb4:	81 11       	cpse	r24, r1
     eb6:	67 c0       	rjmp	.+206    	; 0xf86 <_Z5checkv+0x3d8>
     eb8:	6b c0       	rjmp	.+214    	; 0xf90 <_Z5checkv+0x3e2>
     eba:	2d ec       	ldi	r18, 0xCD	; 205
     ebc:	3c ec       	ldi	r19, 0xCC	; 204
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     ebe:	4c ec       	ldi	r20, 0xCC	; 204
     ec0:	5d e3       	ldi	r21, 0x3D	; 61
     ec2:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
     ec6:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
     eca:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     ece:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     ed2:	bb d6       	rcall	.+3446   	; 0x1c4a <__subsf3>
     ed4:	6b 01       	movw	r12, r22
     ed6:	7c 01       	movw	r14, r24
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
			//limit set temperature below range
			if(set_temperature_copy <= 32.00){
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	52 e4       	ldi	r21, 0x42	; 66
     ee0:	19 d7       	rcall	.+3634   	; 0x1d14 <__cmpsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	4c f4       	brge	.+18     	; 0xef8 <_Z5checkv+0x34a>
     ee6:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <set_temperature_copy>
     eea:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <set_temperature_copy+0x1>
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
			set_temperature_copy -= 0.1f;
     eee:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <set_temperature_copy+0x2>
     ef2:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <set_temperature_copy+0x3>
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <_Z5checkv+0x362>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	a0 e0       	ldi	r26, 0x00	; 0
			//limit set temperature below range
			if(set_temperature_copy <= 32.00){
				set_temperature_copy = 32.00;
     efe:	b2 e4       	ldi	r27, 0x42	; 66
     f00:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
     f04:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
     f08:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
     f0c:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <set_down_pressed>
			}
		}
		
		set_down_pressed= true;
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <_Z5checkv+0x36e>
     f18:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <set_down_pressed>
     f1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     f20:	86 fd       	sbrc	r24, 6
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     f22:	44 c0       	rjmp	.+136    	; 0xfac <_Z5checkv+0x3fe>
     f24:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <set_pressed>
     f28:	81 11       	cpse	r24, r1
     f2a:	40 c0       	rjmp	.+128    	; 0xfac <_Z5checkv+0x3fe>
     f2c:	36 c0       	rjmp	.+108    	; 0xf9a <_Z5checkv+0x3ec>
     f2e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <set_temperature_copy>
     f32:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <set_temperature_copy+0x1>
		button_change = !button_change;
		if(!button_change) {
			set_temperature = set_temperature_copy;
     f36:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <set_temperature_copy+0x2>
     f3a:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <set_temperature_copy+0x3>
     f3e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <set_temperature>
     f42:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <set_temperature+0x1>
     f46:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <set_temperature+0x2>
     f4a:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <set_temperature+0x3>
     f4e:	fe dd       	rcall	.-1028   	; 0xb4c <_Z4titiv>
			titi();
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <set_pressed>
		}
		
		set_pressed = true;
     f56:	2e c0       	rjmp	.+92     	; 0xfb4 <_Z5checkv+0x406>
     f58:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <set_pressed>
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     f5c:	2b c0       	rjmp	.+86     	; 0xfb4 <_Z5checkv+0x406>
     f5e:	8c e3       	ldi	r24, 0x3C	; 60
	}
	
}
     f60:	92 e0       	ldi	r25, 0x02	; 2
		}
	}
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		controls.stopBuzzer();
     f62:	07 d3       	rcall	.+1550   	; 0x1572 <_ZN8Controls10stopBuzzerEv>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <stop_buzzer>
		stop_buzzer = true;
     f6a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <buzzer_stop_pressed>
     f6e:	63 cf       	rjmp	.-314    	; 0xe36 <_Z5checkv+0x288>
		buzzer_stop_pressed = true;
     f70:	65 99       	sbic	0x0c, 5	; 12
     f72:	5f cf       	rjmp	.-322    	; 0xe32 <_Z5checkv+0x284>
     f74:	60 cf       	rjmp	.-320    	; 0xe36 <_Z5checkv+0x288>
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     f76:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
     f7a:	81 11       	cpse	r24, r1
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     f7c:	63 cf       	rjmp	.-314    	; 0xe44 <_Z5checkv+0x296>
     f7e:	8e cf       	rjmp	.-228    	; 0xe9c <_Z5checkv+0x2ee>
     f80:	1c 99       	sbic	0x03, 4	; 3
     f82:	90 cf       	rjmp	.-224    	; 0xea4 <_Z5checkv+0x2f6>
     f84:	91 cf       	rjmp	.-222    	; 0xea8 <_Z5checkv+0x2fa>
			}
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     f86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     f8a:	85 fd       	sbrc	r24, 5
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     f8c:	c5 cf       	rjmp	.-118    	; 0xf18 <_Z5checkv+0x36a>
     f8e:	c6 cf       	rjmp	.-116    	; 0xf1c <_Z5checkv+0x36e>
     f90:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
     f94:	81 11       	cpse	r24, r1
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     f96:	91 cf       	rjmp	.-222    	; 0xeba <_Z5checkv+0x30c>
     f98:	bb cf       	rjmp	.-138    	; 0xf10 <_Z5checkv+0x362>
     f9a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <button_change>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
		button_change = !button_change;
     fa0:	89 27       	eor	r24, r25
     fa2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <button_change>
     fa6:	81 11       	cpse	r24, r1
     fa8:	d3 cf       	rjmp	.-90     	; 0xf50 <_Z5checkv+0x3a2>
     faa:	c1 cf       	rjmp	.-126    	; 0xf2e <_Z5checkv+0x380>
		if(!button_change) {
     fac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     fb0:	86 fd       	sbrc	r24, 6
		}
		
		set_pressed = true;
	}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     fb2:	d2 cf       	rjmp	.-92     	; 0xf58 <_Z5checkv+0x3aa>
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
		set_pressed = false;
	}
	
}
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	08 95       	ret

00000fc2 <main>:
     fc2:	27 d6       	rcall	.+3150   	; 0x1c12 <_Z9initUART0v>
     fc4:	c1 d8       	rcall	.-3710   	; 0x148 <_Z12init_devicesv>
     fc6:	8c e1       	ldi	r24, 0x1C	; 28
	init_devices();
	
	//********************************************************************************************************************************************//
	//**************************************************************Display BABY BABY ************************************************************//
	//********************************************************************************************************************************************//
	 max1.MAX7219_clearDisplay();
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	c4 d5       	rcall	.+2952   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
     fcc:	86 e1       	ldi	r24, 0x16	; 22
	 max2.MAX7219_clearDisplay();
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	c1 d5       	rcall	.+2946   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
     fd2:	b6 dc       	rcall	.-1684   	; 0x940 <_Z11displayBABYv>
	 displayBABY();
     fd4:	2f ef       	ldi	r18, 0xFF	; 255
     fd6:	83 ed       	ldi	r24, 0xD3	; 211
     fd8:	90 e3       	ldi	r25, 0x30	; 48
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	80 40       	sbci	r24, 0x00	; 0
     fde:	90 40       	sbci	r25, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <main+0x18>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <main+0x22>
     fe4:	00 00       	nop
     fe6:	dd dc       	rcall	.-1606   	; 0x9a2 <_Z15displayNANONANIv>
	 //*******************************************************************************************************************************************//
	 _delay_ms(1000);
	 //**************************************************************Display NYANO NANI***********************************************************//
	 displayNANONANI();
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	87 ea       	ldi	r24, 0xA7	; 167
     fec:	91 e6       	ldi	r25, 0x61	; 97
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <main+0x2c>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <main+0x36>
     ff8:	00 00       	nop
     ffa:	78 99       	sbic	0x0f, 0	; 15
	bool clear_display = false;
	bool set_temp_display = false;
	
	//**********************************************************************************//
	//Check if the power is coming from battery or AC supply
	while(bit_is_clear(BATT_MONITOR_PIN,BATT_MONITOR_PIN_POSITION)){
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <main+0x56>
     ffe:	a6 dd       	rcall	.-1204   	; 0xb4c <_Z4titiv>
		//then power is coming from battery.
		titi();_delay_ms(500);
    1000:	2f ef       	ldi	r18, 0xFF	; 255
    1002:	89 e6       	ldi	r24, 0x69	; 105
    1004:	98 e1       	ldi	r25, 0x18	; 24
    1006:	21 50       	subi	r18, 0x01	; 1
    1008:	80 40       	sbci	r24, 0x00	; 0
    100a:	90 40       	sbci	r25, 0x00	; 0
    100c:	e1 f7       	brne	.-8      	; 0x1006 <main+0x44>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <main+0x4e>
    1010:	00 00       	nop
		displayPwrFail();
    1012:	f8 dc       	rcall	.-1552   	; 0xa04 <_Z14displayPwrFailv>
    1014:	78 9b       	sbis	0x0f, 0	; 15
	bool clear_display = false;
	bool set_temp_display = false;
	
	//**********************************************************************************//
	//Check if the power is coming from battery or AC supply
	while(bit_is_clear(BATT_MONITOR_PIN,BATT_MONITOR_PIN_POSITION)){
    1016:	f3 cf       	rjmp	.-26     	; 0xffe <main+0x3c>
		//then power is coming from battery.
		titi();_delay_ms(500);
		displayPwrFail();
	}
	
	titi();
    1018:	99 dd       	rcall	.-1230   	; 0xb4c <_Z4titiv>
    101a:	8c e1       	ldi	r24, 0x1C	; 28
	//*********************************************************************************//
	
	//check Sensor and display sensor fail if failure of sensor
 	max1.MAX7219_clearDisplay();
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	9a d5       	rcall	.+2868   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
    1020:	86 e1       	ldi	r24, 0x16	; 22
 	max2.MAX7219_clearDisplay();
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	97 d5       	rcall	.+2862   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
    1026:	61 e0       	ldi	r22, 0x01	; 1
 	maxSkin.begin(SKIN_SENSOR);
    1028:	80 e3       	ldi	r24, 0x30	; 48
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	13 d4       	rcall	.+2086   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	85 e3       	ldi	r24, 0x35	; 53
 	maxAir.begin(AIR_SENSOR);
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0f d4       	rcall	.+2078   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	10 e0       	ldi	r17, 0x00	; 0
 	skin_temperature = maxSkin.temperature(100.0,430.0);
    103a:	27 ed       	ldi	r18, 0xD7	; 215
    103c:	33 e4       	ldi	r19, 0x43	; 67
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	68 ec       	ldi	r22, 0xC8	; 200
    1044:	72 e4       	ldi	r23, 0x42	; 66
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	45 d4       	rcall	.+2186   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    104c:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
    1050:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
    1054:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
    1058:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
    105c:	00 e0       	ldi	r16, 0x00	; 0
    105e:	10 e0       	ldi	r17, 0x00	; 0
 	air_temperature = maxAir.temperature(100.0,430.0);
    1060:	27 ed       	ldi	r18, 0xD7	; 215
    1062:	33 e4       	ldi	r19, 0x43	; 67
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	68 ec       	ldi	r22, 0xC8	; 200
    106a:	72 e4       	ldi	r23, 0x42	; 66
    106c:	85 e3       	ldi	r24, 0x35	; 53
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	32 d4       	rcall	.+2148   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    1072:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
    1076:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
    107a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
    107e:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
    1082:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
	 
	//check the sensor conditions, loop the program if it doesn't detect the air sensor and skin sensor//
 	while(skin_temperature <= 0.0 || skin_temperature >= 50 ){
    1086:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
    108a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
    108e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	3d d6       	rcall	.+3194   	; 0x1d14 <__cmpsf2>
    109a:	18 16       	cp	r1, r24
    109c:	7c f4       	brge	.+30     	; 0x10bc <main+0xfa>
    109e:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
    10a2:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
    10a6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
    10aa:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	48 e4       	ldi	r20, 0x48	; 72
    10b4:	52 e4       	ldi	r21, 0x42	; 66
    10b6:	7d d7       	rcall	.+3834   	; 0x1fb2 <__gesf2>
    10b8:	88 23       	and	r24, r24
    10ba:	4c f1       	brlt	.+82     	; 0x110e <main+0x14c>
    10bc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
 		if(displayUpdate){
    10c0:	88 23       	and	r24, r24
    10c2:	19 f1       	breq	.+70     	; 0x110a <main+0x148>
			displayUpdate = false;
    10c4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
			max1.MAX7219_init(REINITIALIZE);
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	8c e1       	ldi	r24, 0x1C	; 28
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	23 d5       	rcall	.+2630   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
    10d0:	61 e0       	ldi	r22, 0x01	; 1
			max2.MAX7219_init(REINITIALIZE);
    10d2:	86 e1       	ldi	r24, 0x16	; 22
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	1f d5       	rcall	.+2622   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
    10d8:	a9 da       	rcall	.-2734   	; 0x62c <_Z15displaySensFailv>
			displaySensFail();
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	80 e3       	ldi	r24, 0x30	; 48
			maxSkin.begin(SKIN_SENSOR);
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	b9 d3       	rcall	.+1906   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	27 ed       	ldi	r18, 0xD7	; 215
			skin_temperature = maxSkin.temperature(100.0,430.0);
    10e8:	33 e4       	ldi	r19, 0x43	; 67
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	68 ec       	ldi	r22, 0xC8	; 200
    10f0:	72 e4       	ldi	r23, 0x42	; 66
    10f2:	80 e3       	ldi	r24, 0x30	; 48
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	ef d3       	rcall	.+2014   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    10f8:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
    10fc:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
    1100:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
    1104:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
    1108:	bc cf       	rjmp	.-136    	; 0x1082 <main+0xc0>
    110a:	00 00       	nop
    110c:	ba cf       	rjmp	.-140    	; 0x1082 <main+0xc0>
    110e:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
		}
		else{
			asm volatile ("nop");
    1112:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
		}
 	}

 	while(air_temperature <= 0.0 || air_temperature >= 50){
    1116:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    111a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	f7 d5       	rcall	.+3054   	; 0x1d14 <__cmpsf2>
    1126:	18 16       	cp	r1, r24
    1128:	7c f4       	brge	.+30     	; 0x1148 <main+0x186>
    112a:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
    112e:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    1132:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    1136:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	48 e4       	ldi	r20, 0x48	; 72
    1140:	52 e4       	ldi	r21, 0x42	; 66
    1142:	37 d7       	rcall	.+3694   	; 0x1fb2 <__gesf2>
    1144:	88 23       	and	r24, r24
    1146:	4c f1       	brlt	.+82     	; 0x119a <main+0x1d8>
 		if(displayUpdate){
    1148:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
    114c:	88 23       	and	r24, r24
    114e:	19 f1       	breq	.+70     	; 0x1196 <main+0x1d4>
			displayUpdate = false;
    1150:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
 			max1.MAX7219_init(REINITIALIZE);
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	8c e1       	ldi	r24, 0x1C	; 28
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	dd d4       	rcall	.+2490   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
 			max2.MAX7219_init(REINITIALIZE);
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	86 e1       	ldi	r24, 0x16	; 22
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	d9 d4       	rcall	.+2482   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
    1164:	63 da       	rcall	.-2874   	; 0x62c <_Z15displaySensFailv>
 			displaySensFail();
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	85 e3       	ldi	r24, 0x35	; 53
 			maxAir.begin(AIR_SENSOR);
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	73 d3       	rcall	.+1766   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	27 ed       	ldi	r18, 0xD7	; 215
 			air_temperature = maxAir.temperature(100.0,430.0);
    1174:	33 e4       	ldi	r19, 0x43	; 67
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	68 ec       	ldi	r22, 0xC8	; 200
    117c:	72 e4       	ldi	r23, 0x42	; 66
    117e:	85 e3       	ldi	r24, 0x35	; 53
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	a9 d3       	rcall	.+1874   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    1184:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
    1188:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
    118c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
    1190:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
    1194:	bc cf       	rjmp	.-136    	; 0x110e <main+0x14c>
    1196:	00 00       	nop
    1198:	ba cf       	rjmp	.-140    	; 0x110e <main+0x14c>
 		}
 		else{
 			asm volatile ("nop");
    119a:	f1 2c       	mov	r15, r1
    119c:	c1 e0       	ldi	r28, 0x01	; 1
    119e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
	
	
	
	//*************************************************************//
	/// After this start preheat condition of baby warmer //////
 	while(!preHeat){
    11a2:	81 11       	cpse	r24, r1
    11a4:	75 c0       	rjmp	.+234    	; 0x1290 <main+0x2ce>
    11a6:	40 e0       	ldi	r20, 0x00	; 0
		 
		 Led.led_do(SENSOR_FAIL_LED, 0);
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	65 e0       	ldi	r22, 0x05	; 5
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	85 e1       	ldi	r24, 0x15	; 21
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	f8 d1       	rcall	.+1008   	; 0x15a4 <_ZN3led6led_doEii>
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
		 Led.led_do(POWER_LED, 0);
    11b8:	63 e0       	ldi	r22, 0x03	; 3
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	85 e1       	ldi	r24, 0x15	; 21
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	f1 d1       	rcall	.+994    	; 0x15a4 <_ZN3led6led_doEii>
    11c2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
 		
 		if(displayUpdate){
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <main+0x20a>
    11ca:	60 c0       	rjmp	.+192    	; 0x128c <main+0x2ca>
    11cc:	fc 26       	eor	r15, r28
 			clear_display = !clear_display;
    11ce:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
 			
 			displayUpdate = false;
    11d2:	6c 2f       	mov	r22, r28
 			maxSkin.begin(SKIN_SENSOR);
    11d4:	80 e3       	ldi	r24, 0x30	; 48
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	3d d3       	rcall	.+1658   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0,430.0);
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	27 ed       	ldi	r18, 0xD7	; 215
    11e0:	33 e4       	ldi	r19, 0x43	; 67
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	68 ec       	ldi	r22, 0xC8	; 200
    11e8:	72 e4       	ldi	r23, 0x42	; 66
    11ea:	80 e3       	ldi	r24, 0x30	; 48
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	73 d3       	rcall	.+1766   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    11f0:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
    11f4:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
    11f8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
    11fc:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
 			max1.MAX7219_init(REINITIALIZE);
    1200:	6c 2f       	mov	r22, r28
    1202:	8c e1       	ldi	r24, 0x1C	; 28
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	87 d4       	rcall	.+2318   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
 			max2.MAX7219_init(REINITIALIZE);
    1208:	6c 2f       	mov	r22, r28
    120a:	86 e1       	ldi	r24, 0x16	; 22
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	83 d4       	rcall	.+2310   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
    1210:	82 da       	rcall	.-2812   	; 0x716 <_Z14displayPreHeatv>
 			displayPreHeat();
    1212:	ff 20       	and	r15, r15
 			if(clear_display) {
    1214:	21 f0       	breq	.+8      	; 0x121e <main+0x25c>
    1216:	86 e1       	ldi	r24, 0x16	; 22
 				max2.MAX7219_clearDisplay();
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	9c d4       	rcall	.+2360   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <main+0x26e>
    121e:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
 				//max1.MAX7219_clearDisplay();
 				} else {
 				sendToDisplayBelow(skin_temperature);
    1222:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
    1226:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
    122a:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
    122e:	ae d9       	rcall	.-3236   	; 0x58c <_Z18sendToDisplayBelowf>
    1230:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <skin_temperature>
 			}
 			if(skin_temperature >= pre_heat_max_temp) {
    1234:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <skin_temperature+0x1>
    1238:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <skin_temperature+0x2>
    123c:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <skin_temperature+0x3>
    1240:	80 90 02 02 	lds	r8, 0x0202	; 0x800202 <pre_heat_max_temp>
    1244:	90 90 03 02 	lds	r9, 0x0203	; 0x800203 <pre_heat_max_temp+0x1>
    1248:	a0 90 04 02 	lds	r10, 0x0204	; 0x800204 <pre_heat_max_temp+0x2>
    124c:	b0 90 05 02 	lds	r11, 0x0205	; 0x800205 <pre_heat_max_temp+0x3>
    1250:	a5 01       	movw	r20, r10
    1252:	94 01       	movw	r18, r8
    1254:	ae d6       	rcall	.+3420   	; 0x1fb2 <__gesf2>
    1256:	88 23       	and	r24, r24
 				controls.stopHeater();
    1258:	3c f0       	brlt	.+14     	; 0x1268 <main+0x2a6>
    125a:	8c e3       	ldi	r24, 0x3C	; 60
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	81 d1       	rcall	.+770    	; 0x1562 <_ZN8Controls10stopHeaterEv>
 				preHeat = true;
    1260:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <__data_end>
 				titititi();
    1264:	1b dc       	rcall	.-1994   	; 0xa9c <_Z8titititiv>
    1266:	9b cf       	rjmp	.-202    	; 0x119e <main+0x1dc>
 			}
 			else if(skin_temperature < pre_heat_max_temp) {
    1268:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
    126c:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
    1270:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
    1274:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
    1278:	c5 01       	movw	r24, r10
    127a:	b4 01       	movw	r22, r8
    127c:	9a d6       	rcall	.+3380   	; 0x1fb2 <__gesf2>
    127e:	18 16       	cp	r1, r24
    1280:	0c f0       	brlt	.+2      	; 0x1284 <main+0x2c2>
 				controls.startHeater();
    1282:	8d cf       	rjmp	.-230    	; 0x119e <main+0x1dc>
    1284:	8c e3       	ldi	r24, 0x3C	; 60
    1286:	92 e0       	ldi	r25, 0x02	; 2
 			}
 		}
 		
 		else{
 			asm volatile ("nop");
    1288:	6a d1       	rcall	.+724    	; 0x155e <_ZN8Controls11startHeaterEv>
    128a:	89 cf       	rjmp	.-238    	; 0x119e <main+0x1dc>
	///The preheat condition of baby warmer ends here ///////////
	
	//clear display
	//note that for clearDisplay to clear screen, mode decode register should be in 0xff form or the display shows tttttttt 

	max1.MAX7219_clearDisplay();
    128c:	00 00       	nop
    128e:	87 cf       	rjmp	.-242    	; 0x119e <main+0x1dc>
    1290:	8c e1       	ldi	r24, 0x1C	; 28
    1292:	92 e0       	ldi	r25, 0x02	; 2
	max2.MAX7219_clearDisplay();
    1294:	5f d4       	rcall	.+2238   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
    1296:	86 e1       	ldi	r24, 0x16	; 22
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	5c d4       	rcall	.+2232   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	81 ee       	ldi	r24, 0xE1	; 225
    12a0:	94 e0       	ldi	r25, 0x04	; 4
    12a2:	21 50       	subi	r18, 0x01	; 1
    12a4:	80 40       	sbci	r24, 0x00	; 0
    12a6:	90 40       	sbci	r25, 0x00	; 0
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <main+0x2e0>
    12aa:	00 c0       	rjmp	.+0      	; 0x12ac <main+0x2ea>
    12ac:	00 00       	nop
	float temperature_heater_off = 0.0;
	float temperature_heater_on = 0.0;
	//
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
    12ae:	c0 e0       	ldi	r28, 0x00	; 0
	max2.MAX7219_clearDisplay();
	_delay_ms(100);
	
	while(1)
	{
		check();
    12b0:	7e dc       	rcall	.-1796   	; 0xbae <_Z5checkv>
    12b2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Skin_Sensor_failure_FLAG>
		
		while (Skin_Sensor_failure_FLAG | Air_Sensor_failure_FLAG)
    12b6:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <Air_Sensor_failure_FLAG>
    12ba:	81 11       	cpse	r24, r1
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <main+0x300>
    12be:	99 23       	and	r25, r25
		{
			check();
    12c0:	a1 f0       	breq	.+40     	; 0x12ea <main+0x328>
    12c2:	75 dc       	rcall	.-1814   	; 0xbae <_Z5checkv>
			Led.led_do(HEATER_FAIL_LED, 0);
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	64 e0       	ldi	r22, 0x04	; 4
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	85 e1       	ldi	r24, 0x15	; 21
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	69 d1       	rcall	.+722    	; 0x15a4 <_ZN3led6led_doEii>
			controls.stopHeater();
    12d2:	8c e3       	ldi	r24, 0x3C	; 60
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	45 d1       	rcall	.+650    	; 0x1562 <_ZN8Controls10stopHeaterEv>
    12d8:	e1 db       	rcall	.-2110   	; 0xa9c <_Z8titititiv>
			titititi();
    12da:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Skin_Sensor_failure_FLAG>
	
	while(1)
	{
		check();
		
		while (Skin_Sensor_failure_FLAG | Air_Sensor_failure_FLAG)
    12de:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <Air_Sensor_failure_FLAG>
    12e2:	81 11       	cpse	r24, r1
    12e4:	ee cf       	rjmp	.-36     	; 0x12c2 <main+0x300>
    12e6:	91 11       	cpse	r25, r1
    12e8:	ec cf       	rjmp	.-40     	; 0x12c2 <main+0x300>
    12ea:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Skin_Sensor_failure_FLAG>
			Led.led_do(HEATER_FAIL_LED, 0);
			controls.stopHeater();
			titititi();
		}
		
		if (!Skin_Sensor_failure_FLAG && !Air_Sensor_failure_FLAG)
    12ee:	81 11       	cpse	r24, r1
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <main+0x33a>
    12f2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <Air_Sensor_failure_FLAG>
    12f6:	88 23       	and	r24, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <main+0x33a>
    12fa:	02 c1       	rjmp	.+516    	; 0x1500 <main+0x53e>
    12fc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <displayUpdate>
		{
			Led.led_do(SENSOR_FAIL_LED, 0);
		}
		
		if(displayUpdate) {
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <main+0x344>
    1304:	fb c0       	rjmp	.+502    	; 0x14fc <main+0x53a>
    1306:	60 e0       	ldi	r22, 0x00	; 0
			
			//spi for temperature pt100
			maxAir.begin(AIR_SENSOR); //these are init
    1308:	85 e3       	ldi	r24, 0x35	; 53
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	a3 d2       	rcall	.+1350   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    130e:	61 e0       	ldi	r22, 0x01	; 1
			maxSkin.begin(SKIN_SENSOR);
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	9f d2       	rcall	.+1342   	; 0x1854 <_ZN17Adafruit_MAX318655beginEh>
    1316:	00 e0       	ldi	r16, 0x00	; 0
    1318:	10 e0       	ldi	r17, 0x00	; 0
			skin_temperature = maxSkin.temperature(100.0, 430.0);
    131a:	27 ed       	ldi	r18, 0xD7	; 215
    131c:	33 e4       	ldi	r19, 0x43	; 67
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	68 ec       	ldi	r22, 0xC8	; 200
    1324:	72 e4       	ldi	r23, 0x42	; 66
    1326:	80 e3       	ldi	r24, 0x30	; 48
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	d5 d2       	rcall	.+1450   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    132c:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <skin_temperature>
    1330:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <skin_temperature+0x1>
    1334:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <skin_temperature+0x2>
    1338:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <skin_temperature+0x3>
    133c:	00 e0       	ldi	r16, 0x00	; 0
			air_temperature = maxAir.temperature(100.0, 430.0);
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	27 ed       	ldi	r18, 0xD7	; 215
    1342:	33 e4       	ldi	r19, 0x43	; 67
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	68 ec       	ldi	r22, 0xC8	; 200
    134a:	72 e4       	ldi	r23, 0x42	; 66
    134c:	85 e3       	ldi	r24, 0x35	; 53
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	c2 d2       	rcall	.+1412   	; 0x18d6 <_ZN17Adafruit_MAX3186511temperatureEff>
    1352:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <air_temperature>
    1356:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <air_temperature+0x1>
    135a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <air_temperature+0x2>
    135e:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <air_temperature+0x3>
			max1.MAX7219_init(REINITIALIZE); // these are init
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	8c e1       	ldi	r24, 0x1C	; 28
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	d6 d3       	rcall	.+1964   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
			max2.MAX7219_init(REINITIALIZE);
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	86 e1       	ldi	r24, 0x16	; 22
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	d2 d3       	rcall	.+1956   	; 0x1b16 <_ZN7max721912MAX7219_initEc>
    1372:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <start_buzzer>
			
			//buzzer karaying
			if(start_buzzer) {
    1376:	88 23       	and	r24, r24
    1378:	09 f4       	brne	.+2      	; 0x137c <main+0x3ba>
    137a:	ca c0       	rjmp	.+404    	; 0x1510 <main+0x54e>
    137c:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <buzzer_timer>
				buzzer_timer = !buzzer_timer;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 27       	eor	r24, r25
    1384:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <buzzer_timer>
    1388:	88 23       	and	r24, r24
				if(buzzer_timer) {
    138a:	21 f0       	breq	.+8      	; 0x1394 <main+0x3d2>
    138c:	8c e3       	ldi	r24, 0x3C	; 60
					//  UART0TransmitString("On\r\n");
					controls.startBuzzer();
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	ea d0       	rcall	.+468    	; 0x1566 <_ZN8Controls11startBuzzerEv>
    1392:	03 c0       	rjmp	.+6      	; 0x139a <main+0x3d8>
    1394:	8c e3       	ldi	r24, 0x3C	; 60
					} else {
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	ec d0       	rcall	.+472    	; 0x1572 <_ZN8Controls10stopBuzzerEv>
    139a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
				}
			}
			// sending this
			if(button_change){
    139e:	88 23       	and	r24, r24
    13a0:	91 f0       	breq	.+36     	; 0x13c6 <main+0x404>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	c8 27       	eor	r28, r24
				set_temp_display = !set_temp_display;
    13a6:	51 f0       	breq	.+20     	; 0x13bc <main+0x3fa>
    13a8:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <set_temperature_copy>
				if(set_temp_display) {
					sendToDisplayBelow(set_temperature_copy);
    13ac:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <set_temperature_copy+0x1>
    13b0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <set_temperature_copy+0x2>
    13b4:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <set_temperature_copy+0x3>
    13b8:	e9 d8       	rcall	.-3630   	; 0x58c <_Z18sendToDisplayBelowf>
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <main+0x400>
    13bc:	86 e1       	ldi	r24, 0x16	; 22
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	c9 d3       	rcall	.+1938   	; 0x1b54 <_ZN7max721920MAX7219_clearDisplayEv>
					} else {
					max2.MAX7219_clearDisplay();
    13c2:	72 d9       	rcall	.-3356   	; 0x6a8 <_Z21displaySetTemperaturev>
    13c4:	38 c0       	rjmp	.+112    	; 0x1436 <main+0x474>
    13c6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <start_buzzer>
				}
				displaySetTemperature();
    13ca:	88 23       	and	r24, r24
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <main+0x440>
    13ce:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
			}
			
			else if(start_buzzer){
    13d2:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
    13d6:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
				displayOnTempOutOfRange(air_temperature, skin_temperature, set_temperature);
    13da:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
    13de:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
    13e2:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    13e6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    13ea:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    13ee:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
    13f2:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
    13f6:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
    13fa:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
    13fe:	6e da       	rcall	.-2852   	; 0x8dc <_Z23displayOnTempOutOfRangefff>
    1400:	1a c0       	rjmp	.+52     	; 0x1436 <main+0x474>
    1402:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <skin_temperature>
    1406:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <skin_temperature+0x1>
			}
			else {
				sendToDisplay(air_temperature, skin_temperature, set_temperature);
    140a:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <skin_temperature+0x2>
    140e:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <skin_temperature+0x3>
    1412:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
    1416:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    141a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    141e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    1422:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <set_temperature>
    1426:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <set_temperature+0x1>
    142a:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <set_temperature+0x2>
    142e:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <set_temperature+0x3>
    1432:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z13sendToDisplayfff>
    1436:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <set_temperature>
			}
			
			temperature_heater_off = set_temperature - 0.2f;
    143a:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <set_temperature+0x1>
    143e:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <set_temperature+0x2>
    1442:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <set_temperature+0x3>
			temperature_heater_on = set_temperature - 0.3f;
			
			if(skin_temperature >= temperature_heater_off) {
    1446:	80 90 2c 02 	lds	r8, 0x022C	; 0x80022c <skin_temperature>
    144a:	90 90 2d 02 	lds	r9, 0x022D	; 0x80022d <skin_temperature+0x1>
    144e:	a0 90 2e 02 	lds	r10, 0x022E	; 0x80022e <skin_temperature+0x2>
    1452:	b0 90 2f 02 	lds	r11, 0x022F	; 0x80022f <skin_temperature+0x3>
    1456:	2d ec       	ldi	r18, 0xCD	; 205
    1458:	3c ec       	ldi	r19, 0xCC	; 204
    145a:	4c e4       	ldi	r20, 0x4C	; 76
    145c:	5e e3       	ldi	r21, 0x3E	; 62
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	f3 d3       	rcall	.+2022   	; 0x1c4a <__subsf3>
    1464:	a5 01       	movw	r20, r10
    1466:	94 01       	movw	r18, r8
    1468:	55 d4       	rcall	.+2218   	; 0x1d14 <__cmpsf2>
    146a:	18 16       	cp	r1, r24
    146c:	5c f0       	brlt	.+22     	; 0x1484 <main+0x4c2>
				Led.led_do(HEATER_FAIL_LED,0);
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	85 e1       	ldi	r24, 0x15	; 21
				controls.stopHeater();
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	94 d0       	rcall	.+296    	; 0x15a4 <_ZN3led6led_doEii>
    147c:	8c e3       	ldi	r24, 0x3C	; 60
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	70 d0       	rcall	.+224    	; 0x1562 <_ZN8Controls10stopHeaterEv>
			}else if(skin_temperature <= temperature_heater_on) {
    1482:	1e c0       	rjmp	.+60     	; 0x14c0 <main+0x4fe>
    1484:	80 90 2c 02 	lds	r8, 0x022C	; 0x80022c <skin_temperature>
    1488:	90 90 2d 02 	lds	r9, 0x022D	; 0x80022d <skin_temperature+0x1>
    148c:	a0 90 2e 02 	lds	r10, 0x022E	; 0x80022e <skin_temperature+0x2>
    1490:	b0 90 2f 02 	lds	r11, 0x022F	; 0x80022f <skin_temperature+0x3>
    1494:	2a e9       	ldi	r18, 0x9A	; 154
    1496:	39 e9       	ldi	r19, 0x99	; 153
    1498:	49 e9       	ldi	r20, 0x99	; 153
    149a:	5e e3       	ldi	r21, 0x3E	; 62
    149c:	c7 01       	movw	r24, r14
    149e:	b6 01       	movw	r22, r12
    14a0:	d4 d3       	rcall	.+1960   	; 0x1c4a <__subsf3>
    14a2:	a5 01       	movw	r20, r10
    14a4:	94 01       	movw	r18, r8
    14a6:	85 d5       	rcall	.+2826   	; 0x1fb2 <__gesf2>
    14a8:	88 23       	and	r24, r24
    14aa:	54 f0       	brlt	.+20     	; 0x14c0 <main+0x4fe>
				Led.led_do(HEATER_FAIL_LED,1);
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	85 e1       	ldi	r24, 0x15	; 21
    14b6:	92 e0       	ldi	r25, 0x02	; 2
    14b8:	75 d0       	rcall	.+234    	; 0x15a4 <_ZN3led6led_doEii>
    14ba:	8c e3       	ldi	r24, 0x3C	; 60
				controls.startHeater();
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	4f d0       	rcall	.+158    	; 0x155e <_ZN8Controls11startHeaterEv>
    14c0:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <air_temperature>
			}
			
			if (air_temperature >= 39.00 )
    14c4:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <air_temperature+0x1>
    14c8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <air_temperature+0x2>
    14cc:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <air_temperature+0x3>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4c e1       	ldi	r20, 0x1C	; 28
    14d6:	52 e4       	ldi	r21, 0x42	; 66
    14d8:	6c d5       	rcall	.+2776   	; 0x1fb2 <__gesf2>
    14da:	88 23       	and	r24, r24
    14dc:	64 f0       	brlt	.+24     	; 0x14f6 <main+0x534>
    14de:	8c e3       	ldi	r24, 0x3C	; 60
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	3f d0       	rcall	.+126    	; 0x1562 <_ZN8Controls10stopHeaterEv>
			{
				controls.stopHeater();
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	64 e0       	ldi	r22, 0x04	; 4
    14ea:	70 e0       	ldi	r23, 0x00	; 0
				Led.led_do(HEATER_FAIL_LED, 0);
    14ec:	85 e1       	ldi	r24, 0x15	; 21
    14ee:	92 e0       	ldi	r25, 0x02	; 2
    14f0:	59 d0       	rcall	.+178    	; 0x15a4 <_ZN3led6led_doEii>
    14f2:	d4 da       	rcall	.-2648   	; 0xa9c <_Z8titititiv>
    14f4:	bc d9       	rcall	.-3208   	; 0x86e <_Z14displayHighAirv>
    14f6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <displayUpdate>
    14fa:	da ce       	rjmp	.-588    	; 0x12b0 <main+0x2ee>
				titititi();
    14fc:	00 00       	nop
    14fe:	d8 ce       	rjmp	.-592    	; 0x12b0 <main+0x2ee>
				//Led.led_do(HEATER_FAIL_LED, 0);
				displayHighAir();
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
			}
			
			displayUpdate = false;
    1504:	65 e0       	ldi	r22, 0x05	; 5
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	85 e1       	ldi	r24, 0x15	; 21
		}
		else{
			asm volatile ("nop");
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	4b d0       	rcall	.+150    	; 0x15a4 <_ZN3led6led_doEii>
			titititi();
		}
		
		if (!Skin_Sensor_failure_FLAG && !Air_Sensor_failure_FLAG)
		{
			Led.led_do(SENSOR_FAIL_LED, 0);
    150e:	f6 ce       	rjmp	.-532    	; 0x12fc <main+0x33a>
    1510:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_change>
    1514:	81 11       	cpse	r24, r1
    1516:	45 cf       	rjmp	.-374    	; 0x13a2 <main+0x3e0>
    1518:	74 cf       	rjmp	.-280    	; 0x1402 <main+0x440>

0000151a <_GLOBAL__sub_I_resetFunc>:
    151a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <set_temperature>
    151e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <set_temperature+0x1>
					// UART0TransmitString("off\r\n");
					controls.stopBuzzer();
				}
			}
			// sending this
			if(button_change){
    1522:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <set_temperature+0x2>
    1526:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <set_temperature+0x3>
Adafruit_MAX31865 maxSkin;

volatile float skin_temperature = 0.0;
volatile float air_temperature = 0.0;
float set_temperature = 36.5;
float set_temperature_copy = set_temperature;
    152a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <set_temperature_copy>
    152e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <set_temperature_copy+0x1>
    1532:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <set_temperature_copy+0x2>
    1536:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <set_temperature_copy+0x3>

#define FIRSTINITIALIZE 0
#define REINITIALIZE	1


class max7219 {
    153a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <max1+0x1>
    153e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <max1>
    1542:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <max2+0x1>
    1546:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <max2>
    154a:	08 95       	ret

0000154c <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
    154c:	25 9a       	sbi	0x04, 5	; 4
    154e:	e1 e0       	ldi	r30, 0x01	; 1
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	80 81       	ld	r24, Z
    1554:	80 61       	ori	r24, 0x10	; 16
    1556:	80 83       	st	Z, r24
    1558:	2d 98       	cbi	0x05, 5	; 5
    155a:	80 98       	cbi	0x10, 0	; 16
    155c:	08 95       	ret

0000155e <_ZN8Controls11startHeaterEv>:
    155e:	2d 9a       	sbi	0x05, 5	; 5
    1560:	08 95       	ret

00001562 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
    1562:	2d 98       	cbi	0x05, 5	; 5
    1564:	08 95       	ret

00001566 <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
    1566:	e2 e0       	ldi	r30, 0x02	; 2
    1568:	f1 e0       	ldi	r31, 0x01	; 1
    156a:	80 81       	ld	r24, Z
    156c:	80 61       	ori	r24, 0x10	; 16
    156e:	80 83       	st	Z, r24
    1570:	08 95       	ret

00001572 <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
    1572:	e2 e0       	ldi	r30, 0x02	; 2
    1574:	f1 e0       	ldi	r31, 0x01	; 1
    1576:	80 81       	ld	r24, Z
    1578:	8f 7e       	andi	r24, 0xEF	; 239
    157a:	80 83       	st	Z, r24
    157c:	08 95       	ret

0000157e <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
    157e:	ea e0       	ldi	r30, 0x0A	; 10
    1580:	f1 e0       	ldi	r31, 0x01	; 1
    1582:	80 81       	ld	r24, Z
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	80 83       	st	Z, r24
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
    1588:	80 81       	ld	r24, Z
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	80 83       	st	Z, r24
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
    158e:	80 81       	ld	r24, Z
    1590:	88 60       	ori	r24, 0x08	; 8
    1592:	80 83       	st	Z, r24
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
    1594:	6b 9a       	sbi	0x0d, 3	; 13
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
    1596:	e1 e0       	ldi	r30, 0x01	; 1
    1598:	f1 e0       	ldi	r31, 0x01	; 1
    159a:	80 81       	ld	r24, Z
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	80 83       	st	Z, r24
	DDR(POWER_PORT) |= (1 << POWER_PIN);
    15a0:	9d 9a       	sbi	0x13, 5	; 19
    15a2:	08 95       	ret

000015a4 <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
    15a4:	62 30       	cpi	r22, 0x02	; 2
    15a6:	71 05       	cpc	r23, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN3led6led_doEii+0x8>
    15aa:	41 c0       	rjmp	.+130    	; 0x162e <_ZN3led6led_doEii+0x8a>
    15ac:	3c f4       	brge	.+14     	; 0x15bc <_ZN3led6led_doEii+0x18>
    15ae:	61 15       	cp	r22, r1
    15b0:	71 05       	cpc	r23, r1
    15b2:	69 f0       	breq	.+26     	; 0x15ce <_ZN3led6led_doEii+0x2a>
    15b4:	61 30       	cpi	r22, 0x01	; 1
    15b6:	71 05       	cpc	r23, r1
    15b8:	c1 f0       	breq	.+48     	; 0x15ea <_ZN3led6led_doEii+0x46>
    15ba:	08 95       	ret
    15bc:	64 30       	cpi	r22, 0x04	; 4
    15be:	71 05       	cpc	r23, r1
    15c0:	41 f1       	breq	.+80     	; 0x1612 <_ZN3led6led_doEii+0x6e>
    15c2:	0c f4       	brge	.+2      	; 0x15c6 <_ZN3led6led_doEii+0x22>
    15c4:	42 c0       	rjmp	.+132    	; 0x164a <_ZN3led6led_doEii+0xa6>
    15c6:	65 30       	cpi	r22, 0x05	; 5
    15c8:	71 05       	cpc	r23, r1
    15ca:	e9 f0       	breq	.+58     	; 0x1606 <_ZN3led6led_doEii+0x62>
    15cc:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
    15ce:	45 2b       	or	r20, r21
    15d0:	31 f0       	breq	.+12     	; 0x15de <_ZN3led6led_doEii+0x3a>
    15d2:	eb e0       	ldi	r30, 0x0B	; 11
    15d4:	f1 e0       	ldi	r31, 0x01	; 1
    15d6:	80 81       	ld	r24, Z
    15d8:	82 60       	ori	r24, 0x02	; 2
    15da:	80 83       	st	Z, r24
    15dc:	08 95       	ret
    15de:	eb e0       	ldi	r30, 0x0B	; 11
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	80 81       	ld	r24, Z
    15e4:	8d 7f       	andi	r24, 0xFD	; 253
    15e6:	80 83       	st	Z, r24
    15e8:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
    15ea:	45 2b       	or	r20, r21
    15ec:	31 f0       	breq	.+12     	; 0x15fa <_ZN3led6led_doEii+0x56>
    15ee:	eb e0       	ldi	r30, 0x0B	; 11
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	80 81       	ld	r24, Z
    15f4:	80 62       	ori	r24, 0x20	; 32
    15f6:	80 83       	st	Z, r24
    15f8:	08 95       	ret
    15fa:	eb e0       	ldi	r30, 0x0B	; 11
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	80 81       	ld	r24, Z
    1600:	8f 7d       	andi	r24, 0xDF	; 223
    1602:	80 83       	st	Z, r24
    1604:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
    1606:	45 2b       	or	r20, r21
    1608:	11 f0       	breq	.+4      	; 0x160e <_ZN3led6led_doEii+0x6a>
    160a:	73 9a       	sbi	0x0e, 3	; 14
    160c:	08 95       	ret
    160e:	73 98       	cbi	0x0e, 3	; 14
    1610:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
    1612:	45 2b       	or	r20, r21
    1614:	31 f0       	breq	.+12     	; 0x1622 <_ZN3led6led_doEii+0x7e>
    1616:	e2 e0       	ldi	r30, 0x02	; 2
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	80 81       	ld	r24, Z
    161c:	88 60       	ori	r24, 0x08	; 8
    161e:	80 83       	st	Z, r24
    1620:	08 95       	ret
    1622:	e2 e0       	ldi	r30, 0x02	; 2
    1624:	f1 e0       	ldi	r31, 0x01	; 1
    1626:	80 81       	ld	r24, Z
    1628:	87 7f       	andi	r24, 0xF7	; 247
    162a:	80 83       	st	Z, r24
    162c:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
    162e:	45 2b       	or	r20, r21
    1630:	31 f0       	breq	.+12     	; 0x163e <_ZN3led6led_doEii+0x9a>
    1632:	eb e0       	ldi	r30, 0x0B	; 11
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	80 81       	ld	r24, Z
    1638:	88 60       	ori	r24, 0x08	; 8
    163a:	80 83       	st	Z, r24
    163c:	08 95       	ret
    163e:	eb e0       	ldi	r30, 0x0B	; 11
    1640:	f1 e0       	ldi	r31, 0x01	; 1
    1642:	80 81       	ld	r24, Z
    1644:	87 7f       	andi	r24, 0xF7	; 247
    1646:	80 83       	st	Z, r24
    1648:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
    164a:	45 2b       	or	r20, r21
    164c:	11 f0       	breq	.+4      	; 0x1652 <_ZN3led6led_doEii+0xae>
    164e:	a5 9a       	sbi	0x14, 5	; 20
    1650:	08 95       	ret
    1652:	a5 98       	cbi	0x14, 5	; 20
    1654:	08 95       	ret

00001656 <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
    1656:	6e bd       	out	0x2e, r22	; 46
    1658:	0d b4       	in	r0, 0x2d	; 45
    165a:	07 fe       	sbrs	r0, 7
    165c:	fd cf       	rjmp	.-6      	; 0x1658 <_ZN17Adafruit_MAX318657spixferEh+0x2>
    165e:	8e b5       	in	r24, 0x2e	; 46
    1660:	08 95       	ret

00001662 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	7c 01       	movw	r14, r24
    1670:	ea 01       	movw	r28, r20
    1672:	12 2f       	mov	r17, r18
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	88 23       	and	r24, r24
    167a:	19 f0       	breq	.+6      	; 0x1682 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	51 f0       	breq	.+20     	; 0x1694 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x32>
    1680:	11 c0       	rjmp	.+34     	; 0x16a4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
    1682:	eb e0       	ldi	r30, 0x0B	; 11
    1684:	f1 e0       	ldi	r31, 0x01	; 1
    1686:	80 81       	ld	r24, Z
    1688:	8e 7f       	andi	r24, 0xFE	; 254
    168a:	80 83       	st	Z, r24
    168c:	80 81       	ld	r24, Z
    168e:	84 60       	ori	r24, 0x04	; 4
    1690:	80 83       	st	Z, r24
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
    1694:	eb e0       	ldi	r30, 0x0B	; 11
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	80 81       	ld	r24, Z
    169a:	8b 7f       	andi	r24, 0xFB	; 251
    169c:	80 83       	st	Z, r24
    169e:	80 81       	ld	r24, Z
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	80 83       	st	Z, r24
    16a4:	6f 77       	andi	r22, 0x7F	; 127
    16a6:	c7 01       	movw	r24, r14
    16a8:	d6 df       	rcall	.-84     	; 0x1656 <_ZN17Adafruit_MAX318657spixferEh>
    16aa:	0f ef       	ldi	r16, 0xFF	; 255
    16ac:	01 0f       	add	r16, r17
    16ae:	11 23       	and	r17, r17
    16b0:	61 f0       	breq	.+24     	; 0x16ca <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x68>
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	0f 5f       	subi	r16, 0xFF	; 255
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	0c 0f       	add	r16, r28
    16ba:	1d 1f       	adc	r17, r29
    16bc:	6f ef       	ldi	r22, 0xFF	; 255
    16be:	c7 01       	movw	r24, r14
    16c0:	ca df       	rcall	.-108    	; 0x1656 <_ZN17Adafruit_MAX318657spixferEh>
    16c2:	89 93       	st	Y+, r24
    16c4:	c0 17       	cp	r28, r16
    16c6:	d1 07       	cpc	r29, r17
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5a>
    16ca:	f7 01       	movw	r30, r14
    16cc:	80 81       	ld	r24, Z
    16ce:	88 23       	and	r24, r24
    16d0:	19 f0       	breq	.+6      	; 0x16d8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x76>
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	39 f0       	breq	.+14     	; 0x16e4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x82>
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
    16d8:	eb e0       	ldi	r30, 0x0B	; 11
    16da:	f1 e0       	ldi	r31, 0x01	; 1
    16dc:	80 81       	ld	r24, Z
    16de:	81 60       	ori	r24, 0x01	; 1
    16e0:	80 83       	st	Z, r24
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x8c>
    16e4:	eb e0       	ldi	r30, 0x0B	; 11
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	80 81       	ld	r24, Z
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	80 83       	st	Z, r24
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	08 95       	ret

000016fc <_ZN17Adafruit_MAX3186513readRegister8Eh>:
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	ae 01       	movw	r20, r28
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	a8 df       	rcall	.-176    	; 0x1662 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	0f 90       	pop	r0
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	1f 92       	push	r1
    1722:	1f 92       	push	r1
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
    172c:	22 e0       	ldi	r18, 0x02	; 2
    172e:	ae 01       	movw	r20, r28
    1730:	4f 5f       	subi	r20, 0xFF	; 255
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	96 df       	rcall	.-212    	; 0x1662 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
    173a:	98 2f       	mov	r25, r24
    173c:	88 27       	eor	r24, r24
ret |=  buffer[1];
    173e:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
    1740:	82 2b       	or	r24, r18
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	14 2f       	mov	r17, r20
 
  switch(choose) {
    1756:	88 81       	ld	r24, Y
    1758:	88 23       	and	r24, r24
    175a:	19 f0       	breq	.+6      	; 0x1762 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	51 f0       	breq	.+20     	; 0x1774 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x28>
    1760:	11 c0       	rjmp	.+34     	; 0x1784 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 0:
		TEMP_I_PORT &=~ (1 << TEMP_I_PIN);
    1762:	eb e0       	ldi	r30, 0x0B	; 11
    1764:	f1 e0       	ldi	r31, 0x01	; 1
    1766:	80 81       	ld	r24, Z
    1768:	8e 7f       	andi	r24, 0xFE	; 254
    176a:	80 83       	st	Z, r24
		TEMP_II_PORT |= (1 << TEMP_II_PIN);
    176c:	80 81       	ld	r24, Z
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	80 83       	st	Z, r24
		break;
    1772:	08 c0       	rjmp	.+16     	; 0x1784 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
	  case 1:
		TEMP_II_PORT &=~ (1 << TEMP_II_PIN);
    1774:	eb e0       	ldi	r30, 0x0B	; 11
    1776:	f1 e0       	ldi	r31, 0x01	; 1
    1778:	80 81       	ld	r24, Z
    177a:	8b 7f       	andi	r24, 0xFB	; 251
    177c:	80 83       	st	Z, r24
		TEMP_I_PORT |= (1 << TEMP_I_PIN);
    177e:	80 81       	ld	r24, Z
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	80 83       	st	Z, r24
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
    1784:	60 68       	ori	r22, 0x80	; 128
    1786:	ce 01       	movw	r24, r28
    1788:	66 df       	rcall	.-308    	; 0x1656 <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
    178a:	61 2f       	mov	r22, r17
    178c:	ce 01       	movw	r24, r28
    178e:	63 df       	rcall	.-314    	; 0x1656 <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
    1790:	88 81       	ld	r24, Y
    1792:	88 23       	and	r24, r24
    1794:	19 f0       	breq	.+6      	; 0x179c <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x50>
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	39 f0       	breq	.+14     	; 0x17a8 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x5c>
    179a:	0b c0       	rjmp	.+22     	; 0x17b2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
   case 0:
	TEMP_I_PORT |= (1 << TEMP_I_PIN);
    179c:	eb e0       	ldi	r30, 0x0B	; 11
    179e:	f1 e0       	ldi	r31, 0x01	; 1
    17a0:	80 81       	ld	r24, Z
    17a2:	81 60       	ori	r24, 0x01	; 1
    17a4:	80 83       	st	Z, r24
	break;
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x66>
  case 1:
	TEMP_II_PORT |= (1 << TEMP_II_PIN);
    17a8:	eb e0       	ldi	r30, 0x0B	; 11
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	80 83       	st	Z, r24
	break;
}
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	08 95       	ret

000017ba <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	9c df       	rcall	.-200    	; 0x16fc <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
    17c4:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    17c6:	48 2f       	mov	r20, r24
    17c8:	42 60       	ori	r20, 0x02	; 2
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	ce 01       	movw	r24, r28
    17ce:	be df       	rcall	.-132    	; 0x174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	8c df       	rcall	.-232    	; 0x16fc <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    17e4:	11 23       	and	r17, r17
    17e6:	19 f0       	breq	.+6      	; 0x17ee <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
    17e8:	48 2f       	mov	r20, r24
    17ea:	40 68       	ori	r20, 0x80	; 128
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
    17ee:	48 2f       	mov	r20, r24
    17f0:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	ce 01       	movw	r24, r28
    17f6:	aa df       	rcall	.-172    	; 0x174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	08 95       	ret

00001800 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
    1808:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	77 df       	rcall	.-274    	; 0x16fc <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
    180e:	11 23       	and	r17, r17
    1810:	19 f0       	breq	.+6      	; 0x1818 <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
    1812:	48 2f       	mov	r20, r24
    1814:	40 64       	ori	r20, 0x40	; 64
    1816:	02 c0       	rjmp	.+4      	; 0x181c <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
    1818:	48 2f       	mov	r20, r24
    181a:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	ce 01       	movw	r24, r28
    1820:	95 df       	rcall	.-214    	; 0x174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	08 95       	ret

0000182a <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	62 df       	rcall	.-316    	; 0x16fc <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
    1838:	11 30       	cpi	r17, 0x01	; 1
    183a:	19 f4       	brne	.+6      	; 0x1842 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
    183c:	48 2f       	mov	r20, r24
    183e:	40 61       	ori	r20, 0x10	; 16
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
    1842:	48 2f       	mov	r20, r24
    1844:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	ce 01       	movw	r24, r28
    184a:	80 df       	rcall	.-256    	; 0x174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	ec 01       	movw	r28, r24
    185c:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    185e:	e8 e0       	ldi	r30, 0x08	; 8
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	80 81       	ld	r24, Z
    1864:	80 6c       	ori	r24, 0xC0	; 192
    1866:	80 83       	st	Z, r24
	SPI.begin();
    1868:	9e d1       	rcall	.+828    	; 0x1ba6 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
    186a:	85 e5       	ldi	r24, 0x55	; 85
    186c:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
    186e:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	ce 01       	movw	r24, r28
    1874:	da df       	rcall	.-76     	; 0x182a <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	ce 01       	movw	r24, r28
    187a:	ad df       	rcall	.-166    	; 0x17d6 <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	bf df       	rcall	.-130    	; 0x1800 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
    1882:	ce 01       	movw	r24, r28
    1884:	9a df       	rcall	.-204    	; 0x17ba <_ZN17Adafruit_MAX3186510clearFaultEv>
    1886:	81 e0       	ldi	r24, 0x01	; 1
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	08 95       	ret

00001890 <_ZN17Adafruit_MAX318657readRTDEv>:
    1890:	cf 93       	push	r28
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
	clearFault();
    1896:	91 df       	rcall	.-222    	; 0x17ba <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	ce 01       	movw	r24, r28
    189c:	9c df       	rcall	.-200    	; 0x17d6 <_ZN17Adafruit_MAX3186510enableBiasEb>
    189e:	83 ec       	ldi	r24, 0xC3	; 195
    18a0:	99 e0       	ldi	r25, 0x09	; 9
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <_ZN17Adafruit_MAX318657readRTDEv+0x18>
    18a8:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	ce 01       	movw	r24, r28
    18ae:	26 df       	rcall	.-436    	; 0x16fc <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
	writeRegister8(MAX31856_CONFIG_REG, t);
    18b0:	48 2f       	mov	r20, r24
    18b2:	40 62       	ori	r20, 0x20	; 32
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	ce 01       	movw	r24, r28
    18b8:	49 df       	rcall	.-366    	; 0x174c <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    18ba:	89 e7       	ldi	r24, 0x79	; 121
    18bc:	9f e3       	ldi	r25, 0x3F	; 63
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <_ZN17Adafruit_MAX318657readRTDEv+0x34>
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
    18c4:	00 00       	nop
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	ce 01       	movw	r24, r28
    18ca:	28 df       	rcall	.-432    	; 0x171c <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
    18cc:	96 95       	lsr	r25
    18ce:	87 95       	ror	r24
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
    18d6:	4f 92       	push	r4
    18d8:	5f 92       	push	r5
    18da:	6f 92       	push	r6
    18dc:	7f 92       	push	r7
    18de:	8f 92       	push	r8
    18e0:	9f 92       	push	r9
    18e2:	af 92       	push	r10
    18e4:	bf 92       	push	r11
    18e6:	cf 92       	push	r12
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	6a 01       	movw	r12, r20
    18f8:	7b 01       	movw	r14, r22
    18fa:	48 01       	movw	r8, r16
    18fc:	59 01       	movw	r10, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
    18fe:	c8 df       	rcall	.-112    	; 0x1890 <_ZN17Adafruit_MAX318657readRTDEv>
    1900:	bc 01       	movw	r22, r24
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a3 d2       	rcall	.+1350   	; 0x1e4e <__floatunsisf>
	Rt /= 32768;
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	58 e3       	ldi	r21, 0x38	; 56
    1910:	54 d3       	rcall	.+1704   	; 0x1fba <__mulsf3>
	Rt *= refResistor;
    1912:	a5 01       	movw	r20, r10
    1914:	94 01       	movw	r18, r8
    1916:	51 d3       	rcall	.+1698   	; 0x1fba <__mulsf3>
    1918:	4b 01       	movw	r8, r22
    191a:	5c 01       	movw	r10, r24
    191c:	a7 01       	movw	r20, r14
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
	temp = (sqrt(temp) + Z1) / Z4;
    191e:	96 01       	movw	r18, r12
    1920:	6f e7       	ldi	r22, 0x7F	; 127
    1922:	75 e0       	ldi	r23, 0x05	; 5
    1924:	8b e1       	ldi	r24, 0x1B	; 27
    1926:	96 eb       	ldi	r25, 0xB6	; 182
    1928:	f9 d1       	rcall	.+1010   	; 0x1d1c <__divsf3>
    192a:	2b 01       	movw	r4, r22
    192c:	3c 01       	movw	r6, r24
    192e:	a5 01       	movw	r20, r10
    1930:	94 01       	movw	r18, r8
    1932:	c3 01       	movw	r24, r6
    1934:	b2 01       	movw	r22, r4
    1936:	41 d3       	rcall	.+1666   	; 0x1fba <__mulsf3>
    1938:	26 e1       	ldi	r18, 0x16	; 22
    193a:	33 e8       	ldi	r19, 0x83	; 131
    193c:	43 e9       	ldi	r20, 0x93	; 147
    193e:	57 e3       	ldi	r21, 0x37	; 55
    1940:	85 d1       	rcall	.+778    	; 0x1c4c <__addsf3>
    1942:	a2 d3       	rcall	.+1860   	; 0x2088 <sqrt>
    1944:	22 e3       	ldi	r18, 0x32	; 50
    1946:	31 e1       	ldi	r19, 0x11	; 17
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5b e3       	ldi	r21, 0x3B	; 59
    194c:	7e d1       	rcall	.+764    	; 0x1c4a <__subsf3>
    194e:	2f e7       	ldi	r18, 0x7F	; 127
    1950:	35 e0       	ldi	r19, 0x05	; 5
    1952:	4b e9       	ldi	r20, 0x9B	; 155
    1954:	55 eb       	ldi	r21, 0xB5	; 181
    1956:	e2 d1       	rcall	.+964    	; 0x1d1c <__divsf3>
    1958:	06 2f       	mov	r16, r22
    195a:	17 2f       	mov	r17, r23
    195c:	d8 2f       	mov	r29, r24
    195e:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	25 d3       	rcall	.+1610   	; 0x1fb2 <__gesf2>
    1968:	88 23       	and	r24, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <_ZN17Adafruit_MAX3186511temperatureEff+0x98>

	// ugh.
	Rt /= RTDnominal;
	Rt *= 100;      // normalize to 100 ohm
    196c:	60 c0       	rjmp	.+192    	; 0x1a2e <_ZN17Adafruit_MAX3186511temperatureEff+0x158>
    196e:	a7 01       	movw	r20, r14
    1970:	96 01       	movw	r18, r12
    1972:	c5 01       	movw	r24, r10
    1974:	b4 01       	movw	r22, r8
    1976:	d2 d1       	rcall	.+932    	; 0x1d1c <__divsf3>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	48 ec       	ldi	r20, 0xC8	; 200
    197e:	52 e4       	ldi	r21, 0x42	; 66
    1980:	1c d3       	rcall	.+1592   	; 0x1fba <__mulsf3>
    1982:	6b 01       	movw	r12, r22

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
    1984:	7c 01       	movw	r14, r24
    1986:	2b e5       	ldi	r18, 0x5B	; 91
    1988:	32 e4       	ldi	r19, 0x42	; 66
    198a:	4e e0       	ldi	r20, 0x0E	; 14
    198c:	50 e4       	ldi	r21, 0x40	; 64
    198e:	15 d3       	rcall	.+1578   	; 0x1fba <__mulsf3>
    1990:	2f e1       	ldi	r18, 0x1F	; 31
    1992:	35 e0       	ldi	r19, 0x05	; 5
    1994:	42 e7       	ldi	r20, 0x72	; 114
    1996:	53 e4       	ldi	r21, 0x43	; 67
    1998:	58 d1       	rcall	.+688    	; 0x1c4a <__subsf3>
    199a:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // square
    199c:	3c 01       	movw	r6, r24
    199e:	a7 01       	movw	r20, r14
    19a0:	96 01       	movw	r18, r12
    19a2:	c7 01       	movw	r24, r14
    19a4:	b6 01       	movw	r22, r12
    19a6:	09 d3       	rcall	.+1554   	; 0x1fba <__mulsf3>
    19a8:	4b 01       	movw	r8, r22
	temp += 2.5859e-3 * rpoly;
    19aa:	5c 01       	movw	r10, r24
    19ac:	24 e3       	ldi	r18, 0x34	; 52
    19ae:	38 e7       	ldi	r19, 0x78	; 120
    19b0:	49 e2       	ldi	r20, 0x29	; 41
    19b2:	5b e3       	ldi	r21, 0x3B	; 59
    19b4:	02 d3       	rcall	.+1540   	; 0x1fba <__mulsf3>
    19b6:	a3 01       	movw	r20, r6
    19b8:	92 01       	movw	r18, r4
    19ba:	48 d1       	rcall	.+656    	; 0x1c4c <__addsf3>
    19bc:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^3
    19be:	3c 01       	movw	r6, r24
    19c0:	a5 01       	movw	r20, r10
    19c2:	94 01       	movw	r18, r8
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
    19c8:	f8 d2       	rcall	.+1520   	; 0x1fba <__mulsf3>
    19ca:	4b 01       	movw	r8, r22
	temp -= 4.8260e-6 * rpoly;
    19cc:	5c 01       	movw	r10, r24
    19ce:	26 e0       	ldi	r18, 0x06	; 6
    19d0:	3f ee       	ldi	r19, 0xEF	; 239
    19d2:	41 ea       	ldi	r20, 0xA1	; 161
    19d4:	56 e3       	ldi	r21, 0x36	; 54
    19d6:	f1 d2       	rcall	.+1506   	; 0x1fba <__mulsf3>
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	c3 01       	movw	r24, r6
    19de:	b2 01       	movw	r22, r4
    19e0:	34 d1       	rcall	.+616    	; 0x1c4a <__subsf3>
    19e2:	2b 01       	movw	r4, r22
	rpoly *= Rt;  // ^4
    19e4:	3c 01       	movw	r6, r24
    19e6:	a5 01       	movw	r20, r10
    19e8:	94 01       	movw	r18, r8
    19ea:	c7 01       	movw	r24, r14
    19ec:	b6 01       	movw	r22, r12
    19ee:	e5 d2       	rcall	.+1482   	; 0x1fba <__mulsf3>
    19f0:	4b 01       	movw	r8, r22
	temp -= 2.8183e-8 * rpoly;
    19f2:	5c 01       	movw	r10, r24
    19f4:	23 e1       	ldi	r18, 0x13	; 19
    19f6:	37 e1       	ldi	r19, 0x17	; 23
    19f8:	42 ef       	ldi	r20, 0xF2	; 242
    19fa:	52 e3       	ldi	r21, 0x32	; 50
    19fc:	de d2       	rcall	.+1468   	; 0x1fba <__mulsf3>
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	c3 01       	movw	r24, r6
    1a04:	b2 01       	movw	r22, r4
    1a06:	21 d1       	rcall	.+578    	; 0x1c4a <__subsf3>
    1a08:	2b 01       	movw	r4, r22
    1a0a:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
	temp += 1.5243e-10 * rpoly;
    1a0c:	a5 01       	movw	r20, r10
    1a0e:	94 01       	movw	r18, r8
    1a10:	c7 01       	movw	r24, r14
    1a12:	b6 01       	movw	r22, r12
    1a14:	d2 d2       	rcall	.+1444   	; 0x1fba <__mulsf3>
    1a16:	2b e3       	ldi	r18, 0x3B	; 59
    1a18:	39 e9       	ldi	r19, 0x99	; 153
    1a1a:	47 e2       	ldi	r20, 0x27	; 39
    1a1c:	5f e2       	ldi	r21, 0x2F	; 47
    1a1e:	cd d2       	rcall	.+1434   	; 0x1fba <__mulsf3>
    1a20:	a3 01       	movw	r20, r6
    1a22:	92 01       	movw	r18, r4
    1a24:	13 d1       	rcall	.+550    	; 0x1c4c <__addsf3>
    1a26:	06 2f       	mov	r16, r22
    1a28:	17 2f       	mov	r17, r23
    1a2a:	d8 2f       	mov	r29, r24

	return temp;
    1a2c:	c9 2f       	mov	r28, r25
    1a2e:	60 2f       	mov	r22, r16
    1a30:	71 2f       	mov	r23, r17
    1a32:	8d 2f       	mov	r24, r29
}
    1a34:	9c 2f       	mov	r25, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	7f 90       	pop	r7
    1a50:	6f 90       	pop	r6
    1a52:	5f 90       	pop	r5
    1a54:	4f 90       	pop	r4
    1a56:	08 95       	ret

00001a58 <_Z8spi_initv>:

extern volatile uint8_t spiTimerCheck;

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    1a58:	8c b5       	in	r24, 0x2c	; 44
    1a5a:	82 65       	ori	r24, 0x52	; 82
    1a5c:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
    1a5e:	8c b5       	in	r24, 0x2c	; 44
    1a60:	8a 7f       	andi	r24, 0xFA	; 250
    1a62:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDR(SCK_PORT) |= (1 << SCK_PIN) | (1 << MOSI_PIN) ;
    1a64:	84 b1       	in	r24, 0x04	; 4
    1a66:	86 60       	ori	r24, 0x06	; 6
    1a68:	84 b9       	out	0x04, r24	; 4
	DDR(SS_PORT) |= (1  << SS_PIN);
    1a6a:	20 9a       	sbi	0x04, 0	; 4
	SS_PORT |= (1 << SS_PIN);
    1a6c:	28 9a       	sbi	0x05, 0	; 5
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
    1a6e:	e7 e0       	ldi	r30, 0x07	; 7
    1a70:	f1 e0       	ldi	r31, 0x01	; 1
    1a72:	80 81       	ld	r24, Z
    1a74:	80 6c       	ori	r24, 0xC0	; 192
    1a76:	80 83       	st	Z, r24
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
    1a78:	e8 e0       	ldi	r30, 0x08	; 8
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 68       	ori	r24, 0x80	; 128
    1a80:	80 83       	st	Z, r24
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	80 83       	st	Z, r24
    1a88:	08 95       	ret

00001a8a <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1a8a:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	spiTimerCheck = 0;
    1a8c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <spiTimerCheck>
	//wait 1 second in while loop.
	while ((!(SPSR & (1 << SPIF))) && spiTimerCheck <= 1){};
    1a90:	0d b4       	in	r0, 0x2d	; 45
    1a92:	07 fc       	sbrc	r0, 7
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <_Z11spiSendBytec+0x14>
    1a96:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <spiTimerCheck>
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	c8 f3       	brcs	.-14     	; 0x1a90 <_Z11spiSendBytec+0x6>
    1a9e:	08 95       	ret

00001aa0 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
    1aa0:	fc 01       	movw	r30, r24
	num = numm;
    1aa2:	71 83       	std	Z+1, r23	; 0x01
    1aa4:	60 83       	st	Z, r22
	digits1 = ii;
    1aa6:	53 83       	std	Z+3, r21	; 0x03
    1aa8:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
    1aaa:	35 83       	std	Z+5, r19	; 0x05
    1aac:	24 83       	std	Z+4, r18	; 0x04
    1aae:	08 95       	ret

00001ab0 <_ZN7max721917MAX7219_writeDataEcc>:
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
	}
}

void max7219::MAX7219_writeData(char data_register, char data)
{
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	ec 01       	movw	r28, r24
    1ab8:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
    1aba:	28 81       	ld	r18, Y
    1abc:	39 81       	ldd	r19, Y+1	; 0x01
    1abe:	21 15       	cp	r18, r1
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <_ZN7max721917MAX7219_writeDataEcc+0x1c>
    1ac4:	21 30       	cpi	r18, 0x01	; 1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	39 f0       	breq	.+14     	; 0x1ad8 <_ZN7max721917MAX7219_writeDataEcc+0x28>
    1aca:	0b c0       	rjmp	.+22     	; 0x1ae2 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 0:
		MAX7219_LOAD_ON_1(0);
    1acc:	e8 e0       	ldi	r30, 0x08	; 8
    1ace:	f1 e0       	ldi	r31, 0x01	; 1
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 77       	andi	r24, 0x7F	; 127
    1ad4:	80 83       	st	Z, r24
		break;
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <_ZN7max721917MAX7219_writeDataEcc+0x32>
		case 1:
		MAX7219_LOAD_ON_2(1);
    1ad8:	e8 e0       	ldi	r30, 0x08	; 8
    1ada:	f1 e0       	ldi	r31, 0x01	; 1
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7b       	andi	r24, 0xBF	; 191
    1ae0:	80 83       	st	Z, r24
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
    1ae2:	86 2f       	mov	r24, r22
    1ae4:	d2 df       	rcall	.-92     	; 0x1a8a <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
    1ae6:	81 2f       	mov	r24, r17
    1ae8:	d0 df       	rcall	.-96     	; 0x1a8a <_Z11spiSendBytec>
	
	switch(max7219::num){
    1aea:	88 81       	ld	r24, Y
    1aec:	99 81       	ldd	r25, Y+1	; 0x01
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <_ZN7max721917MAX7219_writeDataEcc+0x48>
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	39 f0       	breq	.+14     	; 0x1b04 <_ZN7max721917MAX7219_writeDataEcc+0x54>
    1af6:	0b c0       	rjmp	.+22     	; 0x1b0e <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
    1af8:	e8 e0       	ldi	r30, 0x08	; 8
    1afa:	f1 e0       	ldi	r31, 0x01	; 1
    1afc:	80 81       	ld	r24, Z
    1afe:	80 68       	ori	r24, 0x80	; 128
    1b00:	80 83       	st	Z, r24
		break;
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <_ZN7max721917MAX7219_writeDataEcc+0x5e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
    1b04:	e8 e0       	ldi	r30, 0x08	; 8
    1b06:	f1 e0       	ldi	r31, 0x01	; 1
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	80 83       	st	Z, r24
		break;
	}
	
}
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	08 95       	ret

00001b16 <_ZN7max721912MAX7219_initEc>:
void max7219::MAX7219_set(int numm, int ii, int jj) {
	num = numm;
	digits1 = ii;
	digits2 = jj;
}
void max7219::MAX7219_init(char a) {
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	ec 01       	movw	r28, r24
	if(a == REINITIALIZE){
    1b1c:	61 30       	cpi	r22, 0x01	; 1
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <_ZN7max721912MAX7219_initEc+0xe>
		spi_init();
    1b20:	9b df       	rcall	.-202    	; 0x1a58 <_Z8spi_initv>
    1b22:	15 c0       	rjmp	.+42     	; 0x1b4e <_ZN7max721912MAX7219_initEc+0x38>
	}
	else{
		spi_init();
    1b24:	99 df       	rcall	.-206    	; 0x1a58 <_Z8spi_initv>
    1b26:	4f ef       	ldi	r20, 0xFF	; 255
		// Decode mode to "Font Code-B"
		max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1b28:	69 e0       	ldi	r22, 0x09	; 9
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	c1 df       	rcall	.-126    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
		max7219::MAX7219_writeData(MAX7219_MODE_TEST, 0);
    1b30:	6f e0       	ldi	r22, 0x0F	; 15
    1b32:	ce 01       	movw	r24, r28
    1b34:	bd df       	rcall	.-134    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1b36:	47 e0       	ldi	r20, 0x07	; 7

		// Scan limit runs from 0.
		max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
    1b38:	6b e0       	ldi	r22, 0x0B	; 11
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	b9 df       	rcall	.-142    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1b3e:	4f ef       	ldi	r20, 0xFF	; 255
		max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0xff);
    1b40:	6a e0       	ldi	r22, 0x0A	; 10
    1b42:	ce 01       	movw	r24, r28
    1b44:	b5 df       	rcall	.-150    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1b46:	41 e0       	ldi	r20, 0x01	; 1
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
    1b48:	6c e0       	ldi	r22, 0x0C	; 12
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	b1 df       	rcall	.-158    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
	}
}
    1b52:	08 95       	ret

00001b54 <_ZN7max721920MAX7219_clearDisplayEv>:
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
	}
	
}

void max7219::MAX7219_clearDisplay()
{
    1b58:	ec 01       	movw	r28, r24
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE,0x00);
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	69 e0       	ldi	r22, 0x09	; 9
    1b5e:	a8 df       	rcall	.-176    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(1,das);
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	ce 01       	movw	r24, r28
    1b66:	a4 df       	rcall	.-184    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(2,das);
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	a0 df       	rcall	.-192    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(3,das);
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	63 e0       	ldi	r22, 0x03	; 3
    1b74:	ce 01       	movw	r24, r28
    1b76:	9c df       	rcall	.-200    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(4,das);
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	64 e0       	ldi	r22, 0x04	; 4
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	98 df       	rcall	.-208    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(5,das);
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	65 e0       	ldi	r22, 0x05	; 5
    1b84:	ce 01       	movw	r24, r28
    1b86:	94 df       	rcall	.-216    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(6,das);
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	66 e0       	ldi	r22, 0x06	; 6
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	90 df       	rcall	.-224    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(7,das);
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	67 e0       	ldi	r22, 0x07	; 7
    1b94:	ce 01       	movw	r24, r28
    1b96:	8c df       	rcall	.-232    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(8,das);
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	68 e0       	ldi	r22, 0x08	; 8
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	88 df       	rcall	.-240    	; 0x1ab0 <_ZN7max721917MAX7219_writeDataEcc>
    1ba0:	df 91       	pop	r29
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
	*/
}
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDR(SS_PORT) |= (1 << SS_PIN);
    1ba6:	20 9a       	sbi	0x04, 0	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1ba8:	8c b5       	in	r24, 0x2c	; 44
    1baa:	80 61       	ori	r24, 0x10	; 16
    1bac:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1bae:	8c b5       	in	r24, 0x2c	; 44
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
    1bb4:	8c b5       	in	r24, 0x2c	; 44
    1bb6:	8c 7f       	andi	r24, 0xFC	; 252
    1bb8:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDR(SCK_PORT) |= (1 << SCK_PIN);
    1bba:	21 9a       	sbi	0x04, 1	; 4
    //pinMode(MOSI, OUTPUT);
	DDR(MOSI_PORT) |= (1 << MOSI_PIN);
    1bbc:	22 9a       	sbi	0x04, 2	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    1bbe:	ea e0       	ldi	r30, 0x0A	; 10
    1bc0:	f1 e0       	ldi	r31, 0x01	; 1
    1bc2:	80 81       	ld	r24, Z
    1bc4:	85 60       	ori	r24, 0x05	; 5
    1bc6:	80 83       	st	Z, r24
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_II_PIN );
    1bc8:	eb e0       	ldi	r30, 0x0B	; 11
    1bca:	f1 e0       	ldi	r31, 0x01	; 1
    1bcc:	80 81       	ld	r24, Z
    1bce:	85 60       	ori	r24, 0x05	; 5
    1bd0:	80 83       	st	Z, r24
    1bd2:	08 95       	ret

00001bd4 <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	71 83       	std	Z+1, r23	; 0x01
    1bd8:	60 83       	st	Z, r22
    1bda:	08 95       	ret

00001bdc <_ZN6Timerr19setCompareInterruptEv>:
    1bdc:	ef e6       	ldi	r30, 0x6F	; 111
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	82 60       	ori	r24, 0x02	; 2
    1be4:	80 83       	st	Z, r24
    1be6:	08 95       	ret

00001be8 <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
		OCR1A = ocr;
    1be8:	07 2e       	mov	r0, r23
    1bea:	00 0c       	add	r0, r0
    1bec:	88 0b       	sbc	r24, r24
    1bee:	99 0b       	sbc	r25, r25
    1bf0:	30 d1       	rcall	.+608    	; 0x1e52 <__floatsisf>
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	df d1       	rcall	.+958    	; 0x1fba <__mulsf3>
    1bfc:	f7 d0       	rcall	.+494    	; 0x1dec <__fixsfsi>
    1bfe:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1c02:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
    1c06:	e1 e8       	ldi	r30, 0x81	; 129
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	85 60       	ori	r24, 0x05	; 5
    1c0e:	80 83       	st	Z, r24
    1c10:	08 95       	ret

00001c12 <_Z9initUART0v>:

void UART0TransmitString(const char *s)
{
	while(*s)
	UART0Transmit(*s++);
}
    1c12:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1c16:	87 e6       	ldi	r24, 0x67	; 103
    1c18:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1c1c:	88 e9       	ldi	r24, 0x98	; 152
    1c1e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1c22:	86 e0       	ldi	r24, 0x06	; 6
    1c24:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1c28:	08 95       	ret

00001c2a <__vector_25>:

ISR(USART0_RX_vect)
{
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	8f 93       	push	r24
	buffer=UDR0;
    1c36:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1c3a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <buffer>
	
}
    1c3e:	8f 91       	pop	r24
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <__subsf3>:
    1c4a:	50 58       	subi	r21, 0x80	; 128

00001c4c <__addsf3>:
    1c4c:	bb 27       	eor	r27, r27
    1c4e:	aa 27       	eor	r26, r26
    1c50:	0e d0       	rcall	.+28     	; 0x1c6e <__addsf3x>
    1c52:	75 c1       	rjmp	.+746    	; 0x1f3e <__fp_round>
    1c54:	66 d1       	rcall	.+716    	; 0x1f22 <__fp_pscA>
    1c56:	30 f0       	brcs	.+12     	; 0x1c64 <__addsf3+0x18>
    1c58:	6b d1       	rcall	.+726    	; 0x1f30 <__fp_pscB>
    1c5a:	20 f0       	brcs	.+8      	; 0x1c64 <__addsf3+0x18>
    1c5c:	31 f4       	brne	.+12     	; 0x1c6a <__addsf3+0x1e>
    1c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__addsf3+0x1a>
    1c62:	1e f4       	brtc	.+6      	; 0x1c6a <__addsf3+0x1e>
    1c64:	5b c1       	rjmp	.+694    	; 0x1f1c <__fp_nan>
    1c66:	0e f4       	brtc	.+2      	; 0x1c6a <__addsf3+0x1e>
    1c68:	e0 95       	com	r30
    1c6a:	e7 fb       	bst	r30, 7
    1c6c:	51 c1       	rjmp	.+674    	; 0x1f10 <__fp_inf>

00001c6e <__addsf3x>:
    1c6e:	e9 2f       	mov	r30, r25
    1c70:	77 d1       	rcall	.+750    	; 0x1f60 <__fp_split3>
    1c72:	80 f3       	brcs	.-32     	; 0x1c54 <__addsf3+0x8>
    1c74:	ba 17       	cp	r27, r26
    1c76:	62 07       	cpc	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	95 07       	cpc	r25, r21
    1c7e:	18 f0       	brcs	.+6      	; 0x1c86 <__addsf3x+0x18>
    1c80:	71 f4       	brne	.+28     	; 0x1c9e <__addsf3x+0x30>
    1c82:	9e f5       	brtc	.+102    	; 0x1cea <__addsf3x+0x7c>
    1c84:	8f c1       	rjmp	.+798    	; 0x1fa4 <__fp_zero>
    1c86:	0e f4       	brtc	.+2      	; 0x1c8a <__addsf3x+0x1c>
    1c88:	e0 95       	com	r30
    1c8a:	0b 2e       	mov	r0, r27
    1c8c:	ba 2f       	mov	r27, r26
    1c8e:	a0 2d       	mov	r26, r0
    1c90:	0b 01       	movw	r0, r22
    1c92:	b9 01       	movw	r22, r18
    1c94:	90 01       	movw	r18, r0
    1c96:	0c 01       	movw	r0, r24
    1c98:	ca 01       	movw	r24, r20
    1c9a:	a0 01       	movw	r20, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	ff 27       	eor	r31, r31
    1ca0:	59 1b       	sub	r21, r25
    1ca2:	99 f0       	breq	.+38     	; 0x1cca <__addsf3x+0x5c>
    1ca4:	59 3f       	cpi	r21, 0xF9	; 249
    1ca6:	50 f4       	brcc	.+20     	; 0x1cbc <__addsf3x+0x4e>
    1ca8:	50 3e       	cpi	r21, 0xE0	; 224
    1caa:	68 f1       	brcs	.+90     	; 0x1d06 <__addsf3x+0x98>
    1cac:	1a 16       	cp	r1, r26
    1cae:	f0 40       	sbci	r31, 0x00	; 0
    1cb0:	a2 2f       	mov	r26, r18
    1cb2:	23 2f       	mov	r18, r19
    1cb4:	34 2f       	mov	r19, r20
    1cb6:	44 27       	eor	r20, r20
    1cb8:	58 5f       	subi	r21, 0xF8	; 248
    1cba:	f3 cf       	rjmp	.-26     	; 0x1ca2 <__addsf3x+0x34>
    1cbc:	46 95       	lsr	r20
    1cbe:	37 95       	ror	r19
    1cc0:	27 95       	ror	r18
    1cc2:	a7 95       	ror	r26
    1cc4:	f0 40       	sbci	r31, 0x00	; 0
    1cc6:	53 95       	inc	r21
    1cc8:	c9 f7       	brne	.-14     	; 0x1cbc <__addsf3x+0x4e>
    1cca:	7e f4       	brtc	.+30     	; 0x1cea <__addsf3x+0x7c>
    1ccc:	1f 16       	cp	r1, r31
    1cce:	ba 0b       	sbc	r27, r26
    1cd0:	62 0b       	sbc	r22, r18
    1cd2:	73 0b       	sbc	r23, r19
    1cd4:	84 0b       	sbc	r24, r20
    1cd6:	ba f0       	brmi	.+46     	; 0x1d06 <__addsf3x+0x98>
    1cd8:	91 50       	subi	r25, 0x01	; 1
    1cda:	a1 f0       	breq	.+40     	; 0x1d04 <__addsf3x+0x96>
    1cdc:	ff 0f       	add	r31, r31
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	66 1f       	adc	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	c2 f7       	brpl	.-16     	; 0x1cd8 <__addsf3x+0x6a>
    1ce8:	0e c0       	rjmp	.+28     	; 0x1d06 <__addsf3x+0x98>
    1cea:	ba 0f       	add	r27, r26
    1cec:	62 1f       	adc	r22, r18
    1cee:	73 1f       	adc	r23, r19
    1cf0:	84 1f       	adc	r24, r20
    1cf2:	48 f4       	brcc	.+18     	; 0x1d06 <__addsf3x+0x98>
    1cf4:	87 95       	ror	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	b7 95       	ror	r27
    1cfc:	f7 95       	ror	r31
    1cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <__addsf3x+0x96>
    1d02:	b3 cf       	rjmp	.-154    	; 0x1c6a <__addsf3+0x1e>
    1d04:	93 95       	inc	r25
    1d06:	88 0f       	add	r24, r24
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <__addsf3x+0x9e>
    1d0a:	99 27       	eor	r25, r25
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	97 95       	ror	r25
    1d10:	87 95       	ror	r24
    1d12:	08 95       	ret

00001d14 <__cmpsf2>:
    1d14:	d9 d0       	rcall	.+434    	; 0x1ec8 <__fp_cmp>
    1d16:	08 f4       	brcc	.+2      	; 0x1d1a <__cmpsf2+0x6>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	08 95       	ret

00001d1c <__divsf3>:
    1d1c:	0c d0       	rcall	.+24     	; 0x1d36 <__divsf3x>
    1d1e:	0f c1       	rjmp	.+542    	; 0x1f3e <__fp_round>
    1d20:	07 d1       	rcall	.+526    	; 0x1f30 <__fp_pscB>
    1d22:	40 f0       	brcs	.+16     	; 0x1d34 <__divsf3+0x18>
    1d24:	fe d0       	rcall	.+508    	; 0x1f22 <__fp_pscA>
    1d26:	30 f0       	brcs	.+12     	; 0x1d34 <__divsf3+0x18>
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <__divsf3+0x16>
    1d2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <__divsf3+0x18>
    1d2e:	f0 c0       	rjmp	.+480    	; 0x1f10 <__fp_inf>
    1d30:	51 11       	cpse	r21, r1
    1d32:	39 c1       	rjmp	.+626    	; 0x1fa6 <__fp_szero>
    1d34:	f3 c0       	rjmp	.+486    	; 0x1f1c <__fp_nan>

00001d36 <__divsf3x>:
    1d36:	14 d1       	rcall	.+552    	; 0x1f60 <__fp_split3>
    1d38:	98 f3       	brcs	.-26     	; 0x1d20 <__divsf3+0x4>

00001d3a <__divsf3_pse>:
    1d3a:	99 23       	and	r25, r25
    1d3c:	c9 f3       	breq	.-14     	; 0x1d30 <__divsf3+0x14>
    1d3e:	55 23       	and	r21, r21
    1d40:	b1 f3       	breq	.-20     	; 0x1d2e <__divsf3+0x12>
    1d42:	95 1b       	sub	r25, r21
    1d44:	55 0b       	sbc	r21, r21
    1d46:	bb 27       	eor	r27, r27
    1d48:	aa 27       	eor	r26, r26
    1d4a:	62 17       	cp	r22, r18
    1d4c:	73 07       	cpc	r23, r19
    1d4e:	84 07       	cpc	r24, r20
    1d50:	38 f0       	brcs	.+14     	; 0x1d60 <__divsf3_pse+0x26>
    1d52:	9f 5f       	subi	r25, 0xFF	; 255
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	44 1f       	adc	r20, r20
    1d5c:	aa 1f       	adc	r26, r26
    1d5e:	a9 f3       	breq	.-22     	; 0x1d4a <__divsf3_pse+0x10>
    1d60:	33 d0       	rcall	.+102    	; 0x1dc8 <__divsf3_pse+0x8e>
    1d62:	0e 2e       	mov	r0, r30
    1d64:	3a f0       	brmi	.+14     	; 0x1d74 <__divsf3_pse+0x3a>
    1d66:	e0 e8       	ldi	r30, 0x80	; 128
    1d68:	30 d0       	rcall	.+96     	; 0x1dca <__divsf3_pse+0x90>
    1d6a:	91 50       	subi	r25, 0x01	; 1
    1d6c:	50 40       	sbci	r21, 0x00	; 0
    1d6e:	e6 95       	lsr	r30
    1d70:	00 1c       	adc	r0, r0
    1d72:	ca f7       	brpl	.-14     	; 0x1d66 <__divsf3_pse+0x2c>
    1d74:	29 d0       	rcall	.+82     	; 0x1dc8 <__divsf3_pse+0x8e>
    1d76:	fe 2f       	mov	r31, r30
    1d78:	27 d0       	rcall	.+78     	; 0x1dc8 <__divsf3_pse+0x8e>
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	88 1f       	adc	r24, r24
    1d80:	bb 1f       	adc	r27, r27
    1d82:	26 17       	cp	r18, r22
    1d84:	37 07       	cpc	r19, r23
    1d86:	48 07       	cpc	r20, r24
    1d88:	ab 07       	cpc	r26, r27
    1d8a:	b0 e8       	ldi	r27, 0x80	; 128
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <__divsf3_pse+0x56>
    1d8e:	bb 0b       	sbc	r27, r27
    1d90:	80 2d       	mov	r24, r0
    1d92:	bf 01       	movw	r22, r30
    1d94:	ff 27       	eor	r31, r31
    1d96:	93 58       	subi	r25, 0x83	; 131
    1d98:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9a:	2a f0       	brmi	.+10     	; 0x1da6 <__divsf3_pse+0x6c>
    1d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9e:	51 05       	cpc	r21, r1
    1da0:	68 f0       	brcs	.+26     	; 0x1dbc <__divsf3_pse+0x82>
    1da2:	b6 c0       	rjmp	.+364    	; 0x1f10 <__fp_inf>
    1da4:	00 c1       	rjmp	.+512    	; 0x1fa6 <__fp_szero>
    1da6:	5f 3f       	cpi	r21, 0xFF	; 255
    1da8:	ec f3       	brlt	.-6      	; 0x1da4 <__divsf3_pse+0x6a>
    1daa:	98 3e       	cpi	r25, 0xE8	; 232
    1dac:	dc f3       	brlt	.-10     	; 0x1da4 <__divsf3_pse+0x6a>
    1dae:	86 95       	lsr	r24
    1db0:	77 95       	ror	r23
    1db2:	67 95       	ror	r22
    1db4:	b7 95       	ror	r27
    1db6:	f7 95       	ror	r31
    1db8:	9f 5f       	subi	r25, 0xFF	; 255
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__divsf3_pse+0x74>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	96 95       	lsr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	97 f9       	bld	r25, 7
    1dc6:	08 95       	ret
    1dc8:	e1 e0       	ldi	r30, 0x01	; 1
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	62 17       	cp	r22, r18
    1dd4:	73 07       	cpc	r23, r19
    1dd6:	84 07       	cpc	r24, r20
    1dd8:	ba 07       	cpc	r27, r26
    1dda:	20 f0       	brcs	.+8      	; 0x1de4 <__divsf3_pse+0xaa>
    1ddc:	62 1b       	sub	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	84 0b       	sbc	r24, r20
    1de2:	ba 0b       	sbc	r27, r26
    1de4:	ee 1f       	adc	r30, r30
    1de6:	88 f7       	brcc	.-30     	; 0x1dca <__divsf3_pse+0x90>
    1de8:	e0 95       	com	r30
    1dea:	08 95       	ret

00001dec <__fixsfsi>:
    1dec:	04 d0       	rcall	.+8      	; 0x1df6 <__fixunssfsi>
    1dee:	68 94       	set
    1df0:	b1 11       	cpse	r27, r1
    1df2:	d9 c0       	rjmp	.+434    	; 0x1fa6 <__fp_szero>
    1df4:	08 95       	ret

00001df6 <__fixunssfsi>:
    1df6:	bc d0       	rcall	.+376    	; 0x1f70 <__fp_splitA>
    1df8:	88 f0       	brcs	.+34     	; 0x1e1c <__fixunssfsi+0x26>
    1dfa:	9f 57       	subi	r25, 0x7F	; 127
    1dfc:	90 f0       	brcs	.+36     	; 0x1e22 <__fixunssfsi+0x2c>
    1dfe:	b9 2f       	mov	r27, r25
    1e00:	99 27       	eor	r25, r25
    1e02:	b7 51       	subi	r27, 0x17	; 23
    1e04:	a0 f0       	brcs	.+40     	; 0x1e2e <__fixunssfsi+0x38>
    1e06:	d1 f0       	breq	.+52     	; 0x1e3c <__fixunssfsi+0x46>
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	1a f0       	brmi	.+6      	; 0x1e18 <__fixunssfsi+0x22>
    1e12:	ba 95       	dec	r27
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__fixunssfsi+0x12>
    1e16:	12 c0       	rjmp	.+36     	; 0x1e3c <__fixunssfsi+0x46>
    1e18:	b1 30       	cpi	r27, 0x01	; 1
    1e1a:	81 f0       	breq	.+32     	; 0x1e3c <__fixunssfsi+0x46>
    1e1c:	c3 d0       	rcall	.+390    	; 0x1fa4 <__fp_zero>
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	08 95       	ret
    1e22:	c0 c0       	rjmp	.+384    	; 0x1fa4 <__fp_zero>
    1e24:	67 2f       	mov	r22, r23
    1e26:	78 2f       	mov	r23, r24
    1e28:	88 27       	eor	r24, r24
    1e2a:	b8 5f       	subi	r27, 0xF8	; 248
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <__fixunssfsi+0x46>
    1e2e:	b9 3f       	cpi	r27, 0xF9	; 249
    1e30:	cc f3       	brlt	.-14     	; 0x1e24 <__fixunssfsi+0x2e>
    1e32:	86 95       	lsr	r24
    1e34:	77 95       	ror	r23
    1e36:	67 95       	ror	r22
    1e38:	b3 95       	inc	r27
    1e3a:	d9 f7       	brne	.-10     	; 0x1e32 <__fixunssfsi+0x3c>
    1e3c:	3e f4       	brtc	.+14     	; 0x1e4c <__fixunssfsi+0x56>
    1e3e:	90 95       	com	r25
    1e40:	80 95       	com	r24
    1e42:	70 95       	com	r23
    1e44:	61 95       	neg	r22
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	08 95       	ret

00001e4e <__floatunsisf>:
    1e4e:	e8 94       	clt
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <__floatsisf+0x12>

00001e52 <__floatsisf>:
    1e52:	97 fb       	bst	r25, 7
    1e54:	3e f4       	brtc	.+14     	; 0x1e64 <__floatsisf+0x12>
    1e56:	90 95       	com	r25
    1e58:	80 95       	com	r24
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	99 23       	and	r25, r25
    1e66:	a9 f0       	breq	.+42     	; 0x1e92 <__floatsisf+0x40>
    1e68:	f9 2f       	mov	r31, r25
    1e6a:	96 e9       	ldi	r25, 0x96	; 150
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	93 95       	inc	r25
    1e70:	f6 95       	lsr	r31
    1e72:	87 95       	ror	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b7 95       	ror	r27
    1e7a:	f1 11       	cpse	r31, r1
    1e7c:	f8 cf       	rjmp	.-16     	; 0x1e6e <__floatsisf+0x1c>
    1e7e:	fa f4       	brpl	.+62     	; 0x1ebe <__floatsisf+0x6c>
    1e80:	bb 0f       	add	r27, r27
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <__floatsisf+0x36>
    1e84:	60 ff       	sbrs	r22, 0
    1e86:	1b c0       	rjmp	.+54     	; 0x1ebe <__floatsisf+0x6c>
    1e88:	6f 5f       	subi	r22, 0xFF	; 255
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	16 c0       	rjmp	.+44     	; 0x1ebe <__floatsisf+0x6c>
    1e92:	88 23       	and	r24, r24
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <__floatsisf+0x48>
    1e96:	96 e9       	ldi	r25, 0x96	; 150
    1e98:	11 c0       	rjmp	.+34     	; 0x1ebc <__floatsisf+0x6a>
    1e9a:	77 23       	and	r23, r23
    1e9c:	21 f0       	breq	.+8      	; 0x1ea6 <__floatsisf+0x54>
    1e9e:	9e e8       	ldi	r25, 0x8E	; 142
    1ea0:	87 2f       	mov	r24, r23
    1ea2:	76 2f       	mov	r23, r22
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <__floatsisf+0x5e>
    1ea6:	66 23       	and	r22, r22
    1ea8:	71 f0       	breq	.+28     	; 0x1ec6 <__floatsisf+0x74>
    1eaa:	96 e8       	ldi	r25, 0x86	; 134
    1eac:	86 2f       	mov	r24, r22
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	2a f0       	brmi	.+10     	; 0x1ebe <__floatsisf+0x6c>
    1eb4:	9a 95       	dec	r25
    1eb6:	66 0f       	add	r22, r22
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 1f       	adc	r24, r24
    1ebc:	da f7       	brpl	.-10     	; 0x1eb4 <__floatsisf+0x62>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	96 95       	lsr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	97 f9       	bld	r25, 7
    1ec6:	08 95       	ret

00001ec8 <__fp_cmp>:
    1ec8:	99 0f       	add	r25, r25
    1eca:	00 08       	sbc	r0, r0
    1ecc:	55 0f       	add	r21, r21
    1ece:	aa 0b       	sbc	r26, r26
    1ed0:	e0 e8       	ldi	r30, 0x80	; 128
    1ed2:	fe ef       	ldi	r31, 0xFE	; 254
    1ed4:	16 16       	cp	r1, r22
    1ed6:	17 06       	cpc	r1, r23
    1ed8:	e8 07       	cpc	r30, r24
    1eda:	f9 07       	cpc	r31, r25
    1edc:	c0 f0       	brcs	.+48     	; 0x1f0e <__fp_cmp+0x46>
    1ede:	12 16       	cp	r1, r18
    1ee0:	13 06       	cpc	r1, r19
    1ee2:	e4 07       	cpc	r30, r20
    1ee4:	f5 07       	cpc	r31, r21
    1ee6:	98 f0       	brcs	.+38     	; 0x1f0e <__fp_cmp+0x46>
    1ee8:	62 1b       	sub	r22, r18
    1eea:	73 0b       	sbc	r23, r19
    1eec:	84 0b       	sbc	r24, r20
    1eee:	95 0b       	sbc	r25, r21
    1ef0:	39 f4       	brne	.+14     	; 0x1f00 <__fp_cmp+0x38>
    1ef2:	0a 26       	eor	r0, r26
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <__fp_cmp+0x46>
    1ef6:	23 2b       	or	r18, r19
    1ef8:	24 2b       	or	r18, r20
    1efa:	25 2b       	or	r18, r21
    1efc:	21 f4       	brne	.+8      	; 0x1f06 <__fp_cmp+0x3e>
    1efe:	08 95       	ret
    1f00:	0a 26       	eor	r0, r26
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <__fp_cmp+0x3e>
    1f04:	a1 40       	sbci	r26, 0x01	; 1
    1f06:	a6 95       	lsr	r26
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	81 1d       	adc	r24, r1
    1f0c:	81 1d       	adc	r24, r1
    1f0e:	08 95       	ret

00001f10 <__fp_inf>:
    1f10:	97 f9       	bld	r25, 7
    1f12:	9f 67       	ori	r25, 0x7F	; 127
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	08 95       	ret

00001f1c <__fp_nan>:
    1f1c:	9f ef       	ldi	r25, 0xFF	; 255
    1f1e:	80 ec       	ldi	r24, 0xC0	; 192
    1f20:	08 95       	ret

00001f22 <__fp_pscA>:
    1f22:	00 24       	eor	r0, r0
    1f24:	0a 94       	dec	r0
    1f26:	16 16       	cp	r1, r22
    1f28:	17 06       	cpc	r1, r23
    1f2a:	18 06       	cpc	r1, r24
    1f2c:	09 06       	cpc	r0, r25
    1f2e:	08 95       	ret

00001f30 <__fp_pscB>:
    1f30:	00 24       	eor	r0, r0
    1f32:	0a 94       	dec	r0
    1f34:	12 16       	cp	r1, r18
    1f36:	13 06       	cpc	r1, r19
    1f38:	14 06       	cpc	r1, r20
    1f3a:	05 06       	cpc	r0, r21
    1f3c:	08 95       	ret

00001f3e <__fp_round>:
    1f3e:	09 2e       	mov	r0, r25
    1f40:	03 94       	inc	r0
    1f42:	00 0c       	add	r0, r0
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <__fp_round+0xc>
    1f46:	88 23       	and	r24, r24
    1f48:	52 f0       	brmi	.+20     	; 0x1f5e <__fp_round+0x20>
    1f4a:	bb 0f       	add	r27, r27
    1f4c:	40 f4       	brcc	.+16     	; 0x1f5e <__fp_round+0x20>
    1f4e:	bf 2b       	or	r27, r31
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <__fp_round+0x18>
    1f52:	60 ff       	sbrs	r22, 0
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <__fp_round+0x20>
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	08 95       	ret

00001f60 <__fp_split3>:
    1f60:	57 fd       	sbrc	r21, 7
    1f62:	90 58       	subi	r25, 0x80	; 128
    1f64:	44 0f       	add	r20, r20
    1f66:	55 1f       	adc	r21, r21
    1f68:	59 f0       	breq	.+22     	; 0x1f80 <__fp_splitA+0x10>
    1f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6c:	71 f0       	breq	.+28     	; 0x1f8a <__fp_splitA+0x1a>
    1f6e:	47 95       	ror	r20

00001f70 <__fp_splitA>:
    1f70:	88 0f       	add	r24, r24
    1f72:	97 fb       	bst	r25, 7
    1f74:	99 1f       	adc	r25, r25
    1f76:	61 f0       	breq	.+24     	; 0x1f90 <__fp_splitA+0x20>
    1f78:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7a:	79 f0       	breq	.+30     	; 0x1f9a <__fp_splitA+0x2a>
    1f7c:	87 95       	ror	r24
    1f7e:	08 95       	ret
    1f80:	12 16       	cp	r1, r18
    1f82:	13 06       	cpc	r1, r19
    1f84:	14 06       	cpc	r1, r20
    1f86:	55 1f       	adc	r21, r21
    1f88:	f2 cf       	rjmp	.-28     	; 0x1f6e <__fp_split3+0xe>
    1f8a:	46 95       	lsr	r20
    1f8c:	f1 df       	rcall	.-30     	; 0x1f70 <__fp_splitA>
    1f8e:	08 c0       	rjmp	.+16     	; 0x1fa0 <__fp_splitA+0x30>
    1f90:	16 16       	cp	r1, r22
    1f92:	17 06       	cpc	r1, r23
    1f94:	18 06       	cpc	r1, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	f1 cf       	rjmp	.-30     	; 0x1f7c <__fp_splitA+0xc>
    1f9a:	86 95       	lsr	r24
    1f9c:	71 05       	cpc	r23, r1
    1f9e:	61 05       	cpc	r22, r1
    1fa0:	08 94       	sec
    1fa2:	08 95       	ret

00001fa4 <__fp_zero>:
    1fa4:	e8 94       	clt

00001fa6 <__fp_szero>:
    1fa6:	bb 27       	eor	r27, r27
    1fa8:	66 27       	eor	r22, r22
    1faa:	77 27       	eor	r23, r23
    1fac:	cb 01       	movw	r24, r22
    1fae:	97 f9       	bld	r25, 7
    1fb0:	08 95       	ret

00001fb2 <__gesf2>:
    1fb2:	8a df       	rcall	.-236    	; 0x1ec8 <__fp_cmp>
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <__gesf2+0x6>
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	08 95       	ret

00001fba <__mulsf3>:
    1fba:	0b d0       	rcall	.+22     	; 0x1fd2 <__mulsf3x>
    1fbc:	c0 cf       	rjmp	.-128    	; 0x1f3e <__fp_round>
    1fbe:	b1 df       	rcall	.-158    	; 0x1f22 <__fp_pscA>
    1fc0:	28 f0       	brcs	.+10     	; 0x1fcc <__mulsf3+0x12>
    1fc2:	b6 df       	rcall	.-148    	; 0x1f30 <__fp_pscB>
    1fc4:	18 f0       	brcs	.+6      	; 0x1fcc <__mulsf3+0x12>
    1fc6:	95 23       	and	r25, r21
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <__mulsf3+0x12>
    1fca:	a2 cf       	rjmp	.-188    	; 0x1f10 <__fp_inf>
    1fcc:	a7 cf       	rjmp	.-178    	; 0x1f1c <__fp_nan>
    1fce:	11 24       	eor	r1, r1
    1fd0:	ea cf       	rjmp	.-44     	; 0x1fa6 <__fp_szero>

00001fd2 <__mulsf3x>:
    1fd2:	c6 df       	rcall	.-116    	; 0x1f60 <__fp_split3>
    1fd4:	a0 f3       	brcs	.-24     	; 0x1fbe <__mulsf3+0x4>

00001fd6 <__mulsf3_pse>:
    1fd6:	95 9f       	mul	r25, r21
    1fd8:	d1 f3       	breq	.-12     	; 0x1fce <__mulsf3+0x14>
    1fda:	95 0f       	add	r25, r21
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	55 1f       	adc	r21, r21
    1fe0:	62 9f       	mul	r22, r18
    1fe2:	f0 01       	movw	r30, r0
    1fe4:	72 9f       	mul	r23, r18
    1fe6:	bb 27       	eor	r27, r27
    1fe8:	f0 0d       	add	r31, r0
    1fea:	b1 1d       	adc	r27, r1
    1fec:	63 9f       	mul	r22, r19
    1fee:	aa 27       	eor	r26, r26
    1ff0:	f0 0d       	add	r31, r0
    1ff2:	b1 1d       	adc	r27, r1
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	64 9f       	mul	r22, r20
    1ff8:	66 27       	eor	r22, r22
    1ffa:	b0 0d       	add	r27, r0
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	66 1f       	adc	r22, r22
    2000:	82 9f       	mul	r24, r18
    2002:	22 27       	eor	r18, r18
    2004:	b0 0d       	add	r27, r0
    2006:	a1 1d       	adc	r26, r1
    2008:	62 1f       	adc	r22, r18
    200a:	73 9f       	mul	r23, r19
    200c:	b0 0d       	add	r27, r0
    200e:	a1 1d       	adc	r26, r1
    2010:	62 1f       	adc	r22, r18
    2012:	83 9f       	mul	r24, r19
    2014:	a0 0d       	add	r26, r0
    2016:	61 1d       	adc	r22, r1
    2018:	22 1f       	adc	r18, r18
    201a:	74 9f       	mul	r23, r20
    201c:	33 27       	eor	r19, r19
    201e:	a0 0d       	add	r26, r0
    2020:	61 1d       	adc	r22, r1
    2022:	23 1f       	adc	r18, r19
    2024:	84 9f       	mul	r24, r20
    2026:	60 0d       	add	r22, r0
    2028:	21 1d       	adc	r18, r1
    202a:	82 2f       	mov	r24, r18
    202c:	76 2f       	mov	r23, r22
    202e:	6a 2f       	mov	r22, r26
    2030:	11 24       	eor	r1, r1
    2032:	9f 57       	subi	r25, 0x7F	; 127
    2034:	50 40       	sbci	r21, 0x00	; 0
    2036:	8a f0       	brmi	.+34     	; 0x205a <__mulsf3_pse+0x84>
    2038:	e1 f0       	breq	.+56     	; 0x2072 <__mulsf3_pse+0x9c>
    203a:	88 23       	and	r24, r24
    203c:	4a f0       	brmi	.+18     	; 0x2050 <__mulsf3_pse+0x7a>
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	bb 1f       	adc	r27, r27
    2044:	66 1f       	adc	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	91 50       	subi	r25, 0x01	; 1
    204c:	50 40       	sbci	r21, 0x00	; 0
    204e:	a9 f7       	brne	.-22     	; 0x203a <__mulsf3_pse+0x64>
    2050:	9e 3f       	cpi	r25, 0xFE	; 254
    2052:	51 05       	cpc	r21, r1
    2054:	70 f0       	brcs	.+28     	; 0x2072 <__mulsf3_pse+0x9c>
    2056:	5c cf       	rjmp	.-328    	; 0x1f10 <__fp_inf>
    2058:	a6 cf       	rjmp	.-180    	; 0x1fa6 <__fp_szero>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	ec f3       	brlt	.-6      	; 0x2058 <__mulsf3_pse+0x82>
    205e:	98 3e       	cpi	r25, 0xE8	; 232
    2060:	dc f3       	brlt	.-10     	; 0x2058 <__mulsf3_pse+0x82>
    2062:	86 95       	lsr	r24
    2064:	77 95       	ror	r23
    2066:	67 95       	ror	r22
    2068:	b7 95       	ror	r27
    206a:	f7 95       	ror	r31
    206c:	e7 95       	ror	r30
    206e:	9f 5f       	subi	r25, 0xFF	; 255
    2070:	c1 f7       	brne	.-16     	; 0x2062 <__mulsf3_pse+0x8c>
    2072:	fe 2b       	or	r31, r30
    2074:	88 0f       	add	r24, r24
    2076:	91 1d       	adc	r25, r1
    2078:	96 95       	lsr	r25
    207a:	87 95       	ror	r24
    207c:	97 f9       	bld	r25, 7
    207e:	08 95       	ret
    2080:	11 f4       	brne	.+4      	; 0x2086 <__mulsf3_pse+0xb0>
    2082:	0e f4       	brtc	.+2      	; 0x2086 <__mulsf3_pse+0xb0>
    2084:	4b cf       	rjmp	.-362    	; 0x1f1c <__fp_nan>
    2086:	3e c0       	rjmp	.+124    	; 0x2104 <__fp_mpack>

00002088 <sqrt>:
    2088:	73 df       	rcall	.-282    	; 0x1f70 <__fp_splitA>
    208a:	d0 f3       	brcs	.-12     	; 0x2080 <__mulsf3_pse+0xaa>
    208c:	99 23       	and	r25, r25
    208e:	d9 f3       	breq	.-10     	; 0x2086 <__mulsf3_pse+0xb0>
    2090:	ce f3       	brts	.-14     	; 0x2084 <__mulsf3_pse+0xae>
    2092:	9f 57       	subi	r25, 0x7F	; 127
    2094:	55 0b       	sbc	r21, r21
    2096:	87 ff       	sbrs	r24, 7
    2098:	43 d0       	rcall	.+134    	; 0x2120 <__fp_norm2>
    209a:	00 24       	eor	r0, r0
    209c:	a0 e6       	ldi	r26, 0x60	; 96
    209e:	40 ea       	ldi	r20, 0xA0	; 160
    20a0:	90 01       	movw	r18, r0
    20a2:	80 58       	subi	r24, 0x80	; 128
    20a4:	56 95       	lsr	r21
    20a6:	97 95       	ror	r25
    20a8:	28 f4       	brcc	.+10     	; 0x20b4 <sqrt+0x2c>
    20aa:	80 5c       	subi	r24, 0xC0	; 192
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	20 f0       	brcs	.+8      	; 0x20bc <sqrt+0x34>
    20b4:	26 17       	cp	r18, r22
    20b6:	37 07       	cpc	r19, r23
    20b8:	48 07       	cpc	r20, r24
    20ba:	30 f4       	brcc	.+12     	; 0x20c8 <sqrt+0x40>
    20bc:	62 1b       	sub	r22, r18
    20be:	73 0b       	sbc	r23, r19
    20c0:	84 0b       	sbc	r24, r20
    20c2:	20 29       	or	r18, r0
    20c4:	31 29       	or	r19, r1
    20c6:	4a 2b       	or	r20, r26
    20c8:	a6 95       	lsr	r26
    20ca:	17 94       	ror	r1
    20cc:	07 94       	ror	r0
    20ce:	20 25       	eor	r18, r0
    20d0:	31 25       	eor	r19, r1
    20d2:	4a 27       	eor	r20, r26
    20d4:	58 f7       	brcc	.-42     	; 0x20ac <sqrt+0x24>
    20d6:	66 0f       	add	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <sqrt+0x5e>
    20de:	26 17       	cp	r18, r22
    20e0:	37 07       	cpc	r19, r23
    20e2:	48 07       	cpc	r20, r24
    20e4:	30 f4       	brcc	.+12     	; 0x20f2 <sqrt+0x6a>
    20e6:	62 0b       	sbc	r22, r18
    20e8:	73 0b       	sbc	r23, r19
    20ea:	84 0b       	sbc	r24, r20
    20ec:	20 0d       	add	r18, r0
    20ee:	31 1d       	adc	r19, r1
    20f0:	41 1d       	adc	r20, r1
    20f2:	a0 95       	com	r26
    20f4:	81 f7       	brne	.-32     	; 0x20d6 <sqrt+0x4e>
    20f6:	b9 01       	movw	r22, r18
    20f8:	84 2f       	mov	r24, r20
    20fa:	91 58       	subi	r25, 0x81	; 129
    20fc:	88 0f       	add	r24, r24
    20fe:	96 95       	lsr	r25
    2100:	87 95       	ror	r24
    2102:	08 95       	ret

00002104 <__fp_mpack>:
    2104:	9f 3f       	cpi	r25, 0xFF	; 255
    2106:	31 f0       	breq	.+12     	; 0x2114 <__fp_mpack_finite+0xc>

00002108 <__fp_mpack_finite>:
    2108:	91 50       	subi	r25, 0x01	; 1
    210a:	20 f4       	brcc	.+8      	; 0x2114 <__fp_mpack_finite+0xc>
    210c:	87 95       	ror	r24
    210e:	77 95       	ror	r23
    2110:	67 95       	ror	r22
    2112:	b7 95       	ror	r27
    2114:	88 0f       	add	r24, r24
    2116:	91 1d       	adc	r25, r1
    2118:	96 95       	lsr	r25
    211a:	87 95       	ror	r24
    211c:	97 f9       	bld	r25, 7
    211e:	08 95       	ret

00002120 <__fp_norm2>:
    2120:	91 50       	subi	r25, 0x01	; 1
    2122:	50 40       	sbci	r21, 0x00	; 0
    2124:	66 0f       	add	r22, r22
    2126:	77 1f       	adc	r23, r23
    2128:	88 1f       	adc	r24, r24
    212a:	d2 f7       	brpl	.-12     	; 0x2120 <__fp_norm2>
    212c:	08 95       	ret

0000212e <__divmodhi4>:
    212e:	97 fb       	bst	r25, 7
    2130:	07 2e       	mov	r0, r23
    2132:	16 f4       	brtc	.+4      	; 0x2138 <__divmodhi4+0xa>
    2134:	00 94       	com	r0
    2136:	06 d0       	rcall	.+12     	; 0x2144 <__divmodhi4_neg1>
    2138:	77 fd       	sbrc	r23, 7
    213a:	08 d0       	rcall	.+16     	; 0x214c <__divmodhi4_neg2>
    213c:	0b d0       	rcall	.+22     	; 0x2154 <__udivmodhi4>
    213e:	07 fc       	sbrc	r0, 7
    2140:	05 d0       	rcall	.+10     	; 0x214c <__divmodhi4_neg2>
    2142:	3e f4       	brtc	.+14     	; 0x2152 <__divmodhi4_exit>

00002144 <__divmodhi4_neg1>:
    2144:	90 95       	com	r25
    2146:	81 95       	neg	r24
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	08 95       	ret

0000214c <__divmodhi4_neg2>:
    214c:	70 95       	com	r23
    214e:	61 95       	neg	r22
    2150:	7f 4f       	sbci	r23, 0xFF	; 255

00002152 <__divmodhi4_exit>:
    2152:	08 95       	ret

00002154 <__udivmodhi4>:
    2154:	aa 1b       	sub	r26, r26
    2156:	bb 1b       	sub	r27, r27
    2158:	51 e1       	ldi	r21, 0x11	; 17
    215a:	07 c0       	rjmp	.+14     	; 0x216a <__udivmodhi4_ep>

0000215c <__udivmodhi4_loop>:
    215c:	aa 1f       	adc	r26, r26
    215e:	bb 1f       	adc	r27, r27
    2160:	a6 17       	cp	r26, r22
    2162:	b7 07       	cpc	r27, r23
    2164:	10 f0       	brcs	.+4      	; 0x216a <__udivmodhi4_ep>
    2166:	a6 1b       	sub	r26, r22
    2168:	b7 0b       	sbc	r27, r23

0000216a <__udivmodhi4_ep>:
    216a:	88 1f       	adc	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	5a 95       	dec	r21
    2170:	a9 f7       	brne	.-22     	; 0x215c <__udivmodhi4_loop>
    2172:	80 95       	com	r24
    2174:	90 95       	com	r25
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	08 95       	ret

0000217c <__tablejump2__>:
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	88 1f       	adc	r24, r24
    2182:	8b bf       	out	0x3b, r24	; 59
    2184:	07 90       	elpm	r0, Z+
    2186:	f6 91       	elpm	r31, Z
    2188:	e0 2d       	mov	r30, r0
    218a:	19 94       	eijmp

0000218c <_exit>:
    218c:	f8 94       	cli

0000218e <__stop_program>:
    218e:	ff cf       	rjmp	.-2      	; 0x218e <__stop_program>
